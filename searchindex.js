Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/alexnet_demo_cpu", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/bert_demo_cpu", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/convnext_to_torch_cpu", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/dinov2_to_paddle_cpu", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu", "demos/examples_and_demos/kornia_demo", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/mmpretrain_to_jax_cpu", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_demo_cpu", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/torch_to_jax_cpu", "demos/examples_and_demos/xgboost_demo", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/learn_the_basics/torch_to_tf_functions", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/why_transpile", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ivy_vs_onnx"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/alexnet_demo_cpu.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/bert_demo_cpu.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/convnext_to_torch_cpu.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/dinov2_to_paddle_cpu.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu.ipynb", "demos/examples_and_demos/kornia_demo.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/mmpretrain_to_jax_cpu.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_demo_cpu.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/torch_to_jax_cpu.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/learn_the_basics/torch_to_tf_functions.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/why_transpile.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ivy_vs_onnx.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "Ivy AlexNet demo", "# Ivy Bert Demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "Transpiling Functions from PyTorch to TensorFlow", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "ssim_loss", "wasserstein_loss_discriminator", "wasserstein_loss_generator", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Why Transpile?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "Frameworks", "Graph Tracers", "Comparing Ivy with ONNX"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 167, 177, 180, 183, 184, 185, 187, 191, 192, 206, 209, 219, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 592, 598, 603, 604, 605, 606, 607, 609, 611, 612, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 735, 737, 739, 740, 745, 746, 750, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 871, 872, 874, 875, 876, 877, 878, 879, 880], "notebook": [0, 4, 5, 6, 7, 12, 13, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 58, 809, 828], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 192, 204, 206, 208, 209, 211, 212, 214, 216, 219, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 399, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 421, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 439, 440, 441, 442, 444, 445, 446, 447, 449, 450, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 584, 585, 588, 589, 590, 592, 598, 602, 603, 604, 605, 607, 609, 611, 612, 613, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 794, 799, 803, 804, 806, 807, 808, 809, 810, 811, 813, 816, 817, 821, 822, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880], "dedic": [0, 804, 837, 852, 863], "task": [0, 1, 8, 9, 60, 652, 730, 731, 732, 828, 829, 831, 835, 836, 837, 857, 858, 871, 878], "util": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 23, 24, 25, 34, 37, 39, 40, 57, 60, 69, 92, 210, 388, 459, 643, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 835, 842, 846, 849, 850, 853, 856, 860, 861, 865, 875], "power": [0, 33, 43, 44, 68, 69, 70, 74, 91, 92, 93, 97, 114, 115, 246, 255, 256, 290, 345, 358, 381, 384, 387, 435, 594, 605, 617, 644, 646, 649, 653, 691, 704, 739, 806, 862, 878], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 60, 61, 62, 69, 74, 75, 76, 84, 92, 97, 98, 107, 109, 110, 130, 376, 386, 390, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 506, 511, 557, 567, 607, 629, 630, 632, 637, 638, 646, 647, 649, 650, 651, 692, 708, 717, 718, 719, 721, 723, 724, 726, 728, 803, 809, 816, 822, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 879], "emploi": [0, 26], "build": [0, 5, 15, 16, 30, 33, 40, 43, 44, 47, 48, 49, 50, 55, 57, 62, 80, 86, 115, 657, 764, 765, 766, 767, 807, 808, 809, 828, 829, 835, 838, 844, 845, 853, 855, 864, 866, 867, 869, 872, 875, 878], "Thegoal": [0, 31, 57, 259, 644, 834, 837, 878, 880], "accur": [0, 8, 9, 23, 257, 275, 644, 649, 697, 854], "distinguish": 0, "between": [0, 8, 9, 26, 31, 32, 37, 48, 49, 50, 55, 68, 69, 70, 73, 74, 75, 76, 80, 86, 91, 92, 96, 97, 98, 99, 115, 138, 177, 240, 253, 288, 304, 346, 363, 365, 384, 387, 388, 389, 390, 399, 411, 412, 413, 424, 425, 426, 434, 440, 444, 465, 466, 467, 468, 469, 470, 471, 496, 544, 641, 642, 644, 648, 650, 651, 653, 655, 657, 671, 694, 708, 709, 710, 711, 717, 725, 739, 754, 765, 766, 767, 792, 799, 811, 840, 841, 845, 847, 852, 853, 854, 856, 857, 858, 859, 860, 863, 866, 870, 871, 872, 874, 875, 878, 879, 880], "activ": [0, 8, 9, 23, 27, 40, 43, 44, 69, 70, 73, 84, 92, 96, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 307, 308, 309, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 607, 648, 675, 678, 806, 807, 826, 828, 835, 836, 845, 851, 861, 862, 875, 878], "therebi": [0, 8, 9, 23, 860], "enhanc": [0, 39, 43, 44, 828, 859, 875], "secur": 0, "usag": [0, 10, 11, 225, 643, 828, 845, 853, 856, 860, 865, 867], "befor": [0, 4, 5, 6, 7, 8, 9, 12, 13, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 57, 69, 73, 74, 76, 80, 82, 86, 92, 96, 97, 105, 222, 225, 230, 387, 390, 399, 415, 420, 430, 434, 480, 487, 488, 489, 496, 535, 536, 643, 648, 649, 651, 652, 653, 657, 659, 661, 662, 663, 664, 666, 668, 670, 674, 675, 678, 689, 690, 706, 715, 730, 731, 745, 764, 765, 766, 767, 772, 773, 776, 778, 780, 788, 807, 816, 821, 834, 835, 836, 839, 840, 842, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 865, 867, 874, 875, 878], "dive": [0, 26, 33, 43, 55, 828, 829, 830, 833, 834, 836, 839, 843, 845, 851, 858, 864, 867], "need": [0, 1, 4, 5, 10, 11, 19, 20, 24, 25, 31, 33, 39, 40, 43, 44, 57, 58, 59, 69, 70, 76, 92, 93, 99, 387, 388, 399, 410, 415, 416, 420, 441, 541, 552, 553, 574, 646, 648, 649, 651, 653, 675, 684, 714, 717, 744, 792, 830, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 867, 871, 874, 875, 878, 879], "up": [0, 4, 5, 10, 11, 12, 13, 19, 20, 24, 25, 26, 42, 43, 69, 70, 92, 93, 387, 390, 410, 423, 480, 488, 569, 581, 646, 648, 671, 673, 828, 829, 832, 834, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 871, 874, 879], "our": [0, 4, 5, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 27, 29, 31, 34, 35, 37, 39, 42, 43, 44, 45, 46, 48, 49, 50, 55, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 849, 850, 851, 854, 857, 858, 859, 860, 861, 863, 866, 867, 871, 874], "necessari": [0, 8, 9, 10, 11, 23, 49, 65, 69, 88, 92, 99, 140, 252, 285, 389, 390, 464, 474, 475, 476, 482, 484, 485, 486, 487, 488, 495, 511, 597, 620, 644, 646, 717, 718, 719, 721, 723, 724, 726, 728, 828, 834, 835, 840, 841, 843, 845, 847, 856, 857, 860, 862, 863, 874, 875], "follow": [0, 1, 5, 8, 9, 10, 11, 23, 26, 36, 37, 40, 43, 44, 47, 48, 49, 55, 58, 59, 69, 70, 71, 73, 74, 80, 86, 92, 93, 94, 96, 97, 146, 177, 180, 225, 235, 252, 259, 285, 287, 294, 295, 331, 381, 387, 389, 390, 393, 410, 423, 431, 469, 484, 496, 513, 515, 572, 573, 574, 604, 605, 628, 631, 633, 634, 635, 641, 642, 643, 644, 646, 647, 648, 649, 653, 657, 675, 678, 690, 696, 706, 739, 745, 764, 765, 766, 767, 807, 811, 830, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 874, 878], "command": [0, 5, 57, 59, 830, 835, 839, 842, 844, 850, 851, 868], "which": [0, 1, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 24, 25, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 112, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 165, 167, 169, 175, 177, 180, 182, 185, 192, 204, 209, 213, 218, 220, 223, 224, 225, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 334, 337, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 410, 411, 412, 413, 415, 416, 420, 421, 430, 431, 432, 434, 439, 442, 454, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 501, 502, 503, 504, 505, 506, 508, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 580, 581, 586, 587, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 671, 672, 673, 675, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 703, 705, 706, 708, 709, 710, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 728, 729, 738, 739, 740, 741, 746, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 803, 804, 806, 807, 808, 809, 810, 811, 812, 816, 817, 824, 826, 828, 830, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 872, 874, 875, 877, 878, 879, 880], "an": [0, 1, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 23, 24, 25, 26, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 49, 55, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 177, 180, 183, 187, 191, 192, 222, 226, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 328, 329, 330, 332, 333, 340, 341, 342, 343, 344, 345, 347, 348, 350, 353, 357, 362, 366, 371, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 419, 421, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 442, 443, 468, 469, 473, 474, 475, 476, 480, 481, 482, 484, 491, 495, 496, 502, 504, 508, 510, 511, 513, 514, 515, 518, 520, 521, 523, 526, 527, 532, 533, 534, 535, 536, 537, 538, 541, 542, 545, 550, 552, 553, 561, 564, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 583, 589, 592, 593, 602, 603, 607, 611, 612, 613, 626, 629, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 739, 752, 754, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880], "machin": [0, 8, 9, 10, 11, 21, 22, 23, 24, 25, 37, 39, 40, 46, 47, 55, 61, 69, 74, 92, 97, 177, 180, 388, 442, 642, 649, 692, 695, 835, 839, 853, 866, 868, 869, 871, 872, 878], "learn": [0, 8, 9, 10, 11, 23, 26, 27, 29, 33, 34, 35, 36, 38, 40, 43, 44, 45, 46, 47, 48, 55, 57, 69, 71, 94, 388, 389, 459, 464, 557, 628, 631, 633, 634, 635, 646, 647, 652, 730, 731, 732, 811, 829, 833, 834, 835, 838, 839, 845, 850, 851, 853, 855, 864, 866, 869, 871, 872, 880], "other": [0, 4, 5, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 57, 59, 66, 68, 69, 70, 76, 82, 86, 89, 91, 92, 93, 99, 105, 109, 114, 115, 138, 153, 165, 191, 252, 257, 259, 275, 284, 285, 349, 353, 384, 390, 480, 481, 489, 546, 547, 641, 642, 644, 646, 655, 659, 715, 725, 756, 779, 781, 788, 793, 828, 832, 834, 835, 836, 837, 839, 840, 843, 844, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 863, 866, 867, 868, 869, 874, 875, 877, 878, 880], "essenti": [0, 831, 834, 841, 843, 846, 847, 853, 856, 857, 858], "panda": [0, 26, 57, 59], "matplotlib": [0, 5, 8, 9, 10, 11, 23, 26, 37, 39, 40, 57, 58, 59, 62], "scikit": [0, 26, 388, 459], "torch": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 60, 61, 62, 65, 70, 74, 84, 93, 97, 141, 179, 206, 207, 211, 221, 223, 228, 295, 347, 348, 384, 390, 508, 550, 574, 607, 641, 642, 643, 644, 646, 649, 652, 699, 731, 732, 788, 799, 804, 816, 826, 828, 832, 835, 836, 839, 840, 841, 842, 844, 845, 846, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 869, 874, 875, 876], "cryptographi": [0, 5, 26], "These": [0, 26, 50, 69, 92, 388, 390, 399, 441, 495, 534, 648, 649, 675, 684, 685, 828, 831, 833, 834, 835, 836, 839, 843, 845, 847, 848, 852, 853, 856, 857, 860, 865, 867, 869, 871, 875, 878], "tool": [0, 23, 26, 33, 43, 44, 828, 835, 836, 847, 851, 867, 872, 875, 878, 879, 880], "provid": [0, 8, 9, 15, 16, 23, 31, 33, 37, 40, 43, 44, 48, 49, 55, 61, 65, 69, 70, 74, 76, 79, 82, 83, 86, 88, 92, 93, 97, 99, 102, 105, 106, 134, 151, 153, 170, 171, 172, 173, 174, 182, 192, 204, 208, 221, 304, 387, 388, 390, 393, 399, 423, 431, 435, 440, 444, 457, 458, 462, 463, 480, 482, 491, 511, 513, 515, 544, 556, 588, 589, 640, 641, 642, 643, 644, 646, 648, 649, 651, 653, 656, 659, 660, 675, 691, 694, 705, 717, 718, 725, 737, 759, 779, 781, 782, 783, 792, 807, 811, 816, 817, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 860, 861, 863, 867, 872, 874, 875, 876, 878, 879, 880], "robust": [0, 871], "foundat": [0, 33], "manipul": [0, 69, 92, 856, 857, 861, 863, 865, 878], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 39, 40, 43, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 122, 123, 124, 125, 126, 127, 129, 130, 138, 139, 140, 141, 144, 146, 148, 149, 150, 151, 152, 153, 155, 159, 161, 165, 166, 167, 175, 177, 180, 185, 187, 192, 209, 210, 218, 223, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 332, 333, 340, 342, 347, 348, 350, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 406, 407, 408, 409, 411, 412, 414, 415, 416, 419, 420, 424, 425, 426, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 452, 458, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 479, 480, 481, 482, 483, 486, 487, 488, 491, 492, 493, 495, 496, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 516, 517, 518, 519, 522, 524, 525, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 567, 570, 572, 573, 574, 581, 588, 589, 604, 605, 606, 607, 609, 613, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 734, 736, 737, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 794, 806, 807, 811, 821, 822, 828, 832, 834, 835, 841, 842, 843, 844, 845, 847, 850, 855, 858, 860, 863, 865, 866, 874, 878], "pip": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 55, 56, 57, 58, 59, 60, 61, 62, 828, 832, 835, 842, 851], "q": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 57, 58, 59, 69, 73, 74, 92, 96, 97, 374, 384, 388, 399, 441, 544, 648, 649, 653, 675, 678, 684, 685, 696, 741, 835, 836, 838, 858, 867], "r": [0, 4, 5, 21, 22, 23, 57, 58, 69, 74, 86, 92, 97, 109, 110, 361, 376, 384, 386, 629, 647, 649, 651, 696, 728, 835, 836, 838, 855, 858, 868], "requir": [0, 5, 8, 9, 10, 11, 23, 36, 37, 39, 40, 42, 48, 57, 58, 59, 62, 68, 69, 86, 91, 92, 286, 299, 303, 388, 390, 441, 442, 496, 644, 649, 651, 684, 685, 686, 725, 791, 799, 804, 822, 830, 834, 835, 840, 842, 844, 845, 846, 847, 848, 849, 851, 852, 854, 857, 858, 859, 860, 861, 863, 865, 867, 868, 871, 875, 878], "txt": [0, 4, 5, 8, 9, 21, 22, 58, 70, 835, 839, 842, 868], "16": [0, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26, 37, 39, 40, 55, 57, 59, 68, 69, 70, 73, 74, 78, 82, 89, 91, 92, 93, 96, 97, 99, 101, 114, 115, 180, 246, 275, 295, 302, 358, 361, 365, 384, 387, 390, 399, 406, 407, 409, 415, 419, 420, 424, 425, 430, 434, 469, 486, 535, 541, 558, 561, 583, 604, 605, 637, 642, 644, 646, 647, 648, 649, 651, 653, 655, 656, 659, 670, 672, 679, 683, 686, 687, 694, 696, 700, 728, 741, 754, 755, 756, 763, 773, 774, 791, 794, 836, 845, 847], "mb": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 57, 59, 62, 844], "25": [0, 14, 23, 26, 55, 57, 58, 59, 68, 69, 70, 74, 75, 78, 82, 85, 91, 92, 93, 96, 97, 100, 101, 105, 114, 115, 130, 149, 235, 236, 246, 252, 254, 265, 270, 285, 290, 293, 295, 298, 299, 300, 305, 327, 381, 389, 399, 430, 465, 468, 535, 544, 572, 573, 589, 604, 641, 644, 646, 649, 650, 653, 654, 659, 662, 679, 683, 688, 704, 709, 734, 741, 745, 752, 754, 755, 756, 773, 774, 776, 781, 837, 843, 855], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 112, 114, 115, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 161, 164, 165, 166, 167, 171, 175, 176, 177, 180, 185, 187, 192, 208, 209, 213, 217, 218, 220, 221, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 340, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 584, 586, 588, 589, 593, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 794, 796, 799, 803, 806, 807, 808, 809, 810, 811, 812, 816, 821, 822, 826, 828, 831, 832, 835, 836, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 863, 865, 866, 867, 874, 875, 876], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 55, 58, 60, 61, 62, 65, 69, 70, 71, 74, 82, 92, 94, 97, 105, 134, 151, 157, 158, 178, 179, 208, 211, 212, 224, 259, 294, 341, 346, 347, 348, 350, 361, 363, 369, 373, 375, 381, 384, 385, 387, 388, 389, 390, 393, 394, 399, 402, 403, 410, 416, 421, 432, 440, 444, 452, 461, 466, 468, 469, 485, 487, 488, 496, 513, 514, 515, 524, 534, 544, 562, 563, 569, 583, 606, 607, 628, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 653, 659, 663, 665, 667, 669, 675, 682, 690, 692, 699, 700, 706, 745, 779, 781, 792, 806, 807, 808, 809, 810, 811, 812, 816, 826, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 878, 879, 880], "eta": [0, 10, 11, 15, 16, 17, 18, 57, 59, 62], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 141, 144, 146, 147, 148, 149, 150, 153, 155, 157, 158, 159, 160, 161, 164, 165, 166, 167, 175, 177, 180, 181, 185, 187, 192, 205, 208, 210, 213, 218, 219, 220, 221, 223, 224, 225, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 399, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 426, 427, 430, 431, 432, 434, 437, 438, 439, 441, 442, 443, 446, 447, 449, 452, 453, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 479, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 551, 552, 553, 556, 557, 558, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 584, 586, 588, 589, 593, 598, 602, 603, 604, 605, 607, 609, 611, 612, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 794, 796, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 816, 821, 822, 826, 828, 832, 835, 836, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 860, 861, 865, 867, 874, 875], "00": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 26, 57, 59, 62, 69, 70, 74, 92, 93, 97, 257, 324, 355, 356, 381, 387, 409, 415, 419, 420, 561, 605, 644, 646, 649, 686, 696, 791, 851, 860], "44": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 55, 59, 68, 69, 78, 91, 92, 101, 238, 285, 295, 299, 300, 351, 384, 387, 408, 409, 644, 648, 649, 653, 656, 659, 671, 694, 741, 754, 755, 763, 774], "6": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 39, 40, 42, 43, 44, 55, 57, 58, 59, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 76, 78, 79, 81, 82, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 114, 115, 122, 124, 129, 134, 139, 140, 147, 148, 151, 152, 155, 161, 165, 166, 167, 175, 177, 185, 231, 232, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 306, 308, 309, 311, 313, 315, 317, 318, 319, 321, 322, 323, 324, 325, 331, 342, 347, 348, 350, 352, 361, 362, 364, 365, 366, 368, 375, 379, 381, 384, 385, 387, 388, 389, 390, 395, 397, 399, 409, 411, 414, 415, 419, 420, 424, 430, 431, 432, 434, 437, 440, 443, 444, 448, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 480, 482, 486, 487, 491, 492, 495, 496, 501, 502, 504, 505, 508, 511, 512, 522, 524, 525, 527, 532, 534, 535, 536, 537, 539, 541, 543, 544, 550, 552, 553, 556, 557, 558, 564, 565, 572, 573, 574, 589, 603, 604, 605, 606, 607, 609, 613, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 744, 745, 751, 752, 753, 754, 755, 756, 758, 759, 760, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 791, 806, 832, 835, 839, 841, 843, 844, 845, 847, 850, 855, 860, 863, 865], "kb": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 57, 59, 62], "3": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 37, 39, 40, 42, 43, 44, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 144, 146, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 164, 165, 166, 167, 171, 175, 177, 185, 187, 192, 206, 208, 209, 220, 223, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 404, 406, 407, 408, 409, 411, 414, 415, 416, 419, 420, 424, 425, 426, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 455, 458, 460, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 495, 496, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 516, 517, 518, 519, 522, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 584, 588, 589, 602, 603, 604, 605, 609, 612, 613, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 734, 736, 737, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 794, 807, 821, 822, 826, 828, 832, 834, 835, 839, 840, 841, 843, 844, 845, 847, 849, 850, 853, 855, 858, 860, 865, 866, 874, 875], "45": [0, 5, 10, 11, 14, 15, 16, 17, 18, 55, 57, 59, 68, 69, 82, 91, 92, 94, 96, 101, 115, 236, 240, 252, 295, 296, 355, 356, 369, 384, 387, 399, 409, 419, 430, 535, 541, 627, 633, 644, 647, 649, 651, 659, 694, 723, 755, 756, 774, 791], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 37, 39, 40, 42, 43, 44, 55, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 109, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 139, 140, 146, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 165, 166, 167, 171, 175, 177, 185, 187, 192, 209, 218, 223, 226, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 342, 345, 347, 348, 350, 352, 354, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 395, 397, 399, 406, 407, 408, 409, 411, 412, 414, 415, 416, 419, 420, 424, 425, 426, 429, 430, 431, 432, 434, 437, 440, 441, 443, 444, 446, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 483, 486, 487, 490, 491, 492, 495, 496, 501, 502, 503, 504, 505, 506, 508, 511, 512, 517, 518, 519, 522, 524, 525, 527, 532, 534, 535, 536, 537, 538, 539, 541, 544, 550, 551, 552, 553, 556, 557, 558, 559, 561, 564, 565, 567, 570, 572, 573, 574, 588, 589, 593, 604, 605, 606, 607, 609, 613, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 708, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 734, 736, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 807, 821, 822, 828, 831, 834, 835, 836, 839, 841, 843, 844, 845, 847, 849, 850, 852, 855, 858, 860, 875], "143": [0, 10, 11, 15, 16, 17, 18, 74, 91, 115, 302, 644, 649, 687, 847], "8": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 40, 55, 57, 59, 62, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 89, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 114, 115, 122, 137, 147, 148, 152, 155, 161, 170, 172, 173, 174, 177, 185, 210, 227, 235, 237, 238, 242, 243, 246, 247, 248, 250, 256, 259, 263, 264, 270, 271, 272, 276, 277, 280, 281, 283, 284, 285, 290, 291, 294, 295, 296, 299, 300, 303, 304, 305, 309, 315, 317, 318, 319, 321, 322, 324, 325, 342, 346, 358, 361, 363, 364, 365, 368, 375, 379, 381, 384, 387, 388, 389, 390, 399, 406, 407, 408, 409, 414, 415, 419, 420, 424, 425, 429, 430, 434, 437, 440, 448, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 480, 482, 486, 491, 492, 501, 502, 505, 506, 507, 508, 511, 512, 522, 524, 536, 539, 540, 544, 550, 551, 557, 558, 561, 564, 568, 572, 573, 574, 576, 577, 580, 583, 588, 589, 593, 603, 604, 605, 606, 607, 627, 630, 632, 634, 635, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 662, 666, 667, 669, 670, 671, 672, 675, 681, 682, 683, 685, 686, 687, 689, 690, 691, 694, 696, 697, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 714, 718, 725, 726, 728, 734, 741, 745, 753, 754, 755, 756, 758, 763, 764, 766, 768, 769, 771, 773, 774, 776, 778, 780, 781, 791, 794, 807, 835, 843, 844, 847, 860], "7": [0, 4, 5, 8, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 35, 37, 39, 40, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 115, 124, 125, 126, 127, 138, 139, 140, 149, 152, 153, 171, 177, 180, 210, 232, 235, 238, 242, 243, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 258, 259, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 295, 296, 297, 299, 302, 303, 305, 306, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 342, 346, 350, 352, 353, 361, 362, 363, 365, 367, 368, 375, 379, 381, 384, 385, 387, 388, 389, 390, 395, 399, 406, 407, 408, 409, 414, 415, 419, 420, 424, 429, 430, 431, 432, 434, 437, 440, 453, 465, 466, 467, 468, 470, 471, 474, 475, 476, 480, 482, 486, 491, 492, 495, 496, 501, 502, 504, 505, 507, 508, 511, 512, 522, 524, 525, 532, 535, 536, 538, 539, 544, 550, 552, 553, 557, 558, 561, 572, 573, 574, 581, 588, 589, 604, 607, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 665, 667, 669, 670, 671, 672, 678, 680, 681, 682, 683, 685, 686, 687, 689, 691, 694, 696, 697, 699, 700, 701, 703, 704, 705, 708, 709, 710, 714, 717, 718, 723, 725, 726, 728, 733, 734, 741, 745, 752, 753, 754, 755, 756, 758, 763, 764, 766, 768, 769, 771, 772, 773, 774, 776, 778, 780, 781, 791, 835, 836, 841, 843, 844, 847, 853, 856, 860], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 40, 55, 57, 59, 62, 65, 66, 68, 69, 70, 71, 73, 74, 76, 78, 80, 81, 82, 85, 89, 91, 92, 93, 94, 96, 97, 99, 101, 103, 104, 105, 114, 115, 122, 138, 139, 140, 152, 170, 171, 172, 173, 174, 177, 180, 233, 235, 237, 238, 241, 242, 243, 246, 247, 252, 253, 254, 259, 266, 272, 273, 274, 276, 280, 281, 283, 284, 285, 288, 290, 291, 295, 296, 299, 300, 301, 306, 312, 315, 316, 317, 354, 357, 361, 367, 368, 375, 379, 384, 385, 387, 389, 390, 397, 399, 406, 407, 408, 409, 414, 415, 419, 420, 424, 425, 429, 430, 434, 448, 465, 467, 469, 470, 474, 475, 476, 482, 486, 491, 501, 502, 503, 504, 506, 508, 511, 522, 524, 527, 536, 553, 557, 558, 559, 561, 564, 572, 573, 576, 577, 580, 588, 589, 603, 604, 606, 627, 628, 629, 633, 634, 638, 641, 642, 644, 646, 647, 648, 649, 651, 653, 655, 656, 657, 658, 659, 662, 663, 664, 670, 671, 672, 680, 681, 683, 685, 686, 687, 689, 690, 691, 694, 696, 697, 699, 700, 701, 703, 704, 705, 714, 718, 722, 723, 725, 726, 728, 733, 734, 739, 741, 744, 745, 753, 754, 755, 756, 758, 763, 764, 766, 768, 769, 771, 773, 774, 776, 778, 780, 781, 791, 811, 843, 845, 847, 855, 860], "756": [0, 10, 11, 15, 16, 17, 18], "21": [0, 4, 5, 10, 11, 15, 16, 23, 26, 55, 57, 59, 62, 68, 69, 70, 78, 88, 91, 92, 96, 97, 101, 105, 114, 150, 180, 235, 238, 240, 246, 270, 285, 316, 368, 387, 388, 389, 390, 399, 406, 409, 419, 424, 430, 432, 434, 438, 464, 479, 535, 589, 641, 642, 644, 646, 649, 653, 659, 683, 694, 698, 739, 754, 755, 772, 773, 774, 849, 855], "116": [0, 10, 11, 15, 16, 17, 18], "23": [0, 5, 23, 24, 25, 26, 37, 39, 40, 55, 57, 59, 68, 69, 74, 78, 88, 91, 92, 93, 96, 101, 148, 247, 250, 267, 268, 269, 292, 294, 295, 296, 298, 305, 350, 351, 384, 387, 390, 399, 406, 407, 409, 419, 424, 425, 426, 430, 434, 479, 535, 541, 641, 644, 648, 649, 653, 656, 667, 669, 683, 687, 690, 698, 700, 701, 734, 741, 745, 754, 755, 756, 763, 828, 844, 860, 865], "29": [0, 5, 8, 9, 23, 26, 55, 57, 59, 62, 74, 91, 93, 94, 96, 101, 240, 399, 430, 535, 557, 558, 629, 633, 644, 646, 647, 649, 687, 754, 755, 756], "823": 0, "46": [0, 8, 9, 14, 23, 55, 57, 59, 69, 78, 92, 96, 101, 150, 275, 296, 326, 381, 387, 407, 425, 426, 641, 644, 653, 734, 754, 755], "14": [0, 4, 5, 8, 9, 12, 13, 19, 20, 21, 22, 23, 55, 57, 58, 59, 66, 68, 69, 73, 74, 78, 82, 89, 91, 92, 93, 96, 97, 99, 101, 164, 177, 180, 233, 238, 240, 247, 251, 277, 281, 285, 291, 298, 306, 357, 387, 388, 390, 399, 406, 407, 408, 409, 419, 424, 426, 429, 430, 431, 434, 438, 444, 445, 480, 482, 486, 491, 511, 535, 604, 627, 642, 644, 646, 647, 648, 649, 651, 653, 657, 659, 662, 663, 665, 667, 669, 671, 683, 685, 687, 694, 701, 703, 705, 728, 745, 754, 755, 756, 764, 773, 774, 843, 847, 860], "731": [0, 63, 128], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 35, 37, 39, 40, 43, 44, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 112, 114, 115, 122, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 164, 165, 166, 167, 171, 175, 177, 185, 187, 192, 208, 209, 210, 213, 216, 218, 220, 223, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 340, 342, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 399, 403, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 453, 455, 458, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 495, 496, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 516, 517, 519, 522, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 584, 586, 588, 589, 593, 602, 603, 604, 605, 606, 607, 609, 613, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 793, 794, 803, 806, 807, 816, 821, 822, 826, 828, 832, 835, 836, 839, 841, 842, 843, 844, 845, 847, 849, 850, 852, 853, 855, 856, 857, 858, 860, 865, 866, 867, 874, 875, 876], "121": 0, "56": [0, 21, 22, 26, 55, 57, 68, 69, 73, 78, 91, 92, 96, 150, 285, 299, 302, 305, 387, 409, 419, 627, 641, 644, 647, 648, 649, 653, 659, 663, 665, 667, 669, 672, 694, 733, 755, 774, 847], "124": [0, 648, 672], "196": [0, 96, 648, 672], "166": [0, 85, 122, 638], "99": [0, 23, 26, 55, 68, 69, 71, 89, 91, 101, 147, 234, 249, 372, 384, 604, 631, 641, 644, 646, 647, 653, 659, 737, 745, 755, 774], "11": [0, 4, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 33, 35, 37, 39, 40, 55, 57, 58, 59, 62, 68, 69, 70, 73, 74, 78, 82, 91, 92, 93, 96, 97, 99, 101, 105, 115, 235, 239, 242, 247, 257, 294, 295, 301, 365, 384, 387, 388, 390, 406, 407, 419, 424, 425, 429, 430, 434, 443, 479, 480, 482, 486, 491, 493, 511, 535, 536, 551, 557, 558, 564, 573, 589, 644, 646, 648, 649, 650, 651, 653, 655, 656, 657, 659, 662, 663, 671, 672, 683, 686, 687, 688, 689, 690, 694, 698, 699, 700, 701, 703, 705, 708, 718, 723, 724, 726, 728, 739, 741, 751, 754, 755, 756, 763, 764, 772, 773, 774, 781, 843, 844, 845, 847, 855], "71": [0, 55, 68, 91, 96, 251, 291, 430, 644], "To": [0, 1, 8, 9, 21, 22, 23, 24, 25, 26, 27, 29, 33, 37, 39, 40, 43, 44, 55, 58, 59, 60, 110, 259, 389, 468, 598, 644, 646, 806, 834, 835, 839, 840, 841, 842, 845, 847, 849, 850, 851, 853, 854, 857, 858, 859, 860, 861, 874, 875], "ensur": [0, 1, 21, 22, 24, 25, 27, 29, 37, 39, 40, 69, 70, 92, 93, 387, 388, 424, 425, 426, 459, 574, 646, 786, 828, 831, 834, 835, 836, 840, 845, 846, 847, 849, 851, 852, 854, 856, 857, 858, 859, 860, 861, 878, 880], "begin": [0, 10, 11, 69, 92, 296, 389, 390, 464, 480, 496, 497, 498, 499, 500, 644, 653, 733, 744, 791, 835, 839, 844, 858], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56, 57, 59, 60, 61, 62, 68, 69, 70, 82, 91, 92, 93, 159, 188, 206, 211, 236, 296, 319, 340, 381, 399, 534, 541, 550, 574, 604, 607, 611, 641, 642, 643, 644, 646, 649, 659, 697, 774, 786, 788, 799, 816, 821, 822, 828, 833, 834, 835, 836, 839, 840, 841, 844, 845, 846, 849, 850, 852, 856, 858, 860, 861, 863, 865, 866, 868, 869, 871, 874, 875, 876], "handl": [0, 4, 5, 12, 13, 55, 57, 63, 67, 68, 69, 85, 86, 90, 91, 92, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 205, 206, 207, 208, 209, 213, 218, 219, 227, 231, 237, 249, 274, 276, 290, 296, 297, 302, 303, 307, 312, 313, 315, 379, 390, 479, 505, 638, 643, 644, 649, 659, 703, 778, 780, 803, 811, 829, 831, 838, 843, 844, 845, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 880], "its": [0, 1, 8, 9, 23, 24, 25, 33, 35, 43, 44, 46, 49, 56, 57, 59, 64, 66, 69, 76, 86, 89, 92, 93, 99, 112, 124, 127, 130, 135, 165, 170, 171, 172, 173, 174, 225, 252, 285, 304, 314, 379, 387, 390, 399, 427, 435, 508, 510, 537, 561, 610, 638, 640, 642, 643, 644, 646, 649, 651, 653, 689, 717, 721, 722, 726, 739, 788, 822, 834, 835, 840, 843, 844, 845, 846, 848, 849, 850, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 867, 869, 871, 872, 874, 878, 880], "backend": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 34, 35, 36, 37, 39, 40, 44, 46, 47, 49, 64, 65, 69, 70, 74, 86, 92, 93, 97, 114, 141, 178, 179, 182, 204, 211, 212, 214, 217, 228, 347, 348, 384, 388, 440, 442, 541, 550, 562, 563, 571, 574, 575, 585, 592, 607, 610, 641, 642, 643, 646, 649, 697, 699, 786, 788, 789, 791, 792, 793, 796, 798, 799, 804, 808, 809, 811, 815, 816, 832, 833, 835, 836, 838, 839, 840, 844, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 862, 863, 866, 869, 874, 875, 876, 878], "jax": [0, 3, 8, 9, 21, 22, 23, 31, 33, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 49, 55, 57, 61, 63, 68, 69, 70, 80, 85, 91, 92, 93, 122, 123, 124, 125, 126, 127, 128, 129, 130, 221, 303, 307, 312, 313, 315, 361, 379, 384, 399, 544, 574, 607, 626, 638, 643, 644, 646, 657, 764, 765, 766, 767, 799, 803, 816, 828, 832, 833, 834, 835, 836, 839, 841, 845, 846, 849, 850, 852, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 871, 872, 874, 875, 876, 879], "capabl": [0, 8, 9, 31, 39, 44, 860, 863], "optim": [0, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 33, 37, 40, 43, 44, 57, 59, 60, 62, 69, 71, 92, 94, 324, 381, 389, 468, 469, 548, 635, 646, 647, 652, 730, 731, 732, 806, 822, 828, 845, 856, 863, 871, 872, 875, 878, 879, 880], "frontend": [0, 26, 591, 646, 788, 789, 792, 796, 799, 833, 836, 838, 844, 845, 849, 850, 855, 859, 860, 863, 866, 869, 875, 878], "xgb_frontend": 0, "access": [0, 1, 39, 43, 44, 86, 828, 834, 835, 836, 844, 845, 851, 856, 857, 875, 878], "compat": [0, 8, 9, 15, 16, 34, 40, 45, 49, 55, 62, 68, 69, 74, 76, 79, 82, 83, 91, 92, 97, 99, 102, 105, 106, 114, 115, 166, 235, 240, 242, 244, 245, 246, 247, 252, 253, 259, 263, 264, 271, 272, 277, 279, 281, 282, 285, 288, 290, 294, 301, 306, 347, 348, 384, 642, 644, 649, 651, 656, 659, 660, 680, 692, 695, 698, 701, 705, 706, 721, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 826, 835, 841, 852, 857, 858, 861, 865, 867], "manner": [0, 35, 44, 46, 56, 64, 87, 653, 745, 835, 845, 846, 848, 853, 857, 861, 867], "sklearn": [0, 26], "model_select": [0, 26], "timeit": [0, 19, 20, 24, 25, 26, 35, 43, 44, 60, 62], "oper": [0, 8, 9, 33, 34, 37, 39, 40, 43, 44, 45, 49, 56, 59, 65, 66, 68, 69, 70, 73, 74, 82, 86, 88, 89, 91, 92, 93, 96, 97, 105, 115, 130, 149, 150, 192, 222, 230, 235, 237, 246, 249, 252, 259, 274, 276, 285, 286, 290, 294, 297, 302, 314, 322, 342, 343, 344, 376, 379, 381, 386, 387, 389, 390, 401, 402, 403, 404, 406, 407, 408, 414, 415, 416, 420, 424, 425, 426, 427, 429, 430, 432, 434, 435, 464, 501, 503, 550, 557, 558, 559, 607, 638, 641, 642, 643, 644, 646, 648, 649, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 690, 701, 703, 776, 778, 780, 791, 794, 807, 822, 826, 834, 835, 838, 839, 840, 843, 845, 846, 847, 848, 849, 853, 856, 857, 860, 863, 865, 869, 874, 878, 879, 880], "xgb": 0, "functool": [0, 26, 57, 849, 857], "higher": [0, 26, 69, 92, 388, 390, 399, 445, 457, 463, 474, 475, 476, 544, 806, 845, 856, 865, 866, 867, 878, 879], "order": [0, 4, 5, 36, 47, 49, 57, 60, 62, 65, 69, 70, 73, 74, 76, 80, 81, 86, 92, 96, 97, 99, 103, 104, 109, 114, 115, 139, 140, 151, 159, 240, 259, 302, 340, 361, 381, 384, 387, 388, 390, 393, 397, 433, 438, 441, 442, 443, 444, 445, 449, 455, 457, 460, 463, 486, 487, 488, 493, 494, 506, 513, 514, 515, 518, 527, 641, 644, 648, 649, 651, 652, 656, 657, 658, 662, 663, 664, 665, 666, 667, 670, 684, 685, 690, 699, 700, 704, 706, 718, 721, 730, 731, 762, 764, 765, 766, 767, 768, 770, 771, 788, 810, 812, 822, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 867, 878, 879, 880], "callabl": [0, 21, 22, 61, 69, 70, 84, 92, 93, 96, 107, 134, 135, 137, 178, 179, 211, 212, 225, 375, 377, 378, 385, 386, 387, 390, 430, 433, 435, 473, 496, 547, 551, 556, 558, 562, 563, 584, 613, 626, 630, 632, 637, 640, 642, 643, 646, 647, 652, 653, 730, 731, 732, 739, 740, 741, 743, 744, 745, 746, 786, 789, 799, 811, 823, 826, 843, 849, 855, 857, 865, 873, 874, 875, 876], "object": [0, 5, 14, 26, 33, 40, 43, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 118, 119, 141, 145, 146, 156, 168, 177, 180, 188, 191, 226, 284, 521, 569, 585, 629, 641, 642, 643, 646, 647, 653, 655, 736, 737, 738, 740, 741, 742, 748, 749, 750, 751, 758, 786, 788, 789, 796, 797, 798, 804, 805, 807, 808, 809, 816, 821, 840, 841, 843, 844, 853, 854, 857, 858, 860, 863, 866, 873, 874, 875, 876, 878], "tqdm_notebook": [0, 26], "tqdm": [0, 5, 8, 9, 10, 11, 26, 37, 39, 40, 57, 59], "progress": [0, 649, 704, 831, 835, 836, 866, 872], "bar": [0, 835, 850], "jupyt": [0, 1, 5], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 5, 21, 22, 26, 43, 44, 57, 60, 874], "step": [0, 1, 2, 8, 9, 10, 11, 23, 28, 29, 30, 41, 43, 44, 55, 57, 58, 59, 69, 71, 88, 92, 94, 138, 149, 387, 390, 433, 435, 490, 627, 628, 631, 633, 634, 635, 641, 647, 652, 730, 731, 732, 811, 826, 828, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 850, 855, 857, 860, 865, 878], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 55, 56, 57, 58, 59, 60, 62, 65, 69, 91, 92, 93, 139, 140, 141, 152, 188, 265, 269, 319, 387, 388, 415, 420, 436, 604, 641, 642, 644, 646, 653, 739, 788, 816, 821, 822, 828, 834, 840, 845, 846, 849, 852, 856, 857, 858, 860, 861, 863, 865, 869, 876], "pd": [0, 26, 59], "set_backend": [0, 4, 5, 6, 7, 12, 13, 21, 22, 26, 33, 34, 35, 36, 37, 38, 43, 44, 46, 47, 48, 49, 50, 56, 58, 59, 60, 68, 70, 84, 91, 93, 179, 188, 206, 207, 211, 221, 223, 228, 236, 550, 574, 642, 643, 646, 649, 652, 697, 731, 732, 816, 828, 839, 841, 845, 846, 853, 854, 855, 865, 874, 875, 876], "config": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 36, 39, 43, 44, 57, 58, 60, 86, 653, 746, 828, 835, 839, 842, 844, 851, 858, 874, 879], "updat": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 34, 36, 37, 39, 40, 43, 44, 57, 59, 64, 70, 71, 86, 93, 94, 109, 390, 501, 574, 588, 589, 592, 593, 616, 627, 628, 631, 633, 634, 635, 646, 647, 648, 652, 653, 671, 674, 730, 731, 732, 740, 741, 745, 750, 751, 799, 804, 810, 811, 816, 822, 828, 834, 835, 836, 838, 839, 840, 843, 844, 845, 847, 852, 854, 855, 857, 858, 860, 863, 865, 867], "jax_enable_x64": [0, 6, 7, 12, 13, 19, 20, 24, 25, 26, 36, 39, 43, 44, 828], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 36, 37, 39, 40, 42, 43, 44, 48, 49, 50, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 137, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 168, 175, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 192, 204, 208, 209, 211, 212, 216, 219, 220, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 352, 354, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 381, 384, 385, 387, 388, 389, 390, 393, 399, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 482, 483, 484, 486, 487, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 526, 527, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 588, 589, 590, 593, 596, 597, 599, 600, 602, 603, 604, 605, 607, 609, 611, 612, 614, 619, 620, 622, 623, 625, 628, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 740, 741, 743, 744, 745, 746, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 793, 794, 796, 807, 808, 809, 810, 811, 813, 816, 818, 819, 821, 822, 826, 828, 832, 835, 841, 843, 844, 845, 846, 847, 849, 850, 852, 853, 854, 856, 857, 858, 860, 862, 863, 865, 866, 874, 875], "from": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 78, 79, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 101, 102, 105, 106, 107, 109, 110, 112, 115, 138, 140, 143, 145, 146, 147, 148, 151, 152, 155, 159, 161, 167, 185, 191, 192, 208, 213, 218, 224, 225, 251, 259, 260, 287, 291, 292, 299, 303, 324, 325, 331, 334, 340, 342, 343, 344, 351, 354, 358, 359, 361, 362, 374, 378, 381, 384, 386, 387, 388, 389, 390, 394, 399, 411, 412, 413, 427, 432, 433, 452, 459, 464, 465, 469, 479, 482, 491, 496, 502, 504, 505, 507, 508, 510, 511, 520, 521, 522, 523, 524, 535, 536, 556, 564, 565, 567, 587, 598, 609, 626, 628, 629, 633, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 662, 670, 671, 680, 683, 699, 703, 704, 705, 715, 718, 721, 724, 730, 731, 732, 734, 745, 746, 747, 753, 754, 755, 756, 760, 763, 764, 766, 772, 773, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 793, 794, 799, 804, 806, 807, 808, 809, 811, 816, 822, 826, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 863, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880], "classification_report": [0, 26], "train_test_split": [0, 26], "usr": [0, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 57, 58, 59, 62, 835], "local": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 44, 48, 49, 50, 57, 58, 59, 62, 393, 518, 569, 646, 829, 835, 839, 842, 850, 853, 858, 860], "lib": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26, 37, 39, 40, 57, 58, 59, 62], "python3": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 37, 39, 40, 43, 57, 59, 62, 835, 836], "10": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 55, 57, 59, 61, 62, 65, 68, 69, 70, 71, 73, 74, 78, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 138, 148, 149, 150, 234, 242, 243, 246, 247, 250, 257, 262, 264, 270, 272, 274, 285, 291, 298, 299, 304, 313, 346, 347, 348, 351, 355, 356, 358, 360, 361, 363, 364, 365, 367, 368, 372, 375, 384, 387, 390, 399, 406, 407, 408, 409, 419, 424, 425, 429, 430, 431, 432, 434, 464, 476, 479, 482, 486, 491, 501, 502, 511, 532, 535, 536, 539, 541, 544, 557, 558, 559, 561, 564, 565, 567, 572, 573, 581, 589, 593, 598, 604, 606, 618, 621, 633, 641, 644, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 665, 671, 681, 683, 687, 688, 689, 690, 691, 694, 699, 700, 701, 703, 705, 718, 723, 724, 725, 726, 728, 739, 741, 744, 752, 753, 754, 755, 756, 762, 764, 770, 772, 773, 774, 775, 777, 778, 780, 781, 791, 793, 811, 828, 832, 835, 839, 843, 844, 845, 847, 850, 855, 858, 860, 865, 876], "dist": [0, 10, 11, 12, 13, 15, 16, 17, 18, 23, 57, 58, 59, 62], "packag": [0, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 27, 37, 39, 40, 44, 57, 58, 59, 62, 820, 832, 835, 844, 857, 867, 868, 878], "except": [0, 10, 11, 15, 16, 17, 18, 23, 24, 25, 34, 37, 39, 40, 58, 59, 62, 69, 70, 76, 78, 83, 86, 92, 93, 97, 101, 106, 166, 347, 348, 353, 372, 384, 390, 394, 399, 480, 504, 508, 521, 540, 541, 556, 574, 591, 607, 613, 642, 646, 649, 651, 655, 656, 660, 695, 715, 717, 725, 754, 755, 756, 762, 782, 783, 786, 789, 793, 836, 837, 838, 839, 840, 844, 845, 846, 848, 850, 852, 856, 857, 861, 862, 863, 867], "py": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 34, 37, 39, 40, 57, 59, 62, 105, 388, 459, 774, 816, 821, 828, 834, 835, 836, 839, 841, 844, 845, 846, 848, 849, 850, 851, 852, 853, 857, 858, 860, 861, 865, 866], "383": [0, 10, 11, 15, 16, 17, 18, 34], "userwarn": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 25, 34, 37, 39, 40, 62], "current": [0, 5, 10, 11, 15, 16, 17, 18, 23, 24, 25, 33, 34, 37, 39, 40, 43, 44, 57, 58, 64, 69, 70, 86, 92, 115, 134, 178, 179, 182, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 218, 220, 388, 390, 440, 441, 496, 504, 562, 563, 566, 569, 571, 575, 586, 587, 607, 640, 642, 643, 646, 649, 653, 684, 733, 743, 744, 788, 792, 808, 809, 816, 817, 822, 825, 826, 828, 830, 834, 835, 836, 839, 841, 843, 844, 845, 846, 849, 850, 851, 853, 856, 857, 858, 859, 860, 863, 867, 874, 878], "39": [0, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 37, 39, 40, 55, 57, 58, 59, 60, 62, 63, 68, 69, 74, 78, 85, 91, 92, 94, 97, 101, 124, 238, 273, 275, 277, 307, 308, 311, 379, 387, 399, 407, 409, 426, 429, 535, 627, 638, 644, 647, 649, 659, 687, 694, 755, 774], "doe": [0, 5, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 33, 34, 37, 39, 40, 43, 56, 58, 68, 69, 70, 76, 86, 91, 92, 99, 109, 159, 286, 288, 296, 340, 381, 388, 389, 399, 400, 441, 468, 469, 540, 541, 545, 574, 641, 644, 646, 649, 651, 684, 723, 786, 822, 832, 834, 836, 838, 841, 844, 845, 847, 848, 850, 851, 852, 853, 856, 857, 858, 860, 863, 865, 866, 867, 869, 874, 878, 879], "support": [0, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 33, 34, 37, 39, 40, 43, 46, 58, 67, 69, 70, 74, 90, 92, 93, 97, 159, 178, 182, 204, 211, 226, 235, 252, 259, 280, 281, 285, 295, 314, 340, 361, 379, 381, 384, 388, 390, 423, 441, 450, 504, 550, 562, 571, 574, 575, 592, 607, 641, 642, 643, 644, 646, 648, 649, 672, 684, 685, 686, 690, 699, 706, 786, 792, 799, 811, 816, 817, 821, 826, 830, 832, 834, 835, 836, 839, 840, 842, 846, 847, 848, 850, 852, 853, 855, 856, 858, 860, 861, 863, 865, 866, 868, 869, 875, 878, 880], "inplac": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 34, 37, 39, 40, 64, 70, 86, 93, 109, 112, 548, 550, 571, 574, 575, 592, 593, 646, 653, 740, 741, 745, 750, 751, 798, 799, 804, 811, 838, 840, 847, 850, 852, 854, 857, 863], "nativ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 33, 34, 37, 39, 40, 43, 44, 64, 65, 66, 67, 70, 87, 90, 93, 114, 118, 152, 162, 163, 169, 170, 171, 172, 173, 174, 188, 191, 206, 207, 208, 209, 219, 227, 231, 574, 576, 580, 587, 592, 610, 641, 642, 643, 646, 788, 799, 804, 816, 828, 832, 834, 845, 846, 849, 850, 853, 854, 856, 857, 858, 860, 865, 866, 869, 874, 875, 876], "would": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 23, 24, 25, 26, 34, 36, 37, 39, 40, 42, 43, 44, 47, 49, 51, 59, 65, 67, 69, 88, 90, 92, 99, 125, 129, 140, 226, 387, 390, 415, 420, 474, 475, 482, 484, 486, 487, 488, 495, 499, 511, 638, 643, 717, 718, 719, 721, 723, 724, 726, 728, 793, 803, 807, 828, 829, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 850, 852, 854, 856, 857, 858, 860, 861, 863, 864, 865, 867, 872, 874, 878], "quietli": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40], "new": [0, 1, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 27, 29, 34, 37, 39, 40, 42, 43, 44, 45, 59, 61, 64, 69, 70, 71, 76, 77, 86, 88, 92, 93, 94, 97, 99, 100, 142, 145, 147, 148, 153, 154, 155, 160, 161, 198, 221, 241, 287, 289, 293, 346, 351, 363, 368, 384, 387, 390, 399, 423, 472, 480, 481, 495, 501, 508, 541, 557, 558, 559, 561, 564, 565, 567, 588, 589, 592, 594, 601, 604, 605, 611, 628, 631, 633, 634, 635, 641, 642, 643, 644, 646, 647, 648, 651, 653, 654, 675, 687, 694, 717, 721, 725, 738, 750, 751, 752, 804, 807, 810, 811, 816, 822, 829, 831, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 847, 848, 850, 851, 854, 856, 857, 858, 859, 860, 861, 863, 869, 871, 874], "when": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 46, 48, 49, 50, 58, 60, 64, 65, 66, 68, 69, 74, 75, 78, 79, 82, 86, 88, 89, 91, 92, 97, 98, 101, 102, 105, 115, 153, 164, 235, 252, 257, 259, 275, 285, 303, 304, 312, 347, 348, 379, 384, 387, 388, 389, 393, 394, 399, 410, 423, 435, 442, 446, 457, 463, 464, 469, 513, 515, 521, 541, 544, 574, 590, 598, 605, 641, 642, 644, 646, 648, 649, 650, 651, 653, 655, 656, 659, 661, 673, 675, 692, 697, 708, 709, 710, 721, 744, 745, 754, 755, 756, 759, 760, 762, 763, 775, 777, 779, 781, 791, 794, 806, 807, 808, 809, 810, 816, 826, 828, 829, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 866, 867, 868, 874, 875, 878], "lead": [0, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 74, 86, 97, 115, 259, 388, 452, 592, 644, 646, 649, 696, 699, 793, 844, 845, 847, 859, 861, 867, 871], "memori": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 65, 69, 76, 88, 92, 99, 140, 151, 207, 219, 225, 227, 231, 390, 399, 474, 475, 482, 484, 486, 487, 488, 495, 511, 541, 587, 592, 616, 641, 643, 646, 648, 651, 673, 674, 717, 718, 719, 721, 723, 724, 726, 728, 822, 826, 844, 845, 846, 856, 857, 863, 865, 867, 874, 878], "overhead": [0, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 35, 37, 39, 40, 43, 44, 46, 867, 874], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 34, 35, 37, 39, 40, 42, 43, 46, 48, 50, 55, 56, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 78, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 96, 97, 99, 101, 103, 105, 109, 110, 111, 112, 113, 114, 128, 138, 143, 148, 150, 151, 153, 155, 157, 158, 159, 161, 164, 165, 166, 177, 180, 225, 232, 233, 234, 235, 237, 239, 243, 245, 248, 252, 258, 259, 265, 285, 287, 289, 292, 294, 295, 296, 305, 313, 325, 339, 340, 341, 342, 343, 344, 347, 348, 350, 358, 374, 379, 381, 384, 387, 388, 389, 390, 393, 395, 397, 399, 406, 407, 408, 424, 425, 426, 427, 429, 430, 431, 432, 434, 441, 446, 447, 457, 458, 459, 460, 461, 463, 464, 466, 469, 479, 481, 496, 504, 505, 508, 513, 515, 525, 527, 532, 533, 534, 535, 536, 537, 538, 544, 581, 636, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 715, 718, 719, 721, 722, 724, 725, 730, 731, 746, 756, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 786, 788, 791, 792, 793, 799, 807, 821, 828, 835, 836, 840, 841, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 874, 876], "appli": [0, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 34, 37, 39, 40, 43, 44, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 384, 385, 387, 388, 389, 390, 393, 399, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 423, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 638, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 703, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 739, 742, 745, 746, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 793, 794, 803, 807, 810, 828, 834, 835, 836, 840, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 860, 861, 863, 867, 874, 875, 879], "view": [0, 5, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 69, 76, 92, 114, 145, 156, 390, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 508, 511, 567, 641, 646, 651, 717, 718, 719, 721, 723, 724, 726, 728, 835, 836, 849, 878], "If": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 43, 44, 49, 58, 61, 62, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 110, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 164, 165, 166, 167, 192, 208, 224, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 340, 341, 343, 346, 347, 348, 349, 350, 352, 353, 354, 358, 362, 363, 368, 369, 371, 373, 374, 375, 381, 384, 385, 387, 388, 389, 390, 393, 394, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 421, 423, 424, 425, 426, 431, 432, 433, 435, 440, 442, 444, 446, 447, 454, 456, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 482, 484, 485, 486, 487, 488, 491, 495, 501, 502, 503, 504, 505, 506, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 580, 581, 588, 589, 593, 603, 604, 605, 607, 609, 611, 612, 625, 626, 629, 631, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 671, 672, 675, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 708, 709, 710, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 745, 746, 753, 754, 755, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 806, 807, 809, 810, 816, 822, 826, 828, 829, 830, 831, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 867, 868, 874, 875, 876], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 484, 541, 564, 565, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 675, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 878], "want": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 56, 57, 59, 69, 84, 92, 107, 252, 285, 390, 484, 644, 809, 828, 829, 830, 834, 835, 836, 842, 844, 846, 849, 851, 853, 854, 855, 856, 860, 863, 867, 868, 872, 875], "control": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 51, 69, 92, 159, 308, 340, 379, 381, 387, 390, 411, 412, 413, 479, 505, 592, 641, 646, 649, 682, 843, 845, 846, 855, 856, 857, 858, 863, 869, 874, 878], "your": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 43, 44, 47, 55, 57, 59, 61, 828, 829, 831, 832, 833, 834, 835, 837, 839, 841, 842, 844, 848, 850, 851, 855, 857, 859, 861, 863, 867, 868, 874, 875, 878], "manag": [0, 10, 11, 15, 16, 17, 18, 24, 25, 33, 34, 37, 39, 40, 43, 592, 616, 646, 829, 837, 841, 845, 846, 856, 859, 867], "consid": [0, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 48, 49, 69, 74, 80, 92, 97, 130, 159, 280, 281, 340, 346, 351, 363, 381, 384, 388, 399, 442, 446, 457, 534, 638, 641, 644, 649, 657, 682, 692, 764, 765, 766, 767, 793, 806, 840, 844, 845, 853, 855, 861, 863, 874, 879], "do": [0, 2, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 55, 57, 59, 69, 70, 86, 92, 93, 252, 285, 294, 387, 389, 390, 399, 433, 469, 481, 541, 544, 574, 644, 646, 653, 733, 740, 743, 744, 745, 750, 793, 822, 828, 832, 834, 835, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 863, 865, 867, 869, 879], "set_inplace_mod": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 616, 646], "strict": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 592, 616, 646], "should": [0, 1, 6, 7, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 125, 129, 137, 151, 153, 157, 158, 166, 191, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 314, 325, 341, 347, 348, 360, 364, 365, 366, 367, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 411, 412, 413, 415, 420, 431, 446, 457, 463, 470, 495, 496, 520, 521, 534, 535, 536, 551, 569, 574, 626, 628, 631, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 703, 705, 706, 721, 737, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 780, 781, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 875, 878], "rais": [0, 5, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 58, 59, 65, 69, 70, 78, 80, 83, 86, 88, 92, 93, 99, 101, 103, 106, 140, 166, 255, 290, 347, 348, 358, 384, 387, 389, 390, 394, 399, 421, 432, 469, 474, 475, 482, 484, 486, 487, 488, 495, 504, 511, 521, 540, 541, 550, 574, 592, 594, 605, 607, 613, 617, 642, 644, 646, 649, 651, 655, 656, 657, 659, 660, 689, 691, 705, 717, 718, 719, 721, 723, 724, 725, 726, 728, 754, 755, 756, 762, 767, 775, 777, 782, 783, 786, 793, 811, 836, 839, 841, 845, 846, 849, 856, 857, 861, 862, 868], "error": [0, 5, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 49, 60, 62, 68, 69, 73, 86, 91, 92, 96, 122, 254, 302, 347, 348, 355, 356, 384, 388, 389, 390, 399, 400, 457, 463, 465, 467, 504, 541, 545, 592, 638, 644, 646, 648, 649, 659, 678, 697, 700, 775, 777, 793, 811, 825, 829, 833, 834, 835, 836, 839, 840, 841, 844, 845, 846, 847, 851, 852, 857, 860, 861, 862, 867, 878], "whenev": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 807, 836, 841, 844, 845, 849, 856, 859, 860, 862], "attempt": [0, 8, 9, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 57, 59, 62, 835, 862, 867], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 34, 37, 39, 40, 57, 58, 59, 62, 825, 835, 836, 862, 874, 875, 876], "first": [0, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 21, 22, 23, 27, 33, 35, 36, 37, 39, 42, 43, 44, 46, 47, 48, 57, 60, 61, 62, 65, 68, 69, 74, 76, 78, 79, 80, 82, 88, 91, 92, 93, 97, 99, 101, 103, 105, 109, 110, 114, 115, 134, 135, 149, 150, 159, 190, 198, 208, 235, 240, 242, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 270, 271, 272, 277, 278, 279, 281, 282, 285, 288, 290, 301, 302, 314, 324, 325, 340, 342, 343, 344, 346, 359, 361, 362, 363, 369, 373, 374, 379, 381, 384, 387, 388, 389, 390, 397, 399, 410, 440, 441, 442, 444, 448, 470, 480, 482, 486, 493, 496, 498, 499, 502, 510, 521, 523, 527, 535, 536, 537, 544, 549, 640, 641, 642, 643, 644, 646, 648, 649, 651, 652, 653, 656, 657, 658, 659, 675, 680, 683, 684, 685, 687, 689, 694, 696, 697, 699, 701, 703, 705, 721, 722, 725, 726, 730, 731, 732, 733, 734, 743, 744, 746, 758, 759, 760, 764, 765, 766, 769, 770, 772, 773, 788, 806, 807, 808, 809, 811, 816, 828, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 851, 852, 853, 854, 856, 857, 860, 863, 865, 866, 868, 874, 875, 878, 879], "datafram": [0, 878], "allow": [0, 8, 9, 23, 26, 40, 43, 44, 55, 69, 82, 92, 105, 149, 290, 388, 399, 460, 537, 541, 584, 641, 644, 646, 658, 659, 770, 777, 791, 792, 793, 794, 808, 809, 822, 826, 828, 834, 836, 837, 840, 841, 844, 845, 849, 851, 853, 854, 855, 856, 857, 858, 860, 863, 865, 867, 869, 871, 874, 875, 876, 878, 880], "u": [0, 4, 5, 19, 20, 57, 59, 61, 62, 69, 74, 88, 92, 97, 109, 110, 150, 388, 452, 459, 461, 649, 653, 679, 685, 686, 699, 741, 828, 829, 835, 836, 838, 843, 844, 851, 854, 856, 857, 858, 859, 860, 861, 863, 867], "leverag": [0, 39, 43, 44, 835, 856, 871, 872, 875, 878, 880], "explor": [0, 8, 9, 10, 11, 23, 26, 27, 29, 33, 37, 39, 43, 44, 49, 50, 51, 834, 835, 836, 845, 850, 863, 878], "expect": [0, 4, 5, 12, 13, 19, 20, 24, 25, 35, 39, 43, 44, 46, 59, 60, 62, 69, 74, 75, 92, 98, 191, 259, 303, 387, 389, 410, 432, 469, 548, 642, 644, 646, 648, 650, 673, 694, 708, 806, 807, 828, 835, 836, 839, 845, 846, 849, 851, 854, 856, 858, 860, 863, 867, 874, 875, 876], "contain": [0, 15, 16, 33, 43, 44, 58, 63, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 175, 177, 178, 179, 180, 183, 184, 185, 187, 189, 192, 209, 211, 212, 213, 218, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 381, 384, 386, 387, 388, 389, 390, 393, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 593, 596, 598, 603, 604, 605, 606, 607, 609, 611, 612, 619, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 740, 741, 742, 745, 746, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 798, 799, 807, 808, 809, 811, 812, 816, 821, 822, 826, 828, 830, 832, 834, 835, 838, 839, 840, 841, 842, 844, 845, 847, 848, 850, 852, 853, 854, 855, 856, 858, 860, 862, 863, 865, 867, 868, 869, 874, 878, 879], "variou": [0, 8, 9, 26, 36, 47, 49, 55, 828, 831, 834, 835, 836, 839, 844, 845, 848, 849, 852, 854, 855, 857, 858, 859, 860, 868, 878, 880], "among": [0, 8, 9, 86, 843, 844, 860, 863, 871, 878], "pattern": [0, 69, 70, 92, 93, 388, 452, 557, 558, 559, 646, 845, 848, 859], "signal": [0, 69, 92, 331, 381, 387, 401, 402, 403, 404, 409, 410, 419, 435, 807, 878, 880], "credit_card_data": 0, "read_csv": [0, 26, 59], "creditcard": 0, "csv": [0, 26, 59], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 57, 58, 60, 66, 67, 74, 86, 90, 97, 114, 175, 176, 177, 180, 208, 209, 210, 213, 219, 224, 227, 231, 390, 501, 548, 566, 587, 606, 642, 643, 646, 649, 653, 706, 735, 791, 806, 807, 821, 829, 831, 833, 834, 835, 837, 838, 839, 844, 845, 846, 850, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 869, 875, 876, 878], "sens": [0, 839, 845, 847, 857, 859], "re": [0, 23, 26, 31, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 57, 59, 60, 62, 69, 70, 79, 92, 102, 112, 225, 331, 381, 388, 390, 462, 497, 498, 557, 643, 646, 649, 651, 656, 701, 722, 761, 763, 828, 829, 830, 834, 835, 836, 837, 838, 839, 842, 845, 850, 855, 856, 857, 858, 859, 861, 863, 865, 867, 871, 878], "work": [0, 1, 8, 9, 23, 40, 43, 44, 55, 56, 58, 62, 64, 69, 92, 109, 399, 544, 649, 653, 700, 740, 741, 745, 750, 751, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 856, 857, 858, 860, 861, 864, 865, 866, 868, 872, 874, 875, 876, 878, 880], "help": [0, 1, 31, 59, 61, 66, 547, 592, 646, 659, 780, 806, 828, 829, 830, 834, 835, 837, 840, 841, 842, 843, 844, 845, 847, 851, 853, 854, 856, 857, 860, 861, 869, 872, 878], "few": [0, 8, 9, 10, 11, 828, 833, 834, 836, 843, 845, 846, 852, 853, 855, 856, 858, 860, 863, 866, 871, 878], "entri": [0, 69, 76, 86, 92, 99, 103, 110, 149, 388, 390, 394, 458, 485, 487, 488, 520, 641, 651, 653, 723, 746, 764, 835, 844, 860, 878], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 62, 65, 66, 69, 70, 74, 76, 78, 80, 88, 89, 92, 93, 97, 99, 101, 103, 109, 110, 124, 127, 139, 140, 150, 152, 167, 206, 223, 224, 225, 314, 331, 379, 381, 387, 388, 389, 390, 393, 394, 397, 399, 410, 423, 447, 454, 456, 461, 469, 481, 508, 513, 521, 522, 527, 534, 581, 592, 626, 629, 638, 641, 642, 643, 646, 647, 648, 649, 651, 655, 675, 683, 689, 699, 703, 721, 725, 754, 755, 756, 764, 788, 791, 792, 793, 794, 799, 822, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 878, 879, 880], "give": [0, 12, 13, 34, 45, 55, 69, 73, 92, 96, 191, 377, 386, 387, 430, 434, 642, 648, 651, 661, 662, 663, 664, 666, 668, 670, 721, 806, 828, 835, 836, 838, 841, 844, 845, 847, 848, 850, 851, 852, 860, 878], "insight": 0, "structur": [0, 26, 44, 86, 89, 115, 177, 180, 554, 646, 650, 653, 711, 737, 746, 834, 836, 837, 840, 843, 853, 858, 859, 860, 861, 878, 880], "type": [0, 6, 7, 19, 20, 23, 27, 29, 33, 39, 43, 44, 49, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 791, 792, 793, 794, 798, 799, 803, 806, 807, 808, 809, 813, 816, 819, 821, 822, 823, 826, 834, 835, 836, 838, 839, 840, 843, 846, 847, 848, 849, 852, 854, 856, 858, 860, 861, 863, 865, 874, 875, 876, 878, 879], "present": [0, 58, 69, 82, 86, 92, 105, 350, 384, 393, 513, 514, 515, 659, 777, 834, 835, 836, 843, 845, 846, 852, 856, 871], "initi": [0, 6, 7, 8, 9, 15, 16, 43, 44, 60, 69, 73, 82, 86, 92, 96, 105, 115, 388, 399, 446, 457, 463, 542, 543, 648, 659, 673, 674, 777, 804, 807, 808, 809, 811, 812, 826, 828, 831, 836, 837, 841, 845, 846, 850, 858, 860, 865, 874, 875, 876, 878], "qualiti": [0, 831, 836], "below": [0, 2, 21, 22, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 48, 49, 50, 55, 58, 59, 60, 65, 69, 74, 92, 97, 105, 157, 158, 159, 259, 269, 292, 340, 341, 350, 381, 384, 390, 504, 641, 644, 649, 683, 703, 781, 829, 832, 834, 835, 838, 839, 843, 844, 845, 846, 847, 849, 850, 853, 856, 857, 858, 860, 861, 862, 863, 865, 866, 874, 875, 876], "head": [0, 8, 9, 10, 11, 23, 60, 61, 648, 675, 807, 828, 833, 835, 844, 857], "method": [0, 26, 33, 43, 59, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 164, 165, 166, 167, 177, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 387, 388, 389, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 641, 642, 644, 646, 647, 649, 650, 653, 656, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 703, 704, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 744, 745, 746, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 788, 799, 805, 806, 807, 808, 809, 834, 836, 839, 840, 844, 845, 846, 847, 848, 852, 860, 861, 865, 866, 867, 874, 875, 876, 879], "five": 0, "row": [0, 57, 69, 92, 110, 144, 159, 340, 381, 388, 390, 397, 399, 447, 459, 488, 494, 512, 527, 533, 534, 641, 649, 655, 656, 690, 698, 699, 704, 753, 762, 806], "v1": 0, "v2": 0, "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 878], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 26, 75, 98, 227, 643, 650, 708, 709, 710, 822, 835, 844, 846, 858], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 74, 649, 687], "62": [0, 23, 26, 55, 57, 63, 85, 91, 92, 101, 125, 270, 298, 644, 654, 655, 752, 754, 756], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 23, 35, 55, 62, 68, 94, 101, 233, 275, 387, 409, 419, 631, 644, 647, 649, 690, 691, 755, 860], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 291, 644], "66": [0, 5, 23, 37, 39, 40, 55, 57, 59, 82, 92, 93, 94, 387, 419, 557, 558, 631, 646, 647, 649, 659, 694, 774], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 34, 88, 89, 92, 148, 180, 468, 560, 641, 646, 822, 860], "50": [0, 24, 25, 26, 43, 44, 55, 59, 69, 82, 91, 92, 93, 251, 291, 369, 384, 387, 388, 390, 416, 440, 448, 501, 559, 565, 572, 573, 589, 604, 644, 646, 649, 653, 656, 659, 688, 694, 705, 734, 736, 762, 774, 791, 794, 855, 874, 875], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 5, 26, 37, 39, 40, 55, 57, 58, 62, 63, 68, 69, 91, 92, 93, 96, 101, 125, 130, 150, 246, 277, 285, 387, 390, 399, 408, 409, 479, 535, 552, 638, 641, 644, 646, 755, 756], "column": [0, 26, 59, 69, 74, 92, 97, 109, 110, 144, 159, 340, 381, 388, 390, 397, 399, 441, 447, 459, 480, 485, 487, 488, 492, 494, 527, 533, 534, 641, 649, 684, 685, 690, 696, 698, 699, 704, 791, 806], "It": [0, 1, 4, 5, 10, 11, 24, 25, 26, 34, 37, 39, 40, 43, 44, 45, 46, 55, 56, 57, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 341, 347, 348, 349, 350, 355, 356, 360, 362, 364, 365, 366, 367, 371, 379, 381, 384, 387, 388, 389, 390, 393, 394, 399, 400, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 429, 431, 436, 438, 439, 447, 448, 453, 454, 455, 456, 464, 465, 466, 467, 468, 470, 471, 481, 484, 489, 497, 498, 499, 500, 502, 504, 508, 509, 513, 516, 517, 519, 520, 521, 523, 524, 534, 535, 536, 537, 545, 552, 553, 557, 558, 559, 564, 565, 574, 588, 589, 590, 627, 628, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 698, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 732, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 767, 768, 771, 772, 773, 776, 778, 779, 781, 782, 783, 806, 807, 828, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 854, 856, 857, 858, 859, 860, 861, 862, 863, 866, 873, 876, 878, 879], "just": [0, 8, 9, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 55, 57, 59, 69, 74, 82, 97, 109, 112, 159, 340, 381, 388, 456, 641, 649, 659, 692, 774, 799, 807, 828, 832, 835, 836, 837, 839, 841, 844, 845, 846, 847, 848, 850, 853, 854, 856, 857, 858, 860, 866, 867, 871, 875, 878, 879], "verifi": [0, 8, 9, 15, 16, 17, 26, 39, 337, 338, 381, 834, 845, 846, 857, 860, 861], "consist": [0, 8, 9, 10, 11, 21, 22, 23, 24, 25, 26, 37, 39, 40, 43, 44, 82, 86, 252, 259, 285, 387, 388, 431, 441, 644, 649, 659, 684, 685, 774, 808, 809, 831, 839, 840, 844, 845, 851, 856, 866, 879, 880], "complet": [0, 74, 86, 97, 649, 696, 792, 828, 834, 835, 836, 837, 839, 840, 843, 844, 847, 849, 853, 857, 858, 860, 863], "By": [0, 34, 55, 62, 69, 75, 76, 82, 83, 92, 98, 99, 105, 106, 299, 345, 347, 348, 361, 368, 381, 384, 387, 389, 390, 397, 399, 410, 468, 469, 504, 508, 527, 534, 537, 592, 644, 646, 649, 650, 651, 659, 660, 680, 705, 708, 720, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 835, 841, 845, 847, 849, 853, 855, 856, 857, 865, 872, 874, 880], "tail": 0, "last": [0, 5, 14, 35, 40, 43, 46, 65, 69, 73, 74, 75, 76, 79, 81, 82, 83, 86, 88, 92, 96, 97, 98, 99, 104, 105, 106, 110, 114, 149, 150, 153, 208, 325, 353, 381, 384, 387, 388, 389, 390, 397, 399, 416, 421, 431, 432, 433, 444, 468, 486, 496, 498, 504, 508, 527, 535, 536, 641, 643, 648, 649, 650, 651, 656, 658, 659, 660, 674, 675, 680, 683, 694, 703, 705, 709, 710, 715, 718, 721, 722, 723, 725, 759, 760, 768, 770, 771, 772, 773, 782, 783, 807, 816, 836, 839, 841, 842, 845, 847, 856, 858, 860, 863, 865, 867, 875, 878], "well": [0, 23, 26, 43, 44, 57, 58, 59, 93, 389, 468, 570, 646, 649, 698, 793, 830, 834, 836, 842, 844, 845, 849, 856, 857, 858, 860, 872, 875, 878, 879, 880], "readi": [0, 27, 29, 34, 35, 36, 45, 46, 47, 48, 49, 50, 57, 59, 834, 835], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 10, 11, 26, 55, 59, 93, 605, 649, 659, 694, 774], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 5, 8, 9, 23, 26, 35, 55, 57, 68, 69, 74, 82, 91, 92, 93, 96, 97, 101, 114, 247, 255, 270, 272, 285, 295, 296, 299, 361, 364, 384, 387, 399, 406, 408, 409, 419, 424, 425, 426, 430, 434, 535, 557, 558, 644, 646, 649, 653, 659, 662, 683, 690, 694, 734, 745, 754, 755, 756, 772, 774, 788, 849], "79": [0, 55, 57, 69, 70, 92, 93, 96, 101, 114, 252, 387, 409, 419, 430, 552, 553, 644, 646, 756], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 26, 55, 68, 69, 70, 74, 91, 92, 93, 96, 101, 114, 250, 255, 295, 296, 298, 305, 316, 320, 379, 399, 430, 535, 557, 558, 604, 630, 632, 644, 646, 647, 649, 687, 756], "88": [0, 5, 26, 55, 94, 101, 124, 399, 535, 631, 638, 647, 649, 655, 659, 694, 756, 774], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 57, 849], "understand": [0, 31, 32, 33, 37, 55, 61, 832, 833, 834, 835, 836, 838, 839, 842, 847, 848, 852, 858, 859, 864], "composit": [0, 33, 43, 178, 179, 211, 212, 304, 388, 448, 562, 563, 642, 643, 644, 646, 792, 794, 834, 838, 840, 841, 843, 845, 846, 854, 856, 857, 858, 860, 863, 865, 866, 867, 869, 874, 879], "crucial": [0, 846, 855, 872], "proce": [0, 26, 834, 835], "ani": [0, 1, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 27, 29, 33, 34, 35, 42, 45, 46, 49, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 167, 168, 183, 187, 191, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 340, 341, 347, 348, 350, 353, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 432, 433, 442, 447, 464, 485, 496, 504, 508, 513, 514, 515, 534, 537, 540, 541, 542, 546, 556, 557, 558, 559, 560, 564, 568, 570, 572, 576, 578, 579, 597, 603, 605, 612, 613, 620, 626, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 739, 740, 742, 743, 750, 752, 756, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 878, 879, 880], "info": [0, 5, 23, 57, 825, 826, 828, 842, 848, 851], "concis": 0, "summari": [0, 86, 181, 554, 642, 646, 835, 836, 860], "includ": [0, 1, 8, 9, 23, 26, 35, 46, 51, 65, 68, 69, 70, 74, 79, 82, 83, 86, 88, 91, 92, 93, 97, 102, 105, 106, 138, 139, 140, 149, 150, 152, 159, 232, 256, 260, 261, 262, 265, 267, 270, 278, 286, 299, 304, 326, 329, 330, 331, 334, 340, 343, 345, 347, 348, 352, 353, 354, 357, 358, 359, 360, 362, 364, 365, 367, 368, 369, 370, 373, 374, 381, 384, 387, 390, 399, 406, 407, 408, 438, 441, 443, 487, 488, 490, 493, 495, 497, 500, 522, 524, 525, 533, 537, 539, 540, 542, 543, 544, 570, 625, 641, 644, 646, 648, 649, 653, 655, 656, 659, 660, 673, 684, 704, 706, 733, 756, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 794, 806, 807, 810, 824, 826, 828, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 857, 858, 859, 860, 861, 863, 865, 874, 875, 878, 880], "number": [0, 57, 59, 60, 61, 62, 65, 66, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 82, 83, 86, 88, 89, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 110, 112, 114, 115, 118, 138, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 159, 165, 170, 171, 172, 173, 174, 176, 177, 180, 183, 184, 185, 187, 189, 192, 216, 217, 218, 232, 233, 234, 235, 236, 238, 240, 241, 248, 250, 252, 253, 255, 257, 258, 259, 265, 266, 267, 269, 273, 275, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 296, 298, 299, 303, 305, 331, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 350, 351, 352, 353, 363, 368, 372, 381, 384, 387, 388, 389, 390, 393, 399, 421, 432, 435, 438, 441, 445, 446, 447, 457, 461, 463, 464, 474, 475, 476, 496, 497, 498, 499, 500, 502, 504, 506, 508, 510, 513, 514, 515, 532, 534, 535, 536, 537, 543, 561, 568, 586, 603, 604, 605, 612, 625, 626, 639, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 661, 668, 669, 671, 673, 675, 680, 684, 685, 686, 692, 697, 699, 703, 704, 705, 708, 714, 716, 717, 719, 720, 722, 723, 725, 727, 729, 730, 731, 732, 753, 757, 762, 764, 765, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 799, 806, 807, 810, 822, 826, 828, 835, 836, 843, 844, 845, 846, 847, 854, 855, 856, 860, 861, 862, 863, 865, 870, 874], "presenc": [0, 786, 843, 856], "null": [0, 835, 850], "each": [0, 19, 20, 23, 24, 25, 26, 35, 36, 37, 43, 44, 46, 47, 48, 50, 57, 63, 65, 66, 68, 69, 70, 71, 73, 74, 76, 79, 80, 82, 86, 89, 91, 92, 93, 94, 96, 97, 99, 102, 103, 105, 109, 110, 112, 114, 115, 123, 124, 126, 127, 128, 130, 134, 151, 165, 177, 180, 225, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 307, 309, 310, 315, 317, 318, 319, 321, 322, 323, 328, 339, 342, 343, 344, 350, 358, 362, 366, 371, 374, 379, 381, 384, 387, 388, 390, 393, 394, 397, 399, 406, 407, 408, 411, 412, 413, 416, 424, 425, 426, 427, 430, 432, 433, 434, 441, 442, 447, 456, 457, 461, 463, 474, 475, 476, 480, 481, 482, 487, 488, 490, 491, 493, 495, 496, 499, 501, 510, 511, 518, 520, 527, 532, 533, 534, 535, 536, 537, 546, 549, 557, 564, 565, 581, 606, 626, 628, 629, 631, 633, 634, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 679, 680, 681, 684, 685, 686, 689, 691, 692, 693, 695, 697, 698, 699, 704, 716, 720, 722, 723, 725, 727, 729, 739, 746, 753, 762, 764, 765, 767, 773, 774, 781, 788, 791, 793, 799, 807, 810, 811, 812, 822, 826, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 871, 874, 875, 879, 880], "invalu": 0, "plan": [0, 868], "right": [0, 58, 69, 74, 86, 92, 97, 115, 132, 133, 244, 246, 299, 362, 384, 387, 388, 390, 422, 452, 458, 459, 461, 487, 557, 640, 644, 646, 649, 658, 699, 704, 770, 791, 829, 834, 835, 836, 838, 839, 847, 850, 863, 874], "format": [0, 1, 39, 40, 43, 44, 55, 57, 58, 59, 67, 70, 73, 82, 85, 86, 87, 90, 96, 112, 130, 175, 209, 387, 388, 398, 429, 462, 530, 557, 638, 642, 643, 646, 648, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 774, 784, 785, 786, 803, 828, 835, 836, 838, 844, 845, 846, 847, 848, 849, 857, 859, 875, 878, 879, 880], "lt": [0, 4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 33, 37, 38, 39, 40, 42, 55, 57, 59, 115], "core": [0, 5, 8, 9, 37, 40, 57, 58, 59, 61, 62, 69, 92, 109, 112, 216, 388, 446, 457, 462, 463, 643, 835, 846, 850, 860, 878, 879, 880], "frame": [0, 59, 69, 92, 331, 381, 387, 435, 819, 878], "gt": [0, 4, 5, 8, 9, 10, 11, 14, 21, 22, 23, 27, 29, 33, 37, 38, 39, 40, 42, 55, 57, 59, 62, 115, 858, 865], "rangeindex": 0, "284807": 0, "total": [0, 5, 57, 59, 69, 82, 86, 92, 105, 115, 146, 227, 342, 343, 344, 352, 381, 384, 389, 464, 641, 643, 656, 659, 762, 779, 781, 822, 829, 835, 836, 845, 846, 847, 860, 863, 867], "non": [0, 10, 11, 35, 46, 66, 68, 69, 74, 78, 79, 82, 83, 89, 91, 92, 97, 101, 102, 105, 106, 146, 164, 182, 191, 260, 280, 281, 286, 347, 348, 352, 359, 372, 384, 387, 388, 390, 399, 431, 442, 446, 452, 475, 476, 537, 540, 641, 642, 644, 649, 653, 655, 656, 659, 660, 680, 681, 690, 692, 699, 701, 705, 706, 746, 755, 759, 760, 761, 762, 775, 776, 777, 778, 779, 781, 782, 783, 791, 806, 808, 809, 811, 840, 843, 847, 865, 874, 875, 876, 878], "count": [0, 5, 61, 69, 76, 80, 83, 88, 92, 99, 103, 106, 146, 218, 352, 384, 390, 399, 504, 508, 510, 532, 537, 641, 643, 649, 651, 657, 660, 680, 705, 715, 718, 764, 765, 782, 783, 842, 843, 847], "dtype": [0, 4, 5, 12, 13, 21, 22, 26, 29, 35, 37, 38, 39, 40, 42, 55, 58, 65, 66, 69, 70, 73, 74, 78, 79, 82, 86, 88, 89, 91, 92, 93, 96, 97, 101, 102, 105, 114, 117, 118, 119, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 220, 247, 251, 283, 284, 286, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 345, 350, 352, 368, 381, 384, 387, 388, 389, 390, 394, 399, 409, 419, 431, 432, 435, 458, 464, 469, 480, 504, 520, 521, 522, 523, 524, 534, 535, 536, 537, 540, 543, 544, 561, 562, 563, 565, 574, 583, 611, 641, 642, 643, 644, 646, 648, 649, 652, 655, 656, 658, 659, 660, 664, 671, 690, 706, 731, 732, 754, 755, 756, 759, 760, 761, 770, 771, 772, 773, 776, 778, 780, 782, 783, 786, 788, 791, 793, 794, 806, 807, 808, 809, 810, 812, 828, 832, 839, 841, 845, 846, 847, 849, 850, 853, 854, 856, 857, 858, 860, 861, 865, 875], "float64": [0, 37, 38, 66, 69, 78, 82, 88, 89, 91, 92, 93, 101, 105, 138, 146, 147, 164, 167, 171, 172, 177, 178, 181, 182, 187, 188, 192, 194, 195, 201, 204, 286, 358, 384, 389, 399, 464, 469, 534, 583, 641, 642, 646, 649, 655, 685, 686, 690, 706, 755, 756, 773, 788, 791, 792, 845, 858, 860], "v10": 0, "v11": 0, "12": [0, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 26, 33, 35, 37, 39, 40, 55, 57, 58, 59, 66, 68, 69, 70, 73, 74, 78, 82, 89, 91, 92, 93, 96, 97, 99, 100, 101, 105, 114, 115, 180, 235, 237, 242, 246, 247, 250, 252, 253, 254, 272, 285, 288, 295, 298, 305, 306, 329, 330, 361, 364, 365, 381, 384, 387, 390, 399, 406, 407, 408, 409, 411, 415, 416, 424, 425, 429, 430, 431, 432, 434, 479, 480, 482, 486, 491, 508, 511, 524, 535, 541, 542, 543, 553, 557, 558, 589, 595, 604, 618, 644, 646, 648, 649, 651, 653, 654, 655, 656, 657, 659, 662, 666, 671, 672, 683, 685, 687, 690, 694, 698, 700, 701, 703, 705, 718, 722, 724, 726, 728, 745, 752, 754, 755, 756, 763, 764, 772, 773, 774, 778, 780, 791, 835, 841, 843, 845, 847, 855], "v12": 0, "13": [0, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 33, 37, 39, 40, 55, 57, 59, 63, 68, 69, 73, 74, 78, 82, 91, 92, 93, 94, 96, 99, 101, 105, 114, 130, 180, 210, 235, 250, 259, 270, 290, 299, 361, 368, 375, 384, 387, 390, 408, 409, 419, 430, 434, 479, 480, 482, 486, 491, 511, 524, 535, 536, 552, 557, 558, 573, 595, 604, 627, 638, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 657, 659, 662, 663, 671, 672, 683, 687, 694, 698, 700, 703, 728, 732, 745, 754, 755, 756, 763, 764, 772, 773, 774, 843, 845, 847, 857], "v13": 0, "v14": 0, "15": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 55, 57, 58, 59, 62, 68, 69, 70, 74, 78, 82, 88, 89, 91, 92, 93, 96, 97, 99, 101, 105, 115, 148, 177, 235, 242, 246, 252, 254, 263, 270, 271, 276, 277, 285, 294, 295, 296, 361, 375, 384, 385, 387, 388, 390, 399, 406, 407, 424, 426, 429, 430, 434, 440, 482, 486, 491, 511, 535, 553, 557, 558, 561, 572, 573, 598, 604, 621, 641, 642, 644, 646, 648, 649, 651, 653, 655, 656, 657, 659, 662, 672, 683, 686, 687, 688, 694, 700, 701, 722, 728, 733, 754, 755, 762, 764, 773, 774, 788, 831, 835, 844, 847, 855], "v15": 0, "v16": 0, "17": [0, 5, 8, 9, 12, 13, 15, 16, 17, 18, 23, 24, 25, 26, 37, 39, 40, 55, 57, 59, 62, 63, 69, 74, 85, 91, 92, 93, 94, 96, 97, 101, 115, 124, 125, 150, 235, 252, 277, 285, 316, 324, 375, 381, 387, 390, 406, 407, 415, 416, 419, 420, 424, 425, 430, 434, 486, 558, 573, 627, 629, 638, 641, 644, 646, 647, 648, 649, 653, 655, 662, 671, 672, 683, 687, 741, 754, 755, 756, 758, 843], "v17": 0, "18": [0, 4, 5, 17, 18, 23, 24, 25, 26, 37, 39, 40, 55, 57, 59, 68, 69, 78, 91, 92, 93, 96, 97, 101, 105, 125, 247, 252, 294, 298, 307, 308, 361, 379, 384, 387, 390, 409, 415, 419, 420, 424, 430, 434, 486, 603, 638, 644, 649, 655, 659, 666, 683, 689, 694, 701, 754, 755, 756, 773, 774, 778, 843, 845, 847], "v18": 0, "19": [0, 4, 5, 23, 24, 25, 37, 39, 40, 55, 57, 58, 59, 62, 68, 69, 78, 91, 92, 96, 97, 101, 238, 247, 275, 285, 302, 387, 388, 390, 399, 408, 409, 420, 424, 430, 434, 440, 445, 486, 535, 644, 649, 653, 655, 658, 683, 690, 703, 744, 754, 755, 756, 771, 847], "v19": 0, "20": [0, 4, 15, 16, 17, 18, 23, 26, 29, 55, 57, 58, 59, 62, 68, 69, 70, 73, 78, 82, 91, 92, 93, 96, 97, 101, 105, 247, 251, 255, 291, 295, 299, 316, 361, 363, 365, 384, 387, 390, 406, 408, 424, 430, 434, 479, 501, 557, 564, 565, 567, 589, 593, 604, 644, 646, 649, 655, 656, 659, 662, 663, 674, 683, 688, 690, 694, 701, 754, 762, 763, 772, 773, 774, 778, 780, 828, 844, 863], "v20": 0, "22": [0, 5, 23, 26, 37, 39, 40, 55, 57, 59, 62, 63, 68, 69, 70, 78, 82, 85, 92, 93, 96, 101, 125, 130, 247, 255, 316, 320, 379, 387, 388, 389, 390, 395, 399, 406, 407, 409, 424, 425, 426, 430, 434, 440, 464, 479, 525, 535, 558, 589, 625, 638, 644, 648, 649, 653, 656, 659, 671, 672, 683, 688, 694, 698, 741, 751, 754, 755, 756, 763, 773, 774, 835, 843, 849], "26": [0, 5, 14, 23, 37, 39, 40, 55, 57, 59, 62, 68, 69, 77, 78, 92, 93, 94, 101, 247, 252, 298, 387, 388, 409, 445, 455, 572, 627, 644, 646, 647, 648, 649, 653, 654, 659, 670, 683, 694, 701, 734, 752, 754, 755, 774], "27": [0, 14, 23, 26, 55, 57, 62, 68, 69, 74, 78, 91, 92, 93, 96, 97, 101, 105, 246, 247, 250, 290, 298, 299, 358, 384, 387, 409, 419, 573, 603, 644, 646, 649, 653, 659, 689, 694, 704, 734, 741, 755, 774, 778, 791], "28": [0, 23, 26, 40, 42, 43, 44, 55, 57, 59, 62, 68, 69, 73, 77, 91, 92, 93, 96, 97, 101, 105, 251, 254, 275, 291, 387, 388, 409, 419, 440, 541, 572, 627, 644, 646, 647, 648, 649, 650, 654, 659, 663, 665, 667, 669, 670, 672, 694, 711, 752, 754, 755, 756, 774, 778], "30": [0, 23, 26, 37, 39, 40, 55, 57, 68, 69, 70, 92, 93, 101, 105, 115, 285, 316, 361, 369, 384, 387, 390, 409, 419, 430, 479, 501, 525, 557, 559, 564, 565, 572, 573, 589, 598, 604, 644, 646, 649, 653, 659, 688, 694, 742, 754, 755, 773, 774, 778, 793, 806, 822, 831, 844], "int64": [0, 12, 13, 69, 78, 79, 81, 82, 89, 101, 102, 104, 105, 154, 167, 173, 176, 178, 180, 184, 185, 189, 196, 328, 381, 397, 399, 527, 535, 536, 641, 642, 656, 658, 659, 754, 759, 760, 761, 770, 772, 773, 778, 780, 791, 792, 845, 857, 860, 865], "proceed": [0, 57], "within": [0, 10, 11, 26, 27, 29, 33, 43, 44, 64, 69, 92, 138, 346, 363, 384, 387, 393, 424, 425, 426, 431, 434, 474, 475, 476, 518, 641, 655, 756, 822, 831, 834, 836, 837, 840, 844, 845, 857, 858, 859, 860, 867, 872, 875, 879, 880], "significantli": [0, 15, 16, 19, 20, 24, 25, 43, 69, 74, 92, 97, 388, 461, 649, 699, 844], "impact": [0, 831, 844, 860], "isnul": 0, "sum": [0, 8, 9, 10, 11, 57, 59, 68, 69, 70, 73, 74, 75, 82, 86, 91, 92, 93, 96, 97, 98, 105, 109, 114, 115, 225, 235, 277, 301, 344, 368, 381, 384, 388, 389, 390, 393, 399, 430, 440, 464, 465, 466, 467, 468, 469, 470, 471, 501, 518, 540, 541, 558, 588, 589, 643, 644, 646, 648, 649, 650, 659, 671, 678, 690, 699, 703, 706, 708, 773, 774, 806, 808, 821, 828, 843, 845, 853, 855, 856, 857, 865, 866, 874, 875, 876], "quickli": [0, 8, 9, 835, 836, 844, 878], "appropri": [0, 8, 9, 19, 20, 33, 37, 40, 43, 44, 70, 79, 84, 102, 107, 235, 252, 259, 285, 346, 363, 384, 644, 656, 759, 834, 835, 836, 849, 854, 860], "either": [0, 26, 37, 38, 48, 49, 50, 51, 55, 61, 68, 69, 70, 73, 82, 86, 91, 92, 93, 96, 97, 124, 127, 130, 135, 145, 146, 156, 232, 233, 234, 235, 240, 250, 252, 253, 255, 257, 259, 266, 267, 273, 274, 275, 276, 277, 285, 294, 296, 297, 299, 302, 303, 349, 371, 384, 387, 393, 399, 409, 419, 429, 430, 434, 518, 535, 536, 556, 576, 584, 585, 593, 613, 638, 640, 641, 644, 646, 648, 649, 652, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 689, 694, 697, 701, 730, 731, 732, 772, 773, 778, 780, 793, 807, 808, 809, 816, 830, 834, 835, 836, 841, 842, 843, 845, 846, 847, 848, 849, 851, 853, 856, 857, 858, 859, 860, 863, 865, 867, 875, 878], "imput": [0, 69, 92, 388, 446, 457, 463], "remov": [0, 8, 9, 15, 16, 23, 26, 35, 40, 43, 44, 46, 74, 86, 97, 649, 651, 652, 653, 683, 689, 703, 724, 730, 731, 747, 822, 825, 828, 834, 841, 842, 844, 845, 848, 853, 859, 860, 863, 874, 875, 878], "maintain": [0, 81, 104, 658, 768, 771, 828, 835, 836, 839, 851, 856, 858, 859, 860], "integr": [0, 4, 5, 6, 7, 8, 9, 27, 29, 36, 44, 47, 66, 68, 69, 89, 91, 92, 164, 304, 367, 384, 399, 537, 642, 644, 828, 833, 835, 837, 838, 854, 872, 875, 878], "check": [0, 4, 5, 6, 7, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 55, 60, 62, 64, 66, 70, 74, 86, 89, 93, 97, 130, 168, 169, 178, 179, 182, 184, 185, 186, 189, 204, 211, 212, 219, 231, 550, 560, 562, 563, 570, 576, 577, 578, 579, 580, 596, 607, 619, 625, 638, 642, 643, 646, 649, 653, 685, 686, 692, 733, 743, 744, 745, 786, 793, 821, 822, 828, 829, 830, 833, 834, 835, 836, 837, 839, 843, 844, 846, 847, 849, 854, 856, 857, 858, 859, 860, 861, 862, 865, 868, 874], "A": [0, 8, 9, 43, 44, 58, 65, 66, 69, 70, 76, 78, 82, 83, 86, 89, 91, 92, 93, 96, 97, 99, 101, 103, 106, 109, 110, 115, 134, 135, 137, 144, 152, 159, 165, 206, 225, 287, 289, 293, 325, 336, 340, 342, 343, 344, 346, 360, 363, 367, 368, 381, 384, 387, 388, 389, 390, 393, 394, 399, 402, 416, 430, 433, 435, 442, 450, 455, 458, 466, 470, 481, 484, 502, 506, 507, 513, 514, 515, 516, 520, 521, 522, 523, 524, 532, 541, 544, 549, 551, 560, 569, 572, 573, 604, 605, 606, 609, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 655, 659, 660, 671, 675, 683, 685, 688, 693, 694, 698, 699, 711, 714, 717, 719, 723, 725, 733, 736, 738, 740, 741, 742, 743, 744, 748, 749, 750, 751, 753, 754, 755, 756, 758, 764, 774, 782, 783, 786, 788, 789, 791, 792, 793, 794, 799, 806, 822, 826, 828, 833, 834, 835, 838, 843, 845, 846, 849, 852, 853, 857, 858, 860, 865, 867, 868, 869, 870, 874, 875, 876, 878, 879], "critic": [0, 8, 9, 37, 40, 43, 44, 650, 712, 826, 878], "grasp": [0, 857], "imbal": 0, "common": [0, 23, 33, 36, 43, 47, 68, 69, 86, 91, 191, 262, 270, 351, 358, 384, 642, 644, 829, 832, 834, 835, 842, 845, 846, 847, 853, 854, 857, 861, 863, 867, 878], "scenario": [0, 39, 845, 855], "call": [0, 4, 5, 8, 9, 14, 19, 20, 27, 29, 33, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 57, 61, 69, 84, 89, 92, 107, 109, 115, 134, 184, 185, 225, 388, 399, 455, 541, 592, 598, 613, 629, 630, 632, 640, 643, 646, 647, 649, 653, 697, 733, 739, 743, 744, 788, 799, 807, 808, 809, 811, 816, 822, 826, 828, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 861, 863, 865, 866, 867, 872, 874, 875, 876, 878, 879], "value_count": 0, "see": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 26, 34, 35, 40, 43, 44, 45, 46, 50, 55, 56, 62, 63, 66, 68, 69, 74, 79, 80, 82, 83, 85, 91, 92, 97, 102, 105, 106, 109, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 145, 149, 156, 159, 166, 185, 192, 235, 240, 242, 244, 245, 246, 247, 252, 253, 257, 259, 263, 264, 271, 272, 275, 277, 279, 281, 282, 285, 288, 290, 294, 301, 303, 306, 307, 312, 313, 315, 340, 347, 348, 379, 381, 384, 388, 389, 390, 438, 466, 504, 638, 641, 642, 644, 649, 656, 657, 659, 660, 680, 692, 695, 698, 705, 706, 760, 764, 765, 766, 767, 775, 776, 777, 778, 779, 780, 781, 782, 783, 803, 828, 829, 832, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 857, 858, 860, 863, 865, 866, 867], "instanc": [0, 8, 9, 26, 33, 39, 43, 44, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 177, 180, 183, 184, 185, 187, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 381, 384, 387, 388, 389, 390, 393, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 424, 425, 426, 430, 431, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 599, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 641, 642, 644, 646, 647, 648, 649, 650, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 799, 804, 826, 834, 835, 836, 839, 840, 841, 845, 847, 848, 849, 850, 852, 853, 854, 855, 856, 860, 869, 871, 874, 879], "typic": [0, 8, 9, 23, 69, 92, 346, 363, 384, 399, 534, 658, 770, 807, 839, 853, 880], "repres": [0, 65, 68, 69, 73, 74, 91, 92, 96, 97, 112, 137, 151, 153, 176, 234, 235, 238, 241, 250, 252, 259, 285, 298, 302, 303, 328, 342, 343, 344, 361, 378, 381, 384, 386, 387, 388, 389, 390, 393, 394, 397, 430, 434, 448, 462, 464, 469, 496, 507, 513, 514, 515, 520, 526, 533, 569, 640, 641, 642, 644, 646, 648, 649, 671, 672, 673, 687, 694, 697, 698, 793, 806, 810, 822, 835, 840, 845, 863, 879], "ones": [0, 8, 9, 23, 33, 40, 43, 55, 61, 65, 69, 71, 73, 78, 86, 88, 92, 96, 101, 144, 148, 153, 155, 161, 211, 212, 248, 325, 381, 399, 543, 627, 641, 643, 644, 647, 648, 650, 666, 667, 711, 754, 755, 756, 792, 834, 840, 844, 847, 852, 853, 859, 860, 878], "how": [0, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 55, 58, 61, 62, 63, 68, 69, 85, 91, 92, 112, 122, 123, 124, 125, 126, 127, 128, 129, 130, 252, 285, 303, 307, 312, 313, 315, 379, 389, 390, 464, 479, 504, 505, 638, 644, 803, 806, 807, 808, 809, 829, 830, 832, 833, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 871, 872, 877, 878], "approach": [0, 48, 832, 834, 835, 836, 840, 843, 845, 846, 850, 853, 857, 860, 861, 863, 867, 880], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 8, 9, 15, 16, 19, 20, 23, 43, 44, 55, 57, 58, 59, 69, 74, 80, 84, 92, 97, 103, 107, 259, 387, 388, 390, 435, 441, 450, 506, 510, 547, 548, 644, 646, 649, 657, 684, 685, 696, 697, 699, 700, 704, 764, 765, 766, 788, 792, 799, 809, 816, 817, 819, 820, 826, 834, 835, 836, 841, 842, 843, 844, 847, 848, 849, 852, 857, 858, 860, 861, 862, 863, 865, 871, 878], "highli": [0, 58, 834, 878], "imbalanc": 0, "normal": [0, 2, 4, 5, 8, 9, 10, 11, 15, 16, 21, 22, 23, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 69, 77, 78, 92, 100, 101, 109, 110, 371, 384, 387, 393, 399, 409, 410, 415, 416, 419, 420, 421, 431, 432, 513, 514, 515, 516, 517, 518, 519, 534, 537, 651, 654, 655, 715, 725, 752, 753, 755, 806, 807, 810, 828, 834, 856, 857, 863, 874, 876], "unifi": [0, 33, 35, 36, 43, 46, 47, 51, 58, 86, 225, 643, 837, 838, 839, 840, 844, 845, 849, 854, 855, 857, 863, 865, 867, 873, 875, 878], "write": [0, 23, 43, 44, 55, 59, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 341, 345, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 370, 371, 372, 379, 381, 384, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 429, 431, 432, 435, 436, 438, 439, 447, 448, 450, 453, 454, 455, 456, 462, 465, 466, 467, 468, 470, 471, 480, 481, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 552, 553, 557, 558, 559, 564, 565, 574, 588, 589, 627, 628, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 752, 753, 754, 755, 756, 758, 760, 761, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 789, 828, 833, 834, 836, 838, 839, 841, 842, 844, 845, 847, 848, 849, 853, 856, 858, 861, 865, 878], "code": [0, 1, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 31, 32, 39, 40, 43, 45, 46, 47, 48, 49, 50, 57, 58, 67, 68, 86, 90, 91, 115, 226, 272, 399, 541, 550, 558, 559, 574, 588, 592, 607, 643, 646, 648, 649, 651, 670, 691, 692, 693, 725, 826, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 853, 854, 856, 857, 858, 860, 863, 865, 866, 867, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880], "agnost": [0, 33, 34, 43, 44, 45, 49, 55, 840, 845, 852, 865, 867], "underli": [0, 33, 43, 44, 55, 69, 76, 92, 99, 112, 242, 245, 247, 282, 389, 390, 469, 486, 644, 649, 651, 697, 721, 843, 856, 863, 874, 878], "deep": [0, 8, 9, 23, 33, 40, 43, 55, 86, 557, 646, 828, 829, 830, 833, 834, 836, 839, 842, 843, 845, 851, 855, 858, 864, 878, 880], "develop": [0, 8, 9, 10, 11, 23, 27, 41, 43, 44, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 842, 844, 850, 859, 861, 867, 869, 871, 872, 874, 875, 878, 879, 880], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 61, 64, 65, 68, 69, 70, 73, 74, 76, 78, 79, 80, 86, 88, 91, 92, 93, 96, 97, 99, 101, 102, 103, 109, 110, 114, 115, 138, 148, 150, 153, 159, 213, 218, 220, 225, 249, 251, 252, 255, 259, 280, 281, 285, 290, 291, 295, 297, 302, 303, 304, 340, 342, 343, 344, 346, 349, 351, 352, 353, 357, 358, 363, 368, 371, 375, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 403, 404, 410, 411, 412, 413, 416, 421, 423, 431, 432, 441, 442, 446, 456, 457, 459, 463, 464, 465, 469, 470, 474, 475, 476, 486, 487, 488, 490, 496, 499, 503, 504, 513, 515, 520, 521, 522, 523, 524, 534, 539, 540, 541, 542, 543, 544, 546, 549, 550, 551, 560, 566, 571, 575, 586, 587, 596, 607, 619, 629, 641, 643, 644, 646, 647, 648, 649, 651, 653, 655, 656, 657, 671, 672, 673, 675, 678, 680, 684, 685, 686, 689, 690, 692, 695, 696, 699, 700, 704, 705, 706, 714, 715, 718, 722, 724, 734, 739, 744, 745, 746, 754, 755, 756, 759, 760, 761, 762, 764, 766, 786, 788, 791, 792, 793, 794, 799, 806, 809, 812, 813, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 874, 875, 876, 878, 879], "tensorflow": [0, 3, 14, 15, 16, 17, 18, 24, 25, 27, 31, 32, 33, 34, 37, 38, 39, 40, 43, 44, 45, 48, 49, 50, 55, 61, 68, 69, 70, 91, 92, 159, 206, 221, 236, 340, 381, 388, 442, 607, 641, 643, 646, 786, 799, 816, 828, 832, 833, 834, 835, 836, 839, 844, 845, 846, 850, 852, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 871, 872, 875, 876, 879], "pytorch": [0, 3, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 28, 29, 31, 32, 40, 43, 44, 55, 62, 295, 347, 348, 384, 644, 811, 828, 833, 834, 840, 845, 846, 849, 852, 853, 856, 857, 858, 863, 865, 866, 867, 868, 869, 871, 872, 874, 875, 879], "flexibl": [0, 843, 845, 852, 855, 861, 863, 872, 878, 880], "particularli": [0, 836, 867, 874], "research": [0, 8, 9, 43, 44, 57, 828, 871, 872, 875, 878], "where": [0, 1, 19, 20, 23, 35, 39, 46, 47, 51, 59, 65, 68, 69, 70, 74, 76, 78, 79, 82, 83, 86, 88, 91, 92, 93, 97, 99, 101, 102, 105, 106, 109, 110, 147, 148, 151, 153, 159, 240, 250, 252, 255, 257, 259, 260, 269, 274, 275, 276, 283, 284, 285, 290, 292, 296, 298, 302, 312, 314, 340, 342, 343, 344, 359, 363, 370, 379, 381, 384, 387, 388, 389, 390, 393, 394, 399, 401, 402, 403, 404, 410, 415, 416, 420, 435, 441, 442, 446, 447, 449, 450, 457, 463, 464, 465, 474, 475, 476, 490, 496, 513, 514, 515, 518, 520, 521, 523, 524, 534, 542, 543, 544, 574, 588, 626, 641, 644, 646, 648, 649, 651, 653, 655, 656, 659, 660, 673, 675, 680, 684, 685, 690, 692, 694, 695, 696, 699, 700, 703, 705, 714, 716, 717, 719, 725, 729, 737, 744, 753, 754, 755, 756, 761, 762, 777, 779, 781, 782, 783, 791, 806, 810, 822, 826, 828, 829, 832, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 867, 868, 874], "abil": [0, 835, 863, 867, 872, 878], "switch": [0, 43, 55, 799, 841, 849, 853, 854, 871], "differ": [0, 4, 5, 6, 7, 8, 9, 15, 16, 19, 20, 23, 24, 25, 26, 27, 31, 32, 36, 37, 38, 43, 44, 47, 48, 49, 50, 68, 69, 70, 74, 82, 86, 92, 93, 105, 114, 115, 124, 127, 177, 235, 252, 259, 260, 285, 301, 346, 353, 358, 359, 363, 384, 387, 388, 390, 399, 421, 432, 457, 463, 480, 487, 488, 502, 535, 536, 544, 564, 565, 638, 642, 644, 646, 648, 649, 651, 659, 671, 672, 687, 697, 715, 725, 772, 773, 778, 780, 781, 786, 791, 799, 808, 809, 828, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 871, 872, 874, 875, 876, 878, 880], "without": [0, 1, 4, 5, 26, 46, 55, 59, 62, 80, 86, 112, 598, 613, 646, 651, 653, 657, 721, 734, 764, 765, 766, 767, 791, 794, 821, 835, 836, 840, 841, 843, 844, 845, 846, 847, 849, 852, 853, 857, 860, 861, 863, 867, 872, 874, 878, 879], "chang": [0, 4, 5, 6, 7, 26, 33, 44, 57, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 387, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 638, 644, 651, 653, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 699, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 734, 745, 750, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 788, 828, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 847, 848, 850, 851, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 874], "codebas": [0, 8, 9, 23, 43, 44, 223, 224, 643, 829, 831, 838, 845, 851, 856, 857, 859, 860, 861, 871, 872, 880], "signific": [0, 26, 69, 389, 469, 862, 867, 871, 878], "advantag": [0, 8, 9, 23, 40, 43, 44, 828, 835, 836, 845, 856, 857, 868, 875, 878], "effect": [0, 8, 9, 23, 49, 65, 69, 71, 82, 92, 94, 105, 151, 389, 423, 468, 627, 635, 641, 647, 648, 659, 675, 779, 781, 791, 794, 834, 840, 843, 844, 848, 852, 856, 858, 863, 867], "analyz": [0, 834, 869], "done": [0, 5, 57, 59, 62, 649, 686, 833, 834, 835, 836, 839, 842, 844, 846, 847, 850, 851, 856, 857, 860, 874, 875, 878], "two": [0, 36, 47, 49, 55, 65, 69, 74, 80, 92, 93, 97, 114, 115, 135, 138, 144, 151, 157, 158, 159, 190, 198, 246, 260, 261, 295, 340, 341, 346, 359, 360, 362, 363, 365, 367, 374, 381, 384, 387, 388, 389, 390, 399, 416, 439, 440, 441, 450, 455, 464, 466, 470, 475, 496, 502, 506, 534, 544, 549, 640, 641, 642, 644, 646, 648, 649, 650, 651, 657, 673, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 711, 726, 764, 765, 766, 767, 791, 793, 799, 807, 834, 835, 839, 840, 845, 846, 847, 848, 853, 857, 858, 860, 863, 865], "distinct": [0, 69, 80, 92, 342, 343, 344, 381, 657, 764, 765, 766, 767, 831, 835, 843, 848, 855, 856, 857, 878], "one": [0, 4, 5, 8, 9, 14, 19, 20, 23, 24, 25, 27, 29, 35, 36, 39, 40, 43, 44, 46, 47, 59, 60, 61, 65, 69, 70, 73, 74, 76, 79, 80, 82, 86, 88, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 104, 105, 109, 138, 141, 151, 153, 154, 155, 165, 167, 225, 246, 252, 259, 260, 277, 283, 284, 285, 304, 314, 324, 327, 328, 346, 352, 355, 356, 359, 360, 363, 364, 365, 367, 368, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 399, 409, 411, 415, 416, 419, 420, 423, 431, 436, 438, 447, 456, 470, 474, 475, 476, 480, 486, 487, 488, 493, 495, 500, 503, 513, 514, 515, 520, 525, 535, 536, 539, 540, 541, 542, 543, 544, 546, 584, 588, 589, 591, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 641, 642, 643, 644, 646, 647, 648, 649, 651, 654, 656, 657, 659, 662, 663, 664, 665, 666, 667, 670, 687, 689, 690, 694, 696, 705, 706, 717, 718, 719, 722, 724, 728, 752, 759, 762, 764, 765, 766, 767, 772, 774, 791, 793, 810, 813, 816, 822, 825, 828, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 865, 867, 869, 875, 878, 879], "anoth": [0, 4, 5, 14, 33, 35, 36, 39, 40, 43, 44, 46, 47, 59, 60, 145, 165, 167, 641, 642, 828, 834, 835, 836, 841, 843, 845, 846, 849, 851, 853, 856, 857, 860, 865, 866, 869, 873, 874, 875, 878], "characterist": [0, 842], "clear": [0, 26, 207, 643, 834, 836, 841, 845, 846, 847, 857, 863, 865, 871, 878], "print": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 29, 33, 34, 36, 40, 43, 44, 45, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 164, 165, 166, 167, 169, 175, 176, 177, 178, 179, 182, 184, 185, 187, 192, 204, 205, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 223, 224, 226, 227, 228, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 321, 322, 323, 325, 332, 333, 340, 342, 346, 347, 348, 350, 365, 366, 371, 375, 379, 381, 384, 387, 388, 389, 390, 393, 399, 406, 407, 408, 409, 411, 412, 414, 416, 419, 421, 424, 425, 426, 429, 431, 432, 437, 440, 442, 444, 445, 455, 462, 465, 466, 467, 468, 469, 470, 471, 477, 479, 481, 492, 496, 501, 502, 504, 505, 506, 508, 512, 516, 517, 519, 534, 535, 536, 537, 544, 546, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 584, 585, 587, 588, 589, 593, 594, 595, 598, 601, 602, 603, 604, 605, 607, 609, 611, 612, 613, 617, 618, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 708, 709, 710, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 816, 821, 822, 826, 835, 836, 843, 845, 847, 858, 860, 862, 865, 866, 874, 876], "shape": [0, 4, 5, 6, 7, 12, 13, 15, 16, 18, 23, 26, 27, 29, 35, 36, 37, 38, 42, 43, 44, 49, 55, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 112, 113, 114, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 220, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 347, 348, 349, 350, 351, 353, 355, 356, 358, 360, 362, 364, 365, 366, 367, 371, 372, 374, 379, 381, 384, 387, 388, 389, 390, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 429, 431, 432, 433, 436, 437, 438, 439, 441, 442, 443, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 476, 477, 479, 481, 484, 489, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 552, 553, 557, 558, 559, 561, 564, 565, 568, 574, 581, 588, 589, 599, 608, 610, 622, 626, 627, 628, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 768, 769, 771, 772, 773, 774, 776, 778, 779, 781, 782, 783, 788, 791, 793, 806, 807, 810, 821, 826, 828, 836, 837, 843, 845, 846, 847, 848, 849, 850, 852, 856, 857, 858, 860, 861, 862, 865, 874, 875], "gain": [0, 26, 806, 836, 837, 839, 864, 871, 878], "descript": [0, 1, 2, 52, 53, 54, 59, 62, 65, 68, 69, 74, 91, 92, 97, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 341, 347, 348, 350, 353, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 496, 504, 508, 534, 537, 564, 568, 570, 572, 603, 612, 636, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 834, 836, 848, 855, 856], "describ": [0, 10, 11, 69, 82, 92, 110, 235, 252, 253, 285, 288, 290, 389, 394, 397, 469, 524, 527, 644, 648, 659, 675, 774, 778, 780, 830, 831, 834, 835, 836, 842, 844, 856, 857, 860, 865, 878], "obtain": [0, 43, 44, 62, 69, 92, 331, 381, 387, 427, 648, 675, 793, 857, 874], "mean": [0, 4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 69, 70, 73, 75, 76, 78, 82, 84, 86, 88, 92, 93, 96, 98, 99, 101, 105, 107, 109, 146, 225, 342, 352, 381, 384, 387, 388, 389, 390, 393, 394, 399, 416, 421, 439, 452, 464, 465, 466, 467, 468, 469, 470, 471, 481, 486, 496, 513, 515, 521, 540, 541, 558, 629, 630, 632, 637, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 655, 659, 663, 665, 666, 667, 669, 670, 671, 682, 708, 709, 710, 721, 730, 731, 732, 739, 754, 755, 791, 793, 794, 806, 807, 810, 828, 835, 836, 838, 839, 841, 843, 845, 846, 847, 853, 855, 856, 857, 860, 861, 863, 865, 866, 867, 869, 871, 875, 876, 878], "deviat": [0, 77, 78, 82, 100, 101, 105, 654, 655, 659, 752, 755, 779, 793, 806, 810, 839], "minimum": [0, 57, 68, 69, 70, 76, 79, 82, 91, 92, 93, 99, 102, 105, 232, 260, 287, 311, 343, 347, 348, 358, 379, 381, 384, 390, 399, 496, 532, 536, 542, 594, 595, 604, 605, 617, 618, 644, 646, 651, 656, 659, 714, 760, 775, 777, 791, 793, 794, 799, 845, 862], "maximum": [0, 68, 69, 70, 71, 76, 79, 82, 86, 91, 92, 93, 94, 99, 102, 105, 115, 225, 311, 347, 348, 359, 372, 379, 384, 387, 388, 390, 399, 403, 404, 414, 457, 460, 463, 496, 535, 537, 542, 552, 553, 561, 569, 633, 643, 644, 646, 647, 649, 651, 656, 659, 690, 714, 759, 760, 775, 777, 791, 793, 794, 799, 822, 836, 845, 847, 856], "quartil": 0, "overview": [0, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 842, 844, 858, 860], "instrument": 0, "unusu": 0, "might": [0, 8, 9, 10, 11, 21, 22, 23, 49, 70, 110, 191, 556, 642, 646, 832, 834, 835, 836, 844, 845, 847, 850, 851, 854, 857, 860, 861, 863, 865, 869], "indic": [0, 4, 5, 21, 22, 65, 69, 70, 73, 74, 76, 77, 79, 80, 81, 86, 88, 89, 92, 93, 96, 97, 99, 100, 102, 103, 104, 109, 112, 139, 140, 153, 157, 159, 180, 184, 185, 296, 340, 341, 342, 361, 381, 384, 387, 388, 389, 390, 395, 397, 406, 407, 408, 410, 414, 415, 416, 420, 421, 424, 425, 426, 427, 431, 432, 442, 463, 466, 474, 475, 476, 479, 482, 484, 486, 487, 488, 491, 495, 501, 502, 504, 505, 506, 508, 510, 511, 525, 526, 527, 549, 564, 565, 567, 588, 589, 593, 626, 629, 630, 641, 644, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 662, 664, 665, 666, 667, 670, 675, 692, 706, 717, 718, 719, 721, 722, 723, 724, 726, 728, 733, 736, 738, 740, 741, 742, 744, 748, 749, 750, 751, 752, 753, 759, 760, 761, 762, 764, 766, 768, 770, 771, 788, 789, 791, 793, 807, 813, 821, 822, 824, 835, 844, 852, 855, 857, 865, 866, 874], "000000": 0, "291022": 0, "std": [0, 4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 58, 73, 78, 82, 96, 101, 105, 394, 521, 648, 655, 659, 663, 665, 666, 667, 669, 670, 754, 755, 847, 876], "250": 0, "105092": 0, "min": [0, 55, 59, 66, 69, 70, 74, 82, 89, 92, 93, 97, 105, 157, 159, 177, 180, 284, 340, 343, 348, 381, 384, 388, 390, 442, 501, 542, 558, 588, 589, 604, 641, 642, 644, 646, 649, 659, 690, 696, 699, 700, 706], "650000": 0, "75": [0, 4, 5, 10, 11, 12, 13, 23, 55, 68, 69, 91, 92, 93, 96, 101, 131, 149, 238, 240, 252, 254, 265, 327, 360, 361, 381, 384, 430, 544, 559, 572, 604, 638, 641, 644, 646, 649, 653, 655, 662, 688, 694, 741, 756], "050000": 0, "max": [0, 55, 57, 66, 69, 70, 74, 82, 89, 92, 93, 97, 105, 177, 180, 283, 347, 384, 387, 388, 389, 390, 406, 407, 408, 424, 425, 426, 427, 429, 431, 442, 464, 501, 503, 504, 552, 553, 558, 574, 588, 589, 642, 644, 646, 649, 659, 690, 692, 695, 791, 807, 811, 844, 857], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 860], "receiv": [0, 5, 8, 9, 57, 61, 109, 548, 584, 646, 652, 730, 731, 732, 807, 826, 831, 835, 836, 845, 846, 860, 863], "anomali": 0, "financi": 0, "behavior": [0, 4, 5, 12, 13, 69, 80, 252, 259, 285, 294, 400, 545, 592, 616, 644, 646, 657, 764, 765, 766, 767, 834, 842, 843, 844, 845, 856, 857, 858, 860, 863, 865, 867], "associ": [0, 21, 22, 69, 74, 92, 97, 235, 285, 390, 399, 473, 537, 644, 649, 692, 695, 707, 788, 836, 845, 853, 854, 857, 858, 860, 867], "122": [0, 24, 25, 66, 180, 250, 644], "211321": 0, "256": [0, 4, 5, 12, 13, 21, 22, 23, 68, 93, 295, 296, 605, 648, 663, 665, 791], "683288": 0, "250000": 0, "105": [0, 23, 74, 96, 648, 649, 671, 672, 687, 694], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 8, 9, 10, 11, 57, 59, 69, 71, 75, 92, 94, 98, 387, 389, 393, 399, 401, 402, 406, 407, 408, 466, 467, 468, 469, 470, 471, 518, 534, 627, 628, 633, 647, 648, 650, 652, 675, 708, 730, 731, 806, 807], "across": [0, 1, 21, 22, 24, 25, 26, 37, 39, 40, 55, 69, 79, 86, 92, 93, 102, 114, 223, 224, 252, 259, 285, 303, 389, 393, 464, 515, 518, 549, 570, 606, 643, 644, 646, 648, 653, 656, 671, 675, 739, 759, 760, 807, 834, 839, 845, 847, 849, 852, 853, 855, 860, 863, 872, 878, 880], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 56, 57, 59, 60, 62, 64, 65, 69, 70, 73, 74, 76, 78, 83, 84, 86, 87, 88, 91, 92, 93, 96, 97, 99, 101, 106, 107, 109, 110, 138, 146, 153, 157, 158, 159, 213, 220, 252, 256, 284, 285, 340, 341, 353, 372, 381, 384, 387, 388, 389, 390, 399, 421, 430, 432, 433, 434, 442, 447, 457, 458, 460, 463, 464, 485, 496, 504, 510, 540, 546, 549, 566, 586, 587, 604, 611, 612, 626, 629, 641, 643, 644, 646, 647, 648, 649, 651, 652, 653, 655, 656, 660, 671, 674, 675, 680, 692, 697, 698, 701, 706, 718, 722, 724, 730, 731, 732, 733, 734, 735, 744, 745, 746, 747, 753, 756, 761, 786, 788, 791, 792, 793, 794, 806, 807, 813, 816, 822, 824, 826, 828, 829, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 874, 875, 878, 879, 880], "group": [0, 8, 9, 23, 69, 92, 390, 393, 510, 514, 648, 653, 661, 668, 669, 735, 826, 837, 839, 843, 845, 853, 857, 858], "calcul": [0, 4, 5, 26, 57, 68, 69, 70, 75, 82, 86, 91, 92, 93, 97, 98, 105, 115, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 250, 252, 255, 256, 257, 273, 274, 275, 276, 277, 278, 283, 284, 285, 290, 297, 298, 299, 301, 302, 303, 309, 319, 347, 348, 361, 371, 384, 387, 388, 389, 390, 393, 399, 406, 407, 408, 442, 464, 469, 496, 513, 515, 541, 581, 644, 646, 649, 650, 659, 686, 694, 697, 708, 709, 710, 711, 775, 776, 777, 778, 779, 780, 781, 791, 793, 806, 807, 810, 834, 848, 865, 874], "pictur": [0, 59, 828, 834, 865, 871], "vital": 0, "select": [0, 33, 43, 48, 61, 69, 82, 92, 105, 388, 390, 399, 442, 455, 504, 505, 508, 535, 536, 659, 772, 773, 834, 835, 836, 844, 850, 856, 860, 865, 866, 867, 872, 878], "guid": [0, 27, 40, 828, 829, 834, 835, 836, 842, 851, 857, 859], "recogn": [0, 59, 831, 837], "both": [0, 8, 9, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 29, 37, 39, 42, 43, 44, 48, 49, 56, 58, 65, 68, 69, 70, 73, 74, 88, 91, 92, 93, 96, 97, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 167, 183, 187, 190, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 341, 347, 348, 350, 351, 353, 358, 363, 381, 384, 387, 388, 390, 394, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 490, 496, 504, 507, 508, 520, 534, 537, 564, 568, 570, 572, 581, 603, 612, 636, 637, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 807, 828, 832, 834, 836, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 856, 857, 860, 863, 865, 867, 874, 875, 878, 880], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 59], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 7, 8, 9, 14, 23, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 62, 67, 69, 70, 76, 90, 92, 93, 99, 109, 110, 219, 226, 227, 231, 235, 252, 253, 259, 267, 268, 285, 288, 294, 296, 387, 390, 393, 411, 412, 413, 433, 474, 475, 476, 482, 484, 486, 487, 488, 489, 491, 495, 501, 502, 511, 513, 515, 547, 567, 574, 592, 643, 644, 646, 649, 651, 655, 697, 717, 718, 719, 721, 723, 724, 726, 728, 756, 834, 835, 836, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 865, 867, 874, 875, 876, 877, 878, 879, 880], "outnumb": 0, "address": [0, 43, 44, 69, 70, 92, 390, 504, 611, 646, 834, 836, 839, 840, 852, 859, 871, 877, 878, 880], "fair": 0, "dure": [0, 19, 20, 23, 24, 25, 35, 37, 43, 46, 48, 49, 67, 71, 82, 86, 90, 94, 105, 226, 387, 411, 412, 413, 592, 613, 627, 628, 633, 643, 646, 647, 648, 649, 652, 659, 671, 689, 730, 731, 732, 779, 781, 799, 810, 811, 826, 835, 843, 845, 846, 849, 853, 854, 856, 857, 858, 859, 860, 863, 867, 874, 878, 879], "similar": [0, 1, 8, 9, 23, 33, 43, 44, 69, 294, 389, 464, 644, 648, 650, 675, 711, 807, 832, 834, 835, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 860, 861, 867, 875], "here": [0, 2, 4, 5, 8, 9, 10, 11, 15, 16, 23, 26, 28, 30, 33, 38, 41, 42, 43, 44, 55, 57, 58, 59, 60, 62, 92, 295, 471, 644, 828, 832, 833, 834, 835, 836, 839, 841, 842, 843, 844, 845, 847, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 865, 866, 867, 874, 875, 876, 878, 879], "take": [0, 4, 5, 8, 9, 21, 22, 23, 33, 40, 42, 43, 44, 49, 55, 57, 60, 69, 74, 76, 82, 92, 99, 109, 134, 135, 137, 153, 292, 299, 314, 379, 387, 388, 390, 407, 415, 420, 425, 435, 444, 458, 479, 486, 505, 535, 536, 640, 641, 644, 648, 649, 651, 652, 675, 689, 693, 721, 732, 772, 791, 799, 806, 807, 821, 826, 828, 829, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 860, 863, 865, 866, 867, 868, 874, 875], "random": [0, 8, 9, 15, 16, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 57, 59, 60, 69, 73, 86, 92, 96, 335, 336, 337, 338, 339, 381, 388, 389, 446, 457, 463, 469, 520, 521, 522, 523, 524, 648, 671, 753, 754, 755, 756, 757, 758, 791, 793, 806, 821, 822, 828, 834, 846, 858, 860, 861, 875, 876, 878], "match": [0, 1, 66, 69, 86, 89, 92, 164, 259, 294, 351, 353, 384, 387, 389, 390, 432, 464, 479, 501, 505, 584, 642, 644, 646, 649, 685, 686, 690, 706, 786, 832, 834, 840, 842, 843, 847, 850, 858, 879], "prevent": [0, 69, 71, 82, 92, 94, 105, 389, 469, 569, 627, 628, 633, 646, 647, 648, 659, 671, 776, 780, 806, 811, 834, 836, 844, 845, 849, 856, 857, 861], "being": [0, 8, 9, 10, 11, 15, 16, 23, 43, 44, 55, 69, 86, 92, 107, 114, 118, 138, 388, 390, 452, 480, 496, 598, 641, 646, 648, 649, 673, 686, 788, 794, 806, 835, 836, 839, 840, 841, 843, 845, 846, 847, 850, 852, 854, 856, 857, 858, 860, 861, 863, 865, 867, 870, 872, 878, 879, 880], "bias": [0, 648, 673], "toward": [0, 69, 76, 92, 99, 259, 306, 357, 369, 384, 390, 399, 502, 537, 644, 651, 722, 828, 832, 834, 835, 850, 866, 878], "legit_sampl": 0, "n": [0, 26, 55, 58, 59, 60, 62, 65, 68, 69, 73, 74, 76, 78, 79, 82, 83, 91, 92, 96, 97, 99, 101, 102, 105, 106, 109, 114, 151, 157, 158, 159, 232, 302, 304, 340, 341, 353, 381, 384, 387, 388, 389, 390, 393, 394, 397, 399, 401, 402, 403, 404, 409, 410, 415, 416, 419, 420, 421, 429, 430, 431, 432, 434, 442, 443, 450, 454, 456, 458, 463, 464, 476, 482, 485, 489, 491, 502, 511, 513, 514, 515, 518, 520, 521, 522, 523, 524, 527, 534, 544, 641, 644, 648, 649, 651, 653, 655, 656, 659, 660, 661, 662, 663, 664, 666, 668, 670, 675, 680, 683, 687, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 703, 704, 705, 706, 716, 717, 719, 725, 729, 741, 754, 755, 756, 762, 776, 778, 779, 780, 781, 782, 783, 807, 810, 821, 838, 842, 844, 860, 875], "after": [0, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 43, 44, 58, 69, 70, 71, 73, 77, 86, 92, 93, 94, 96, 100, 198, 299, 316, 320, 369, 379, 384, 387, 388, 390, 410, 411, 412, 413, 430, 434, 455, 485, 496, 574, 628, 631, 633, 634, 635, 642, 644, 646, 647, 648, 653, 654, 661, 662, 663, 664, 666, 668, 670, 671, 744, 752, 811, 816, 834, 835, 836, 839, 841, 842, 844, 845, 847, 849, 852, 855, 858, 860, 866, 874, 875, 878], "combin": [0, 26, 49, 69, 86, 92, 115, 387, 399, 421, 432, 534, 562, 563, 646, 649, 680, 689, 836, 840, 843, 844, 845, 847, 849, 853, 860, 865, 872, 878], "them": [0, 3, 4, 5, 19, 20, 24, 25, 27, 29, 31, 43, 44, 49, 388, 458, 551, 587, 646, 791, 807, 830, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 849, 851, 854, 856, 857, 858, 860, 862, 865, 867, 869, 870, 871, 873, 874, 875, 876, 878], "achiev": [0, 19, 20, 24, 25, 26, 43, 829, 831, 837, 844, 845, 853, 854, 860, 863, 865, 869], "concaten": [0, 55, 69, 70, 76, 92, 97, 390, 481, 557, 561, 646, 648, 651, 675, 694, 715, 791, 858, 863, 866], "along": [0, 58, 63, 65, 68, 69, 70, 74, 75, 76, 78, 79, 81, 82, 83, 85, 86, 88, 91, 92, 93, 97, 98, 99, 101, 102, 104, 105, 106, 109, 110, 112, 125, 129, 134, 149, 150, 225, 299, 302, 304, 342, 343, 344, 347, 348, 352, 353, 368, 375, 381, 384, 385, 387, 388, 389, 390, 393, 399, 409, 415, 416, 419, 420, 421, 431, 432, 457, 468, 481, 482, 483, 485, 487, 488, 496, 501, 504, 506, 508, 516, 517, 518, 519, 535, 536, 537, 539, 540, 541, 542, 543, 544, 557, 564, 640, 641, 643, 644, 646, 649, 650, 651, 652, 655, 656, 658, 659, 660, 680, 694, 703, 705, 706, 708, 709, 710, 715, 718, 719, 720, 722, 723, 725, 727, 728, 730, 731, 732, 758, 759, 760, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 807, 834, 837, 838, 847, 856, 859, 861, 863, 865, 878], "axi": [0, 4, 5, 8, 9, 10, 11, 12, 13, 23, 26, 58, 59, 60, 63, 65, 68, 69, 70, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 88, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 125, 129, 149, 150, 153, 225, 299, 304, 347, 348, 352, 353, 361, 368, 384, 387, 389, 390, 393, 397, 399, 409, 410, 416, 419, 421, 431, 432, 468, 473, 481, 482, 483, 486, 487, 488, 491, 496, 501, 502, 504, 505, 506, 508, 510, 511, 516, 517, 519, 527, 532, 535, 536, 537, 539, 540, 541, 542, 543, 544, 557, 564, 626, 638, 641, 643, 644, 646, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 670, 680, 683, 690, 703, 705, 706, 708, 709, 710, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 758, 759, 760, 764, 766, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 793, 803, 807, 808, 813, 843, 845, 847, 849, 852, 853, 856, 857, 860, 863, 865], "result": [0, 1, 4, 5, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 29, 37, 39, 40, 43, 44, 55, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 191, 192, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 444, 445, 447, 448, 452, 453, 454, 455, 456, 458, 462, 465, 466, 467, 468, 470, 471, 473, 480, 481, 484, 486, 487, 488, 489, 490, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 552, 553, 557, 558, 559, 564, 565, 569, 574, 581, 588, 589, 627, 628, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 736, 739, 740, 742, 746, 750, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 793, 799, 813, 822, 826, 832, 834, 836, 839, 840, 842, 843, 844, 845, 847, 848, 850, 852, 853, 855, 856, 857, 858, 860, 861, 865, 866, 867, 874, 875, 876, 879], "new_dataset": 0, "now": [0, 1, 6, 7, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 59, 807, 808, 809, 828, 835, 839, 840, 841, 842, 843, 844, 845, 846, 850, 852, 854, 857, 858, 860, 861, 863, 865, 867, 874, 875, 876, 878], "equal": [0, 6, 7, 65, 66, 68, 69, 70, 74, 75, 76, 78, 80, 81, 82, 86, 89, 91, 92, 93, 97, 98, 99, 101, 104, 110, 114, 115, 144, 146, 147, 148, 154, 155, 164, 244, 246, 250, 255, 257, 266, 267, 288, 290, 295, 298, 299, 303, 342, 343, 344, 346, 363, 381, 384, 387, 388, 390, 393, 399, 410, 431, 458, 482, 491, 504, 508, 511, 516, 517, 519, 537, 546, 549, 626, 641, 642, 644, 646, 649, 650, 651, 655, 656, 657, 658, 659, 683, 691, 692, 695, 697, 703, 708, 714, 716, 721, 723, 729, 756, 762, 764, 765, 766, 767, 768, 771, 776, 778, 779, 780, 781, 799, 806, 807, 842, 843, 845, 847, 849, 858, 860], "unbias": [0, 69, 82, 92, 105, 399, 534, 659, 781], "concat": [0, 12, 13, 55, 60, 70, 76, 86, 99, 225, 561, 643, 646, 651, 729, 858, 863, 865, 874], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 23, 55, 63, 69, 71, 78, 85, 91, 94, 101, 125, 250, 298, 372, 384, 631, 638, 647, 649, 653, 656, 659, 694, 734, 745, 754, 756, 763, 774], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 291, 644], "03": [0, 8, 9, 26, 58, 65, 68, 70, 71, 91, 92, 94, 101, 150, 250, 275, 355, 356, 604, 605, 628, 633, 641, 644, 646, 647, 649, 688, 755], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 791], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 24, 25, 37, 39, 40], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 26, 35, 55, 68, 69, 82, 89, 91, 92, 101, 180, 234, 250, 298, 334, 381, 419, 642, 644, 649, 653, 659, 701, 741, 755, 774], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 6, 7, 26, 55, 68, 78, 89, 91, 92, 101, 115, 180, 247, 642, 649, 659, 701, 755, 756, 780], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 68, 96, 240, 648, 671, 672], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 5, 14, 19, 20, 24, 25, 26, 35, 36, 40, 43, 44, 55, 57, 58, 63, 78, 85, 94, 101, 130, 246, 387, 409, 419, 627, 631, 638, 644, 647, 649, 654, 655, 659, 690, 694, 752, 753, 754, 755, 756, 757, 774, 828, 865, 875], "53": [0, 17, 18, 26, 37, 55, 74, 78, 91, 96, 171, 227, 257, 430, 630, 632, 642, 643, 647, 649, 654, 687, 752, 756], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 15, 16, 19, 20, 24, 25, 27, 29, 39, 42, 43, 44, 49, 55, 56, 65, 69, 70, 92, 93, 109, 137, 149, 150, 334, 381, 387, 432, 561, 640, 641, 646, 648, 673, 674, 675, 822, 834, 836, 837, 839, 840, 842, 844, 845, 847, 848, 853, 855, 856, 857, 859, 863, 874, 875], "predictor": [0, 867], "label": [0, 8, 9, 10, 11, 23, 26, 57, 58, 59, 69, 75, 92, 98, 389, 464, 465, 467, 468, 469, 470, 471, 650, 708, 709, 710, 828, 834, 839, 857, 868, 878], "whether": [0, 31, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 139, 140, 146, 148, 153, 155, 161, 164, 165, 167, 170, 171, 172, 173, 174, 175, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 204, 208, 209, 211, 212, 214, 216, 219, 220, 222, 225, 226, 228, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 341, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 381, 384, 387, 388, 389, 390, 399, 406, 407, 408, 410, 411, 412, 413, 429, 431, 433, 435, 450, 452, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 480, 481, 482, 484, 486, 487, 488, 491, 495, 502, 504, 505, 506, 508, 511, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 588, 589, 590, 591, 593, 596, 597, 599, 600, 602, 603, 604, 605, 607, 609, 611, 612, 619, 620, 623, 625, 628, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 659, 660, 662, 663, 664, 665, 671, 672, 673, 674, 675, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 703, 708, 709, 710, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 739, 740, 741, 743, 744, 745, 746, 750, 751, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 786, 788, 791, 803, 804, 807, 808, 809, 810, 811, 821, 828, 829, 834, 835, 840, 843, 845, 847, 852, 856, 857, 860, 862, 863, 871, 874, 875], "x": [0, 4, 5, 12, 13, 15, 16, 17, 18, 23, 26, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 184, 185, 187, 192, 208, 209, 211, 213, 218, 219, 220, 224, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 340, 341, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 397, 398, 399, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 438, 439, 441, 443, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 477, 478, 480, 481, 483, 484, 486, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 593, 594, 595, 598, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 625, 626, 628, 629, 630, 632, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 736, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 807, 810, 813, 816, 819, 821, 826, 828, 832, 834, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 865, 866, 874, 875, 876], "y": [0, 26, 43, 44, 55, 56, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 161, 164, 165, 166, 175, 177, 180, 192, 205, 209, 213, 218, 219, 220, 224, 226, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 346, 347, 348, 354, 362, 363, 364, 365, 366, 371, 373, 375, 379, 381, 384, 387, 388, 389, 390, 393, 399, 407, 409, 411, 412, 416, 419, 421, 425, 431, 438, 442, 448, 455, 462, 464, 465, 467, 468, 469, 470, 471, 481, 483, 492, 496, 504, 505, 506, 508, 512, 516, 517, 519, 527, 533, 534, 535, 536, 537, 540, 542, 543, 544, 546, 549, 552, 553, 556, 557, 559, 560, 561, 564, 565, 566, 570, 572, 573, 574, 576, 577, 580, 581, 586, 593, 594, 595, 598, 601, 602, 604, 605, 607, 609, 611, 612, 613, 617, 618, 621, 624, 625, 626, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 667, 669, 670, 671, 672, 679, 680, 681, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 736, 739, 740, 742, 750, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 826, 841, 843, 846, 847, 855, 857, 858, 860, 861, 863, 866, 874], "upcom": 0, "phase": [0, 860, 867, 878], "drop": [0, 26, 59, 69, 92, 343, 381, 389, 390, 468, 505, 806, 807, 835, 867], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 303, 644], "length": [0, 8, 9, 21, 22, 57, 58, 65, 69, 75, 76, 86, 92, 98, 99, 109, 110, 115, 138, 146, 151, 326, 329, 330, 345, 353, 381, 384, 387, 388, 390, 394, 397, 409, 410, 415, 416, 419, 420, 421, 431, 432, 433, 435, 447, 456, 496, 505, 522, 527, 626, 641, 646, 648, 649, 650, 651, 657, 675, 699, 700, 708, 721, 764, 791, 807, 860], "valid": [0, 12, 13, 23, 57, 59, 69, 73, 83, 92, 96, 106, 109, 110, 169, 387, 388, 406, 407, 408, 424, 425, 426, 427, 429, 430, 434, 455, 463, 577, 642, 646, 648, 651, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 717, 725, 782, 783, 791, 792, 807, 821, 835, 841, 845, 847, 851, 855, 858, 860, 874, 879], "gener": [0, 1, 10, 11, 12, 13, 23, 31, 35, 40, 43, 44, 46, 49, 57, 59, 61, 62, 65, 68, 69, 73, 78, 84, 88, 91, 92, 96, 101, 107, 110, 138, 149, 150, 159, 167, 252, 255, 265, 266, 281, 285, 294, 324, 327, 331, 332, 333, 335, 336, 337, 338, 339, 340, 347, 348, 381, 384, 387, 388, 390, 394, 399, 431, 437, 459, 504, 522, 534, 641, 642, 644, 648, 649, 650, 651, 655, 659, 671, 697, 698, 701, 704, 713, 729, 753, 754, 756, 757, 779, 791, 794, 799, 811, 821, 834, 835, 836, 838, 839, 840, 842, 845, 846, 847, 848, 849, 852, 853, 856, 857, 858, 861, 864, 865, 866, 867, 869, 872, 878, 879, 880], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 47, 55, 57, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 177, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 341, 347, 348, 349, 350, 355, 356, 360, 362, 364, 365, 366, 367, 371, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 429, 431, 432, 436, 438, 439, 441, 442, 447, 448, 453, 454, 455, 456, 461, 465, 466, 467, 468, 469, 470, 471, 475, 476, 481, 482, 484, 489, 497, 498, 499, 500, 502, 504, 506, 508, 509, 516, 517, 519, 520, 521, 523, 524, 525, 527, 534, 535, 536, 537, 541, 545, 552, 553, 557, 558, 559, 564, 565, 574, 588, 589, 592, 627, 628, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 874, 876, 878, 880], "stratifi": 0, "paramet": [0, 8, 9, 10, 11, 26, 29, 40, 43, 44, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 218, 219, 220, 221, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 588, 589, 592, 593, 594, 595, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 793, 794, 799, 804, 806, 807, 808, 809, 810, 811, 812, 816, 817, 821, 822, 824, 826, 828, 834, 840, 848, 849, 852, 857, 858, 860, 861, 865, 874, 875, 876, 879], "test_siz": [0, 26, 57], "specifi": [0, 23, 39, 40, 43, 44, 48, 49, 50, 61, 63, 65, 66, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 82, 83, 85, 86, 89, 91, 92, 93, 96, 97, 98, 99, 101, 102, 105, 106, 109, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 142, 147, 149, 154, 157, 158, 160, 164, 166, 213, 218, 220, 224, 225, 226, 294, 303, 307, 312, 313, 315, 341, 346, 363, 368, 379, 381, 384, 387, 388, 389, 390, 394, 399, 406, 407, 408, 410, 416, 421, 431, 432, 433, 434, 442, 454, 456, 461, 464, 468, 469, 470, 472, 486, 489, 498, 499, 501, 502, 504, 508, 521, 532, 534, 535, 536, 539, 540, 544, 547, 564, 565, 567, 569, 570, 583, 585, 593, 626, 638, 641, 642, 643, 644, 646, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 673, 675, 678, 680, 682, 683, 685, 686, 690, 698, 701, 703, 704, 705, 706, 708, 709, 710, 714, 715, 716, 717, 718, 722, 724, 725, 728, 729, 737, 738, 740, 741, 748, 749, 750, 751, 754, 755, 756, 758, 759, 760, 762, 765, 766, 767, 768, 772, 773, 774, 776, 778, 780, 782, 783, 791, 794, 803, 807, 808, 809, 822, 826, 835, 838, 842, 845, 846, 852, 853, 854, 856, 857, 858, 860, 865, 874, 875, 876], "reserv": [0, 834], "x_train": [0, 26], "x_test": [0, 26], "y_train": [0, 26, 59], "y_test": [0, 26], "random_st": [0, 26, 388, 446], "With": [0, 4, 5, 8, 9, 23, 35, 46, 55, 63, 65, 66, 68, 69, 70, 71, 73, 74, 76, 79, 82, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 164, 165, 166, 167, 169, 175, 176, 177, 180, 187, 192, 193, 194, 195, 196, 206, 209, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 347, 348, 350, 352, 355, 356, 360, 363, 364, 365, 367, 368, 371, 379, 381, 384, 387, 388, 389, 390, 399, 409, 411, 412, 419, 431, 438, 439, 440, 442, 443, 444, 455, 458, 470, 486, 487, 488, 490, 493, 495, 496, 502, 504, 506, 508, 510, 525, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 550, 551, 552, 553, 556, 557, 558, 559, 560, 564, 565, 568, 570, 572, 573, 574, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 703, 704, 705, 708, 710, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 835, 845, 847, 857, 860, 863, 874, 878], "next": [0, 1, 8, 9, 10, 11, 12, 13, 23, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 50, 57, 59, 69, 92, 177, 360, 364, 369, 373, 384, 642, 806, 811, 834, 835, 836, 841, 845, 847, 848, 850, 851, 854, 878], "convers": [0, 68, 69, 92, 251, 291, 590, 600, 646, 808, 809, 828, 834, 866, 867, 869, 871, 872, 880], "becaus": [0, 37, 46, 48, 58, 69, 387, 410, 786, 835, 836, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 863, 865, 867, 878], "own": [0, 8, 9, 10, 11, 17, 23, 27, 29, 33, 43, 44, 49, 828, 835, 839, 844, 845, 848, 849, 856, 857, 861, 865, 867, 869, 871, 878, 880], "confirm": [0, 4, 5, 58, 831, 834], "been": [0, 8, 9, 10, 11, 23, 24, 25, 27, 29, 37, 39, 43, 44, 69, 70, 78, 92, 93, 101, 208, 295, 390, 503, 557, 558, 559, 643, 644, 646, 655, 753, 821, 822, 834, 836, 839, 841, 843, 844, 845, 846, 848, 849, 852, 853, 856, 860, 865, 866, 867, 874, 878], "correctli": [0, 1, 39, 43, 44, 57, 69, 74, 79, 92, 97, 102, 352, 384, 399, 540, 541, 542, 543, 544, 649, 656, 690, 759, 834, 835, 836, 840, 843, 845, 847, 849, 851, 852, 858, 860, 863, 867, 874, 875], "size": [0, 5, 12, 13, 26, 27, 29, 34, 37, 45, 46, 48, 49, 50, 57, 59, 62, 69, 70, 73, 74, 76, 78, 79, 86, 92, 93, 96, 97, 99, 101, 102, 109, 110, 114, 115, 146, 149, 223, 224, 225, 324, 327, 331, 342, 343, 344, 345, 352, 368, 375, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 399, 401, 402, 403, 404, 405, 406, 407, 423, 424, 425, 427, 428, 434, 435, 442, 445, 457, 463, 464, 466, 480, 482, 494, 504, 506, 508, 514, 515, 518, 522, 527, 539, 540, 541, 542, 543, 544, 583, 588, 641, 643, 646, 648, 649, 651, 655, 656, 660, 673, 675, 678, 680, 683, 687, 690, 694, 696, 699, 705, 717, 722, 723, 724, 753, 759, 762, 782, 783, 791, 793, 794, 807, 822, 856, 858, 860, 863, 874, 876], "correct": [0, 19, 20, 27, 29, 38, 49, 55, 57, 59, 82, 105, 198, 388, 459, 642, 651, 659, 714, 779, 781, 788, 791, 832, 834, 836, 838, 843, 844, 845, 846, 849, 850, 852, 853, 856, 858, 860, 875], "787": 0, "197": [0, 68, 240, 644], "success": [0, 23, 649, 659, 703, 778, 780, 831, 835, 844], "prepare_data": [0, 26], "list": [0, 1, 6, 7, 12, 13, 19, 20, 21, 22, 26, 59, 64, 65, 66, 68, 69, 70, 73, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 146, 148, 151, 152, 153, 155, 161, 165, 167, 180, 184, 185, 192, 208, 225, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 361, 362, 363, 369, 370, 371, 373, 374, 375, 384, 387, 388, 390, 397, 406, 407, 408, 410, 411, 412, 413, 424, 425, 426, 427, 431, 433, 437, 442, 446, 449, 456, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 480, 481, 482, 491, 502, 504, 505, 506, 508, 511, 513, 515, 516, 517, 519, 521, 526, 534, 535, 536, 537, 546, 548, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 566, 568, 570, 572, 573, 574, 576, 577, 580, 584, 588, 589, 603, 604, 605, 607, 609, 610, 611, 612, 613, 625, 626, 631, 636, 641, 642, 643, 644, 646, 648, 649, 651, 653, 654, 657, 658, 662, 663, 664, 665, 666, 667, 670, 671, 672, 675, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 701, 703, 708, 709, 710, 714, 715, 718, 721, 722, 723, 724, 725, 728, 729, 733, 734, 735, 736, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 769, 770, 772, 773, 776, 778, 779, 781, 782, 783, 786, 788, 791, 792, 793, 794, 799, 804, 807, 813, 821, 822, 826, 831, 833, 834, 835, 837, 839, 840, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 865, 867, 874, 878, 879], "tupl": [0, 26, 61, 64, 65, 66, 68, 69, 70, 73, 74, 76, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 112, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 139, 140, 146, 148, 152, 153, 155, 159, 161, 165, 166, 167, 178, 179, 180, 184, 185, 191, 192, 198, 208, 211, 212, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 328, 333, 337, 340, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 360, 361, 362, 363, 367, 368, 369, 370, 371, 373, 374, 375, 376, 381, 384, 386, 387, 388, 390, 393, 394, 395, 397, 399, 406, 407, 408, 410, 411, 412, 413, 415, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 441, 442, 446, 450, 452, 457, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 480, 481, 491, 496, 502, 504, 505, 506, 508, 510, 513, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 534, 535, 536, 537, 539, 540, 541, 542, 543, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 593, 603, 604, 605, 606, 607, 609, 610, 611, 612, 625, 626, 627, 628, 629, 631, 633, 636, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 701, 702, 703, 706, 708, 709, 710, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 748, 749, 750, 751, 753, 754, 755, 756, 758, 761, 762, 764, 765, 766, 767, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 806, 807, 809, 821, 822, 840, 845, 852, 853, 856, 858, 860, 865, 867, 874, 875, 876], "thei": [0, 1, 26, 50, 55, 60, 69, 74, 78, 80, 86, 97, 101, 103, 190, 304, 358, 384, 642, 644, 648, 649, 652, 655, 657, 673, 704, 730, 731, 753, 764, 786, 812, 833, 834, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 860, 861, 863, 865, 866, 867, 872, 874, 878], "dimension": [0, 65, 68, 69, 74, 76, 79, 82, 83, 86, 88, 91, 92, 97, 99, 105, 106, 114, 138, 144, 146, 151, 159, 304, 340, 347, 348, 381, 384, 387, 388, 390, 399, 415, 416, 420, 421, 431, 432, 439, 474, 475, 476, 480, 485, 486, 532, 544, 641, 644, 649, 651, 656, 659, 660, 680, 681, 687, 689, 692, 694, 695, 705, 706, 723, 759, 760, 762, 775, 776, 777, 778, 779, 780, 781, 782, 783, 853, 855, 860, 863, 865, 878], "reshap": [0, 4, 5, 43, 44, 59, 60, 69, 73, 74, 76, 86, 92, 96, 97, 99, 372, 384, 387, 388, 390, 406, 407, 408, 411, 424, 425, 426, 429, 438, 455, 480, 486, 626, 646, 648, 649, 651, 664, 666, 670, 690, 706, 856, 857, 860, 863, 865], "float32": [0, 4, 5, 12, 13, 21, 22, 26, 27, 29, 34, 35, 42, 55, 57, 58, 59, 65, 66, 69, 70, 73, 88, 89, 92, 93, 96, 105, 150, 153, 155, 161, 162, 163, 167, 171, 172, 175, 176, 177, 178, 181, 184, 185, 187, 192, 195, 201, 251, 265, 292, 345, 358, 381, 384, 387, 388, 389, 399, 409, 419, 432, 458, 464, 469, 537, 574, 611, 641, 642, 644, 646, 648, 649, 652, 664, 666, 667, 670, 697, 699, 700, 706, 731, 732, 788, 791, 792, 828, 845, 847, 858, 860, 861, 875, 876], "def": [0, 4, 5, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 61, 68, 91, 134, 236, 551, 640, 646, 652, 653, 731, 732, 739, 821, 828, 832, 834, 835, 839, 840, 843, 845, 846, 847, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 865, 866, 874, 875, 876], "isinst": [0, 12, 13, 26, 40, 43, 44, 849, 857, 860, 861, 865], "rang": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 23, 26, 43, 44, 55, 56, 57, 59, 65, 69, 82, 88, 92, 138, 149, 150, 299, 311, 319, 331, 379, 381, 388, 390, 399, 442, 454, 489, 497, 499, 504, 509, 535, 536, 537, 557, 626, 641, 644, 646, 657, 659, 764, 772, 773, 778, 780, 791, 793, 794, 806, 828, 831, 834, 845, 849, 853, 860, 865, 878], "len": [0, 8, 9, 10, 11, 12, 13, 23, 26, 57, 59, 65, 69, 74, 92, 97, 151, 328, 337, 338, 381, 387, 388, 399, 421, 432, 444, 447, 457, 463, 544, 641, 649, 685, 704, 843, 844, 849, 856, 857, 860, 865, 874], "expand_dim": [0, 8, 9, 26, 39, 43, 44, 59, 61, 76, 99, 648, 651, 670, 828, 857, 865, 875], "astyp": [0, 26, 27, 29, 34, 57, 58, 59, 66, 73, 89, 96, 642, 648, 664, 666, 667, 670, 828, 845, 856, 857, 863, 876], "els": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 26, 58, 59, 61, 62, 69, 70, 78, 91, 92, 101, 170, 171, 172, 173, 174, 186, 292, 296, 387, 388, 394, 433, 446, 457, 461, 463, 521, 556, 560, 642, 644, 646, 648, 653, 655, 674, 743, 746, 754, 755, 756, 786, 821, 822, 834, 835, 836, 839, 841, 845, 846, 849, 853, 856, 857, 858, 860, 861, 863, 865, 867, 879], "return": [0, 4, 5, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 793, 794, 798, 799, 804, 806, 807, 809, 811, 816, 817, 821, 822, 823, 824, 825, 826, 828, 835, 836, 840, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 874, 875, 876, 879], "defin": [0, 34, 40, 43, 44, 45, 65, 69, 70, 74, 88, 92, 93, 97, 112, 128, 153, 157, 158, 159, 235, 252, 259, 285, 286, 294, 296, 299, 312, 316, 320, 326, 329, 330, 331, 340, 341, 342, 343, 344, 347, 348, 350, 379, 381, 384, 387, 388, 390, 399, 423, 440, 496, 502, 537, 572, 573, 593, 638, 641, 644, 646, 648, 649, 659, 673, 680, 685, 686, 698, 775, 776, 777, 779, 834, 835, 840, 841, 844, 845, 848, 852, 855, 857, 858, 860, 861, 867, 869, 876, 878, 879, 880], "proper": [0, 828, 834, 857, 875], "adjust": [0, 57, 82, 105, 388, 459, 659, 779, 781, 816, 826], "comput": [0, 8, 9, 23, 39, 40, 42, 43, 44, 50, 51, 56, 57, 59, 63, 68, 69, 70, 71, 73, 74, 75, 80, 82, 85, 86, 91, 92, 93, 94, 96, 97, 98, 105, 109, 110, 112, 125, 129, 225, 235, 242, 245, 247, 252, 253, 254, 259, 260, 261, 263, 264, 270, 271, 272, 279, 280, 281, 282, 284, 285, 288, 293, 294, 312, 316, 320, 326, 329, 330, 342, 343, 344, 347, 348, 350, 354, 356, 359, 361, 362, 366, 368, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 397, 399, 406, 407, 408, 409, 410, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 432, 435, 436, 438, 440, 441, 442, 443, 445, 446, 448, 450, 453, 455, 457, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 490, 493, 506, 513, 515, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 552, 553, 597, 620, 627, 629, 630, 632, 636, 637, 643, 644, 646, 647, 648, 649, 650, 651, 653, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 679, 680, 684, 685, 686, 689, 690, 692, 694, 696, 698, 699, 701, 703, 705, 706, 708, 709, 710, 712, 713, 717, 739, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 788, 793, 807, 810, 822, 828, 835, 843, 844, 845, 853, 855, 857, 860, 862, 863, 865, 866, 867, 869, 871, 872, 874, 875, 877, 878, 879], "most": [0, 5, 8, 9, 14, 26, 33, 43, 44, 86, 88, 109, 112, 153, 388, 441, 597, 620, 641, 646, 649, 684, 685, 825, 828, 833, 834, 835, 840, 843, 844, 845, 846, 850, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 866, 867, 878, 879], "avail": [0, 2, 4, 5, 8, 9, 12, 13, 21, 22, 23, 37, 40, 43, 44, 59, 70, 93, 208, 214, 216, 217, 228, 558, 643, 646, 649, 700, 792, 826, 828, 835, 836, 843, 844, 845, 846, 848, 849, 857, 860, 863, 866, 867, 868, 872, 874, 875, 876], "cpu": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 37, 39, 40, 43, 57, 58, 59, 61, 62, 65, 67, 69, 78, 88, 90, 92, 101, 138, 144, 147, 149, 150, 153, 154, 155, 161, 205, 206, 208, 209, 210, 211, 216, 219, 221, 223, 226, 227, 229, 231, 388, 394, 450, 520, 521, 523, 524, 641, 643, 655, 753, 754, 755, 756, 788, 806, 807, 808, 809, 810, 811, 812, 826, 832, 835, 836, 842, 845, 846, 850, 857, 860, 867, 878], "gpu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 57, 59, 61, 62, 208, 210, 211, 214, 217, 219, 221, 223, 224, 227, 229, 231, 643, 826, 835, 836, 844, 846, 868, 878], "tpu": [0, 57, 206, 212, 221, 223, 228, 643, 826, 846, 878], "explicitli": [0, 649, 685, 686, 701, 788, 807, 808, 809, 832, 839, 840, 841, 843, 845, 848, 849, 850, 853, 854, 855, 856, 858, 860, 865, 867, 875, 878], "hardwar": [0, 4, 5, 57, 114, 118, 835, 863, 868, 878, 879, 880], "mai": [0, 1, 8, 9, 67, 68, 69, 74, 80, 81, 90, 91, 97, 104, 114, 115, 138, 145, 156, 226, 252, 253, 259, 264, 272, 280, 281, 285, 286, 288, 303, 347, 348, 384, 416, 556, 592, 641, 643, 644, 646, 649, 657, 658, 659, 697, 706, 764, 765, 766, 767, 768, 771, 775, 776, 777, 779, 791, 822, 833, 834, 835, 836, 839, 843, 844, 845, 849, 850, 853, 854, 855, 857, 858, 860, 863, 880], "vari": [0, 69, 80, 109, 110, 303, 416, 557, 644, 646, 649, 657, 696, 765, 766, 767, 822, 843, 847, 857, 860], "known": [0, 69, 92, 296, 388, 460, 462, 644, 806, 839, 844, 845, 857, 860, 872], "advanc": [0, 31, 55, 835, 837, 872, 880], "set_soft_device_mod": [0, 4, 5, 26, 29, 230, 643, 846], "section": [0, 1, 2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 63, 69, 80, 92, 124, 387, 390, 421, 432, 482, 491, 511, 657, 764, 765, 766, 767, 828, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 876, 877], "binari": [0, 8, 9, 26, 37, 40, 69, 70, 73, 75, 92, 96, 98, 242, 245, 247, 282, 302, 387, 389, 433, 468, 471, 644, 648, 650, 671, 675, 708], "logist": [0, 26], "gblinear": [0, 26], "booster": [0, 26], "linear": [0, 4, 5, 21, 22, 23, 29, 41, 43, 44, 55, 56, 57, 59, 62, 69, 70, 73, 85, 92, 93, 96, 122, 124, 126, 127, 130, 307, 311, 315, 317, 318, 319, 323, 365, 379, 384, 387, 390, 399, 423, 458, 496, 544, 561, 584, 638, 646, 648, 653, 675, 698, 740, 791, 793, 794, 806, 807, 828, 843, 848, 853, 854, 856, 857, 860, 863, 866, 875, 878, 880], "estim": [0, 69, 92, 361, 384, 399, 534, 826], "rate": [0, 69, 71, 92, 94, 387, 394, 429, 524, 628, 631, 633, 634, 635, 647, 648, 652, 673, 730, 731, 732, 811, 844], "fine": [0, 27, 29, 43, 44, 835, 836, 845, 847, 857], "tune": [0, 27, 29, 43, 44], "regular": [0, 58, 92, 388, 399, 450, 455, 538, 835, 857, 878], "term": [0, 8, 9, 23, 69, 92, 324, 331, 334, 381, 389, 468, 469, 648, 673, 674, 807, 822, 828, 836, 843, 865, 869, 878], "reg_lambda": [0, 26], "reg_alpha": [0, 26], "overfit": [0, 648, 671], "compil": [0, 8, 9, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 37, 40, 43, 44, 47, 60, 62, 303, 644, 799, 835, 857, 861, 866, 867, 869, 871, 875, 878, 879, 880], "param": [0, 19, 20, 24, 25, 26, 43, 57, 58, 59, 61, 86, 92, 93, 115, 547, 564, 565, 646, 813, 828, 875], "n_estim": [0, 26], "100": [0, 5, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 24, 25, 26, 55, 57, 59, 65, 68, 69, 88, 91, 92, 93, 96, 113, 150, 159, 246, 286, 299, 340, 363, 372, 381, 384, 387, 388, 390, 411, 412, 457, 463, 501, 565, 573, 589, 641, 644, 646, 649, 653, 688, 739, 844, 845, 860, 867, 874], "learning_r": [0, 10, 11, 23, 26], "base_margin": [0, 26], "none": [0, 4, 5, 8, 9, 12, 13, 19, 20, 23, 24, 25, 26, 43, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 180, 182, 183, 184, 185, 187, 189, 192, 204, 207, 208, 220, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 387, 388, 389, 390, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 580, 585, 588, 589, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 739, 740, 744, 745, 746, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 793, 794, 799, 803, 804, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 822, 826, 828, 832, 835, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 852, 853, 856, 857, 858, 860, 861, 863, 865, 866, 874, 875, 876], "xgb_cl": [0, 26], "better": [0, 19, 20, 26, 46, 55, 61, 62, 834, 838, 857, 858, 861, 863, 864], "ivy_cl": [0, 26], "effici": [0, 12, 13, 19, 20, 21, 22, 24, 25, 31, 32, 34, 35, 43, 44, 45, 46, 69, 74, 92, 97, 388, 389, 452, 468, 597, 620, 646, 649, 692, 828, 835, 836, 843, 853, 854, 856, 860, 862, 866, 867, 871, 872, 875, 878, 880], "fit": [0, 26, 76, 99, 651, 720, 834, 857, 865, 878], "magic": [0, 844], "durat": 0, "70": [0, 26, 55, 57, 69, 92, 93, 387, 409, 419, 565, 589, 649, 659, 694, 774], "m": [0, 5, 19, 20, 21, 22, 23, 24, 25, 26, 43, 56, 58, 60, 62, 65, 69, 74, 78, 91, 92, 97, 101, 114, 151, 157, 158, 159, 279, 340, 341, 381, 387, 388, 389, 390, 394, 410, 441, 446, 447, 449, 450, 465, 476, 487, 488, 502, 520, 521, 522, 523, 524, 641, 649, 653, 655, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 741, 754, 755, 756, 828, 835, 836, 838, 844, 866], "per": [0, 19, 20, 24, 25, 26, 35, 57, 59, 69, 73, 92, 96, 331, 381, 387, 388, 390, 406, 407, 408, 424, 425, 426, 427, 456, 503, 648, 662, 664, 665, 666, 667, 670, 675, 807, 836, 844, 854, 857], "loop": [0, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 35, 51, 84, 92, 107, 134, 137, 387, 433, 640, 652, 730, 731, 732, 841, 867, 874], "dev": [0, 4, 5, 19, 20, 21, 22, 24, 25, 26, 35, 57, 59, 62, 67, 86, 90, 213, 220, 643, 828, 835, 846, 850, 853, 868], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 57, 59, 60, 61, 69, 71, 92, 94, 393, 513, 515, 627, 628, 633, 647, 648, 652, 673, 730, 731, 732, 788, 789, 807, 808, 809, 810, 821, 828, 830, 834, 835, 838, 840, 841, 844, 846, 847, 849, 851, 852, 854, 857, 858, 865, 866, 867, 868, 874, 875, 876, 878, 879], "59": [0, 10, 11, 55, 68, 247, 399, 535], "04": [0, 8, 9, 23, 57, 58, 65, 71, 85, 89, 92, 94, 124, 125, 150, 177, 257, 594, 627, 628, 633, 638, 641, 642, 644, 646, 647, 791, 835, 860], "slowest": [0, 46, 69, 76, 92, 99, 390, 486, 651, 721], "took": [0, 19, 20, 91, 292], "87": [0, 26, 55, 94, 96, 246, 275, 399, 430, 535, 627, 644, 647, 791, 850], "longer": [0, 26, 835, 845, 856, 860, 872, 878], "than": [0, 10, 11, 15, 16, 17, 26, 42, 43, 44, 46, 49, 68, 69, 70, 73, 74, 76, 78, 79, 80, 82, 86, 91, 92, 93, 96, 97, 99, 101, 102, 103, 105, 114, 115, 138, 146, 177, 225, 233, 234, 237, 238, 240, 241, 244, 246, 248, 252, 258, 259, 273, 274, 275, 276, 283, 285, 290, 294, 296, 298, 299, 303, 304, 305, 314, 324, 346, 349, 363, 370, 381, 384, 387, 388, 389, 390, 399, 409, 410, 415, 416, 419, 420, 421, 431, 432, 436, 438, 457, 463, 464, 487, 488, 535, 536, 537, 576, 577, 580, 597, 620, 641, 642, 643, 644, 646, 648, 649, 651, 655, 656, 657, 659, 673, 678, 680, 689, 690, 691, 692, 695, 706, 714, 718, 724, 756, 762, 765, 766, 767, 772, 773, 778, 779, 780, 781, 807, 822, 832, 834, 836, 839, 843, 844, 845, 847, 849, 850, 856, 857, 858, 860, 861, 862, 863, 865, 867, 868, 878, 880], "fastest": [0, 46, 69, 76, 92, 99, 388, 390, 455, 486, 651, 721], "could": [0, 8, 9, 24, 25, 43, 44, 49, 80, 657, 764, 765, 766, 767, 834, 835, 836, 839, 844, 845, 847, 854, 856, 857, 858, 860, 865, 878], "intermedi": [0, 56, 878, 879, 880], "cach": [0, 5, 10, 11, 14, 21, 22, 24, 25, 37, 39, 40, 57, 59, 62, 207, 551, 643, 646, 796, 816, 851, 853, 856, 860], "400": [0, 26, 93, 96, 387, 411, 412, 565, 589, 646, 649, 688], "\u00b5": [0, 19, 20, 24, 25, 26, 35], "487": [0, 291, 644, 648, 672], "make": [0, 1, 4, 5, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 34, 43, 44, 45, 57, 61, 69, 92, 387, 431, 816, 828, 831, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 871, 875, 878, 879], "out": [0, 4, 5, 8, 9, 12, 13, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 55, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 175, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 429, 431, 432, 435, 436, 437, 438, 439, 440, 441, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 462, 465, 466, 467, 468, 470, 471, 477, 479, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 552, 553, 557, 558, 559, 561, 564, 565, 574, 584, 588, 589, 627, 628, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 857, 858, 859, 860, 861, 863, 865, 866, 868, 871, 872, 874, 875, 878], "respect": [0, 65, 68, 69, 71, 74, 91, 92, 94, 97, 109, 151, 232, 235, 240, 242, 244, 245, 246, 247, 252, 253, 259, 263, 264, 271, 272, 277, 279, 281, 282, 285, 288, 294, 298, 301, 302, 312, 361, 376, 379, 384, 386, 388, 390, 393, 444, 461, 473, 513, 515, 569, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 641, 644, 646, 647, 648, 649, 652, 661, 668, 669, 675, 680, 696, 699, 730, 731, 732, 788, 791, 806, 822, 833, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 852, 853, 855, 856, 857, 860, 861, 862], "kei": [0, 8, 9, 10, 11, 14, 19, 20, 23, 35, 36, 43, 44, 59, 61, 64, 69, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 153, 155, 161, 165, 167, 180, 184, 185, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 397, 411, 412, 413, 431, 464, 465, 466, 467, 468, 469, 470, 471, 480, 481, 502, 504, 506, 508, 513, 515, 516, 517, 519, 521, 527, 534, 535, 536, 537, 546, 547, 549, 550, 552, 553, 554, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 646, 648, 652, 653, 662, 663, 664, 665, 671, 672, 675, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 730, 731, 736, 742, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 791, 792, 798, 804, 807, 811, 828, 831, 842, 843, 844, 853, 856, 857, 858, 860, 875, 878], "precis": [0, 26, 69, 74, 92, 97, 177, 265, 285, 292, 299, 358, 384, 388, 399, 442, 534, 597, 620, 642, 644, 646, 649, 685, 686, 690, 697, 699, 700, 706, 799, 844, 857, 862, 863], "recal": [0, 26], "f1": [0, 26, 845], "score": [0, 26, 73, 96, 389, 471, 648, 676, 678, 828], "ivy_pr": [0, 26], "xgb_pred": [0, 26], "nxgbclassifi": [0, 26], "86": [0, 23, 26, 55, 78, 92, 101, 387, 399, 419, 535, 627, 647, 755, 756], "93": [0, 26, 55, 69, 91, 93, 101, 210, 299, 372, 384, 557, 558, 643, 646, 755, 756], "84": [0, 23, 55, 73, 82, 91, 101, 180, 210, 275, 642, 643, 649, 654, 659, 672, 694, 752, 755, 756, 774], "91": [0, 23, 55, 69, 96, 101, 372, 384, 430, 648, 649, 655, 659, 672, 694, 755, 774], "accuraci": [0, 8, 9, 26, 57, 59, 62, 387, 431, 845], "92": [0, 26, 55, 59, 69, 70, 101, 372, 384, 625, 635, 647, 649, 681, 755, 756], "macro": [0, 26], "avg": [0, 26, 387, 406, 408, 429], "weight": [0, 4, 5, 8, 9, 23, 26, 27, 29, 43, 44, 57, 58, 69, 71, 73, 75, 92, 94, 96, 98, 109, 110, 327, 331, 365, 381, 384, 387, 388, 399, 414, 447, 532, 534, 537, 627, 628, 631, 633, 634, 635, 647, 648, 650, 652, 672, 673, 674, 675, 678, 708, 732, 793, 806, 807, 809, 811, 826, 828, 843, 853, 860, 865, 880], "90": [0, 26, 55, 57, 59, 68, 69, 91, 92, 251, 291, 295, 372, 384, 390, 399, 502, 535, 644, 649, 659, 694, 774, 822], "summar": [0, 43, 44, 109, 860], "perfect": [0, 828], "fals": [0, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 29, 33, 34, 43, 46, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 208, 209, 214, 216, 219, 220, 222, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 352, 354, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 381, 384, 385, 387, 388, 389, 390, 393, 399, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 526, 527, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 584, 588, 589, 590, 593, 596, 597, 599, 600, 602, 603, 604, 605, 607, 609, 611, 612, 614, 619, 620, 622, 623, 625, 628, 629, 631, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 743, 744, 745, 746, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 791, 792, 793, 794, 799, 803, 804, 807, 808, 809, 811, 813, 816, 819, 821, 822, 823, 826, 828, 832, 835, 839, 841, 844, 845, 846, 847, 849, 850, 856, 857, 858, 860, 862, 863, 865, 874, 875], "posit": [0, 59, 61, 64, 68, 69, 70, 74, 75, 76, 91, 92, 93, 97, 98, 99, 109, 144, 146, 159, 177, 232, 233, 234, 238, 241, 252, 259, 266, 267, 273, 275, 285, 286, 293, 294, 298, 299, 303, 325, 340, 346, 351, 363, 381, 384, 388, 390, 439, 459, 470, 495, 504, 551, 561, 626, 639, 641, 642, 644, 646, 649, 650, 651, 655, 656, 660, 679, 682, 703, 708, 717, 722, 757, 762, 782, 783, 788, 791, 799, 804, 808, 809, 822, 834, 836, 839, 843, 857, 860, 861, 874], "excel": [0, 8, 9], "high": [0, 8, 9, 33, 43, 44, 62, 69, 73, 78, 92, 96, 101, 387, 430, 434, 597, 646, 648, 655, 661, 662, 663, 664, 666, 668, 670, 754, 756, 793, 831, 834, 849, 855, 857, 869, 872, 878, 880], "show": [0, 4, 5, 6, 7, 8, 9, 10, 11, 21, 22, 37, 43, 44, 45, 46, 48, 55, 57, 59, 60, 591, 600, 623, 646, 828, 834, 835, 836, 842, 844, 847, 851, 856, 857, 860, 862, 867, 874, 878], "trade": [0, 874], "off": [0, 23, 35, 46, 73, 74, 96, 97, 411, 412, 413, 648, 649, 671, 683, 703, 806, 807, 835, 850, 874], "wa": [0, 15, 16, 23, 43, 44, 49, 58, 69, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 112, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 153, 155, 161, 165, 167, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 370, 371, 373, 374, 375, 381, 384, 388, 411, 412, 413, 431, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 502, 504, 505, 506, 508, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 613, 625, 631, 636, 644, 646, 653, 659, 660, 662, 663, 664, 665, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 816, 828, 830, 836, 839, 841, 842, 844, 847, 853, 855, 857, 865, 872, 874, 875, 878], "overal": [0, 648, 671, 822, 843, 845, 846, 848, 874, 878], "slightli": [0, 26, 324, 381, 843, 857, 860, 865, 866], "lower": [0, 26, 59, 65, 68, 69, 74, 78, 91, 92, 97, 101, 144, 157, 283, 319, 325, 331, 340, 341, 379, 381, 399, 537, 538, 544, 641, 644, 649, 655, 679, 685, 686, 692, 756, 793, 806, 836, 845, 847, 857, 860, 865, 866, 867, 869, 878, 879], "good": [0, 33, 43, 44, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 860, 861, 863, 865], "due": [0, 35, 43, 44, 46, 60, 62, 285, 295, 390, 504, 644, 835, 839, 844, 849, 856, 857, 874, 875, 878], "97": [0, 21, 22, 26, 55, 69, 71, 91, 94, 101, 238, 372, 384, 631, 644, 647, 755], "suggest": [0, 1, 8, 9, 23, 834, 835, 836, 842, 845, 851, 855, 857, 860, 861, 862], "slight": [0, 43, 44, 845, 860], "edg": [0, 61, 69, 76, 92, 99, 331, 381, 387, 390, 399, 423, 496, 537, 651, 714, 716, 729, 794, 839, 860, 871, 875, 878], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 8, 9, 19, 20, 23, 43, 44, 47, 48, 49, 50, 388, 448, 828, 836, 843, 845, 849, 853, 860, 864, 867, 869, 875], "design": [0, 1, 8, 9, 26, 33, 43, 92, 259, 324, 329, 330, 381, 644, 828, 831, 838, 842, 844, 845, 856, 857, 858, 859, 863, 867, 878], "heatmap": 0, "seaborn": [0, 59], "aesthet": 0, "appeal": 0, "eas": [0, 855, 872, 878], "plot_classification_report": 0, "argument": [0, 8, 9, 15, 16, 23, 37, 39, 40, 43, 44, 46, 48, 49, 50, 55, 57, 59, 61, 64, 65, 68, 69, 70, 74, 86, 87, 91, 92, 93, 109, 110, 115, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 167, 183, 187, 192, 221, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 340, 341, 347, 348, 350, 353, 355, 356, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 424, 425, 426, 431, 433, 435, 442, 496, 504, 508, 534, 537, 541, 547, 548, 550, 551, 556, 558, 559, 564, 568, 570, 572, 574, 584, 588, 589, 603, 607, 612, 613, 626, 636, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 739, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 799, 804, 807, 808, 809, 816, 821, 824, 828, 834, 838, 839, 840, 841, 842, 843, 847, 848, 851, 853, 858, 860, 861, 863, 865, 866, 869, 874, 875, 876, 878], "plot": [0, 8, 9, 10, 11, 23, 26, 58, 878], "color": [0, 14, 42, 58, 86, 115, 827, 828], "represent": [0, 61, 69, 70, 86, 92, 93, 115, 162, 163, 177, 180, 205, 206, 232, 235, 242, 245, 247, 252, 259, 282, 285, 287, 302, 328, 360, 364, 369, 373, 381, 384, 547, 609, 639, 642, 643, 644, 646, 791, 793, 794, 807, 845, 879, 880], "easi": [0, 1, 43, 44, 57, 835, 836, 840, 841, 843, 853, 855, 858, 860, 863, 878], "assess": [0, 35, 46, 834, 863], "side": [0, 81, 104, 362, 384, 388, 458, 658, 770, 791, 807, 821, 822, 835, 836, 842], "pyplot": [0, 8, 9, 10, 11, 23, 26, 57, 58, 59, 62], "plt": [0, 8, 9, 10, 11, 23, 26, 57, 58, 59, 62], "sn": 0, "model_nam": [0, 8, 9, 59], "ax": [0, 23, 58, 63, 69, 74, 76, 79, 82, 83, 85, 92, 97, 99, 102, 105, 106, 114, 118, 125, 129, 225, 347, 348, 352, 353, 368, 375, 384, 385, 387, 388, 390, 393, 399, 416, 421, 432, 458, 495, 496, 502, 516, 539, 540, 541, 542, 543, 544, 557, 626, 643, 646, 649, 651, 656, 659, 660, 680, 690, 698, 701, 702, 706, 716, 718, 719, 722, 724, 726, 729, 759, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 793, 807, 845, 847, 860, 861, 865], "iloc": 0, "t": [0, 1, 5, 6, 7, 8, 9, 10, 11, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 43, 44, 49, 55, 57, 58, 59, 69, 73, 84, 92, 96, 107, 109, 110, 114, 361, 376, 384, 386, 388, 442, 574, 592, 607, 629, 646, 647, 648, 653, 672, 674, 741, 786, 807, 828, 830, 831, 834, 835, 836, 838, 840, 841, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 860, 861, 863, 865, 867, 868, 874, 875, 876, 878], "annot": [0, 852], "fmt": 0, "2f": [0, 6, 7, 19, 20, 23], "cmap": 0, "blue": 0, "set_titl": [0, 23, 58, 59], "f": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 43, 44, 56, 57, 59, 69, 76, 92, 99, 314, 331, 379, 381, 390, 486, 507, 651, 653, 721, 736, 740, 741, 742, 745, 750, 751, 829, 836, 838, 843, 844, 849, 861, 865, 866], "figur": [0, 23, 58, 862], "fig": [0, 23, 58, 59], "ax1": [0, 59], "ax2": [0, 59], "subplot": [0, 23, 58, 59], "figsiz": [0, 58, 59], "tight_layout": [0, 59], "observ": [0, 26, 69, 92, 399, 533, 534, 836, 845, 849, 866, 874], "exhibit": [0, 46], "strong": [0, 793, 867, 878], "commend": 0, "impli": [0, 80, 657, 764, 765, 766, 767, 860], "neg": [0, 63, 68, 69, 74, 76, 78, 83, 85, 91, 92, 97, 99, 101, 106, 109, 124, 127, 130, 138, 144, 146, 159, 252, 259, 266, 267, 285, 286, 294, 299, 307, 325, 340, 343, 379, 381, 388, 389, 390, 394, 439, 446, 452, 469, 504, 508, 524, 638, 641, 644, 649, 651, 655, 660, 680, 682, 699, 703, 705, 706, 715, 717, 718, 722, 755, 782, 783, 791, 793, 803, 843, 856], "depend": [0, 5, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 48, 65, 66, 69, 70, 74, 80, 81, 89, 92, 97, 104, 105, 135, 141, 164, 232, 233, 234, 237, 238, 239, 240, 249, 250, 252, 255, 257, 273, 274, 275, 276, 285, 287, 290, 297, 298, 302, 303, 371, 384, 387, 388, 433, 441, 459, 607, 640, 641, 642, 644, 646, 648, 649, 656, 658, 673, 684, 685, 696, 697, 698, 699, 763, 768, 771, 781, 830, 832, 834, 835, 836, 842, 845, 846, 848, 850, 854, 856, 857, 858, 859, 860, 863, 865, 866, 867, 868, 874, 878, 879], "applic": [0, 8, 9, 29, 31, 57, 59, 62, 69, 73, 92, 96, 112, 388, 463, 648, 649, 653, 659, 675, 678, 703, 739, 740, 741, 745, 746, 778, 780, 828, 835, 844, 845, 846, 854, 872, 878], "conclus": 0, "appear": [0, 390, 487, 488, 626, 646, 835, 836, 839, 857, 863, 874], "outperform": [0, 26], "especi": [0, 10, 11, 835, 841, 851, 878], "increas": [0, 19, 20, 24, 25, 26, 35, 43, 46, 69, 74, 76, 92, 97, 99, 112, 390, 399, 496, 537, 649, 651, 704, 716, 729, 793, 845, 849, 857, 861, 863, 874, 878], "context": [0, 337, 381, 585, 646, 834, 835, 836, 841, 845, 846, 847], "specif": [0, 8, 9, 10, 11, 23, 33, 34, 39, 40, 43, 44, 45, 47, 49, 57, 67, 69, 70, 90, 92, 93, 192, 223, 226, 259, 280, 281, 290, 334, 347, 348, 381, 384, 390, 394, 504, 524, 557, 558, 559, 585, 642, 643, 644, 646, 649, 651, 652, 655, 658, 659, 685, 686, 701, 725, 730, 731, 732, 753, 770, 775, 776, 777, 779, 786, 788, 808, 809, 816, 817, 824, 826, 828, 831, 832, 834, 835, 836, 839, 840, 841, 842, 843, 845, 846, 849, 851, 852, 853, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 874, 875, 876, 879, 880], "problem": [0, 10, 11, 23, 828, 831, 834, 836, 839, 840, 846, 857, 871], "domain": [0, 233, 234, 237, 238, 239, 240, 249, 250, 255, 257, 273, 274, 276, 297, 298, 299, 302, 303, 371, 384, 644, 848, 878], "repo": [1, 27, 57, 833, 836, 839, 842, 844, 845, 850, 858, 860], "hold": [1, 69, 70, 74, 82, 92, 97, 105, 109, 110, 346, 363, 368, 384, 399, 482, 511, 535, 536, 541, 588, 589, 646, 649, 659, 690, 773, 789, 837, 879], "exampl": [1, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 33, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 406, 407, 408, 409, 411, 412, 414, 415, 416, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 453, 455, 458, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 495, 496, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 516, 517, 519, 522, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 799, 816, 821, 822, 826, 828, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 856, 857, 861, 865, 866, 867, 872, 879], "tab": [1, 834, 835, 844, 850], "ivi": [1, 2, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 45, 46, 47, 48, 49, 50, 51, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 838, 839, 841, 843, 845, 846, 848, 850, 851, 852, 853, 854, 856, 863, 864, 867, 869, 871, 872, 873, 877], "web": 1, "relev": [1, 65, 88, 150, 641, 811, 834, 835, 836, 840, 843, 844, 845, 847, 850, 854, 855, 858, 859, 860, 868], "link": [1, 33, 43, 44, 58, 834, 835, 836, 842, 844, 845, 851, 857, 875], "open": [1, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 39, 43, 44, 57, 58, 59, 60, 70, 78, 101, 138, 641, 655, 754, 756, 828, 829, 830, 831, 835, 836, 837, 842, 845, 848, 850, 857, 858, 863, 874, 875, 878, 880], "avil": 1, "discuss": [1, 834, 836, 842, 845, 846, 856, 857, 859, 860, 863, 867, 879], "comprehens": [1, 31, 836, 839, 859, 880], "possibl": [1, 4, 5, 49, 65, 69, 88, 92, 99, 109, 140, 259, 302, 324, 347, 348, 381, 384, 387, 389, 390, 410, 465, 474, 475, 476, 482, 484, 486, 487, 488, 495, 511, 584, 644, 646, 648, 659, 671, 717, 718, 719, 721, 723, 724, 726, 728, 775, 777, 791, 807, 819, 822, 825, 829, 832, 834, 835, 836, 839, 842, 843, 845, 847, 848, 850, 851, 853, 855, 856, 857, 858, 860, 863, 865, 867, 878], "us": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 105, 107, 109, 110, 112, 115, 122, 150, 153, 164, 176, 178, 179, 190, 191, 211, 212, 214, 219, 223, 224, 225, 226, 228, 231, 237, 245, 273, 274, 276, 277, 279, 280, 281, 283, 284, 286, 295, 299, 304, 324, 326, 327, 329, 330, 331, 339, 361, 364, 365, 368, 381, 384, 387, 388, 389, 390, 393, 394, 395, 397, 399, 406, 407, 408, 410, 411, 412, 413, 414, 416, 421, 423, 424, 425, 426, 429, 431, 432, 433, 435, 440, 442, 446, 452, 454, 456, 457, 459, 460, 461, 463, 464, 469, 486, 490, 494, 496, 504, 508, 513, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 534, 541, 544, 562, 563, 572, 573, 584, 585, 592, 594, 595, 597, 604, 605, 617, 618, 620, 627, 628, 633, 634, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 659, 672, 673, 675, 678, 683, 685, 692, 696, 700, 703, 706, 708, 720, 721, 722, 726, 730, 731, 732, 733, 735, 736, 742, 743, 744, 746, 753, 754, 755, 756, 758, 759, 760, 761, 764, 766, 774, 776, 789, 791, 792, 793, 794, 799, 803, 804, 806, 807, 808, 809, 810, 811, 816, 821, 822, 826, 829, 831, 833, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 876, 878, 879, 880], "attract": 1, "visual": [1, 8, 9, 10, 11, 26, 61, 826, 835, 850, 857, 860, 867, 878], "graph": [1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 26, 31, 32, 35, 37, 39, 40, 44, 50, 51, 56, 61, 62, 80, 657, 764, 765, 766, 767, 799, 828, 843, 853, 857, 859, 863, 867, 869, 871, 873, 874, 875, 876, 877, 878], "nice": [1, 860, 878], "etc": [1, 46, 51, 58, 65, 69, 78, 80, 84, 88, 92, 101, 107, 141, 149, 150, 153, 387, 394, 416, 421, 432, 520, 521, 523, 524, 641, 655, 657, 753, 754, 755, 756, 764, 765, 766, 767, 791, 794, 806, 807, 808, 809, 810, 811, 812, 828, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 847, 849, 852, 857, 858, 860, 861, 866, 867, 868, 869, 874, 878], "tone": [1, 6, 7], "feel": [1, 8, 9, 10, 11, 23, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 871, 872, 874], "free": [1, 8, 9, 10, 11, 12, 13, 23, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 871, 872, 874, 879], "emoji": [1, 834], "don": [1, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 43, 44, 57, 59, 84, 107, 828, 834, 835, 836, 844, 845, 846, 851, 855, 860, 863, 867, 874], "keep": [1, 2, 27, 29, 33, 39, 40, 43, 69, 76, 86, 92, 99, 109, 112, 372, 388, 463, 651, 728, 833, 834, 835, 836, 839, 842, 843, 844, 849, 856, 857, 860, 861, 863, 866, 868, 875], "thing": [1, 10, 11, 40, 55, 57, 821, 833, 834, 835, 836, 841, 857, 860, 863, 878], "super": [1, 4, 5, 12, 13, 27, 29, 43, 44, 57, 69, 92, 388, 442, 828, 849, 866, 875], "seriou": 1, "given": [1, 4, 5, 10, 11, 14, 33, 42, 43, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 138, 142, 149, 150, 170, 171, 172, 173, 174, 186, 191, 210, 219, 223, 224, 225, 227, 231, 304, 334, 343, 346, 352, 353, 361, 362, 363, 365, 368, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 408, 409, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 432, 442, 447, 462, 466, 467, 468, 470, 471, 472, 473, 483, 484, 485, 492, 494, 506, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 534, 535, 536, 537, 543, 565, 569, 588, 589, 599, 627, 628, 631, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 707, 708, 709, 710, 714, 717, 718, 719, 720, 722, 723, 727, 728, 740, 741, 750, 751, 754, 755, 756, 758, 770, 771, 772, 773, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 866, 872], "intern": [1, 26, 86, 117, 118, 119, 653, 733, 743, 744, 806, 807, 808, 809, 810, 812, 837, 840, 843, 846, 848, 856, 858, 860, 862], "releas": [1, 8, 9, 58, 834, 835, 845, 861, 863, 867, 878], "tracer": [1, 4, 5, 12, 13, 21, 22, 24, 25, 31, 32, 34, 37, 39, 40, 44, 60, 62, 857, 865, 867, 868, 869, 875, 876, 877], "around": [1, 27, 29, 69, 86, 92, 115, 390, 496, 504, 834, 836, 839, 840, 842, 846, 852, 853, 857, 860, 861, 867, 869, 874, 878], "corner": [1, 69, 92, 387, 423, 835, 836, 850, 857], "anybodi": 1, "abl": [1, 4, 5, 8, 9, 10, 11, 12, 13, 23, 38, 45, 49, 60, 62, 86, 109, 835, 836, 837, 839, 845, 850, 853, 856, 857, 861, 866, 870, 874], "start": [1, 2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 65, 69, 86, 88, 92, 96, 138, 146, 149, 150, 365, 375, 384, 385, 387, 390, 399, 430, 486, 489, 497, 499, 509, 543, 641, 793, 821, 826, 829, 834, 835, 836, 837, 838, 844, 845, 847, 848, 850, 851, 852, 857, 860, 863, 865, 867, 874, 875, 878], "shortli": 1, "so": [1, 2, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 55, 57, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 112, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 384, 387, 390, 397, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 648, 653, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 699, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 744, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 822, 828, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 863, 865, 867, 872, 874, 875, 876, 878, 879], "worri": [1, 43, 44, 834, 835, 851, 872], "about": [1, 31, 32, 33, 36, 38, 40, 42, 43, 44, 47, 58, 59, 66, 89, 177, 180, 642, 826, 828, 830, 833, 834, 835, 836, 837, 838, 839, 842, 844, 845, 846, 851, 852, 856, 858, 859, 860, 861, 862, 863, 864, 867, 872, 876, 879], "transpil": [1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 31, 32, 34, 35, 46, 798, 799, 834, 835, 849, 850, 857, 864, 868, 869, 870, 871, 873, 874, 876, 878, 880], "style": [1, 26, 57, 59, 390, 496, 656, 762, 836, 851, 878], "stori": 1, "anyon": [1, 829, 836, 844, 867], "ha": [1, 4, 5, 8, 9, 12, 13, 17, 21, 22, 23, 24, 25, 26, 27, 29, 33, 35, 39, 43, 44, 46, 49, 51, 55, 62, 65, 69, 74, 76, 80, 82, 86, 89, 92, 93, 97, 99, 103, 105, 109, 151, 208, 232, 252, 255, 257, 259, 269, 285, 287, 292, 295, 297, 298, 302, 342, 343, 344, 381, 388, 389, 390, 399, 423, 458, 468, 479, 503, 505, 510, 533, 535, 536, 538, 570, 641, 643, 644, 648, 649, 651, 656, 657, 659, 674, 675, 689, 690, 698, 699, 701, 703, 706, 717, 724, 762, 765, 766, 767, 772, 773, 776, 778, 779, 780, 781, 788, 791, 794, 816, 828, 834, 836, 839, 841, 842, 843, 844, 845, 846, 847, 848, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 871, 872, 874, 876, 878, 880], "question": [1, 8, 9, 10, 11, 23, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 871, 872], "ping": 1, "me": [1, 836], "guillermo": 1, "commun": [1, 8, 9, 10, 11, 23, 58, 829, 834, 835, 836, 837, 867, 872, 878, 880], "ux": 1, "team": [1, 828, 829, 831, 834, 835, 836, 837, 857, 868], "discord": [1, 8, 9, 10, 11, 23, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 868, 871, 872], "channel": [1, 40, 59, 69, 70, 73, 92, 93, 96, 387, 393, 411, 412, 413, 423, 513, 514, 515, 518, 557, 561, 646, 648, 650, 662, 663, 664, 665, 666, 667, 670, 711, 807, 810, 836, 842, 850, 859], "templat": [1, 828, 842, 848, 860], "locat": [1, 59, 153, 399, 535, 641, 653, 655, 658, 737, 753, 770, 822, 834, 836, 841, 842, 846, 857, 858, 860, 861, 868], "asset": [1, 869], "01_templat": 1, "ipynb": 1, "pleas": [1, 5, 49, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 868], "copi": [1, 59, 62, 65, 66, 67, 68, 69, 70, 76, 86, 88, 89, 90, 91, 92, 93, 99, 109, 113, 139, 140, 141, 145, 156, 164, 226, 286, 390, 472, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 511, 567, 593, 604, 611, 612, 641, 642, 643, 644, 646, 651, 653, 658, 717, 718, 719, 721, 723, 724, 726, 728, 734, 769, 771, 799, 822, 835, 836, 839, 841, 844, 845, 848, 857, 858, 865, 867, 874, 875, 876], "firstli": [1, 34, 35, 45, 46, 50, 55, 840, 845, 847, 848, 849, 853, 854, 856, 863], "file": [1, 5, 8, 9, 10, 11, 14, 23, 57, 58, 59, 70, 86, 601, 624, 646, 809, 826, 830, 834, 835, 836, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 853, 857, 858, 859, 860, 861, 865, 868, 878, 879, 880], "topic": [1, 31, 34, 35, 36, 45, 46, 47, 48, 49, 50, 854, 878], "Then": [1, 62, 648, 675, 830, 834, 835, 836, 841, 842, 844, 850, 851, 854, 856, 860, 861, 867], "place": [1, 10, 11, 21, 22, 24, 25, 37, 39, 40, 57, 64, 65, 68, 69, 70, 74, 76, 86, 88, 90, 91, 92, 93, 97, 99, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 167, 183, 187, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 324, 325, 328, 340, 341, 346, 347, 348, 350, 353, 354, 355, 356, 360, 362, 363, 364, 365, 367, 368, 369, 373, 374, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 486, 496, 501, 504, 508, 521, 534, 537, 541, 550, 558, 559, 564, 568, 570, 572, 573, 574, 588, 592, 603, 607, 612, 616, 636, 641, 642, 643, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 811, 828, 832, 833, 836, 838, 839, 842, 843, 844, 846, 847, 848, 850, 852, 853, 857, 858, 860, 861, 863, 869], "folder": [1, 5, 21, 22, 24, 25, 37, 39, 40, 59, 835, 836, 839, 842, 844, 850, 853, 857, 860, 861, 862], "edit": [1, 834, 835, 836, 851, 866], "titl": [1, 23, 26, 28, 30, 41, 58, 61, 828, 834, 836, 842], "accordingli": [1, 69, 74, 79, 80, 82, 83, 92, 97, 102, 105, 106, 151, 252, 257, 259, 275, 285, 299, 347, 348, 384, 641, 644, 649, 656, 657, 659, 660, 706, 760, 764, 765, 766, 767, 775, 776, 777, 778, 779, 780, 781, 782, 783, 857, 865, 868], "render": [1, 842, 848], "webpag": [1, 31], "content": [1, 2, 23, 28, 30, 41, 43, 58, 59, 69, 86, 92, 399, 541, 834, 836, 842, 846, 856, 859, 865], "behind": [1, 33, 43, 828, 838, 852, 860, 864], "exist": [1, 33, 43, 44, 57, 58, 59, 62, 65, 69, 70, 86, 88, 92, 93, 99, 140, 390, 474, 475, 481, 482, 484, 486, 487, 488, 495, 511, 556, 592, 646, 651, 715, 717, 718, 719, 721, 723, 724, 726, 728, 811, 813, 826, 828, 834, 835, 839, 841, 846, 847, 848, 853, 854, 856, 857, 860, 863, 865, 866, 867, 869, 878], "cell": [1, 2, 4, 5, 6, 7, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 58, 73, 96, 648, 673, 674, 807, 844, 865], "h2": [1, 2, 28, 30, 41], "tag": [1, 2, 28, 30, 41, 835, 836], "h3": [1, 2, 28, 30, 41], "subsect": [1, 2, 28, 30, 41, 834, 835, 836, 839, 844], "explan": [1, 2, 28, 30, 41, 834, 835, 836, 843, 848, 852, 857, 861], "go": [1, 6, 7, 8, 9, 10, 11, 23, 27, 29, 33, 40, 42, 44, 49, 64, 69, 92, 96, 387, 430, 434, 653, 744, 745, 828, 829, 832, 834, 835, 836, 838, 841, 842, 845, 847, 850, 851, 857, 858, 860, 861, 864, 867, 878, 879], "default": [1, 4, 5, 8, 9, 12, 13, 43, 44, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 112, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 184, 185, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 208, 209, 211, 212, 216, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 598, 602, 603, 604, 605, 607, 609, 611, 612, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 740, 741, 743, 744, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 792, 793, 794, 799, 803, 804, 806, 807, 808, 809, 810, 811, 812, 821, 822, 826, 834, 835, 836, 841, 842, 845, 846, 847, 848, 849, 852, 853, 857, 860, 863, 865, 869, 874, 878], "text": [1, 6, 7, 8, 9, 21, 22, 26, 57, 69, 70, 388, 389, 456, 464, 834, 836, 842, 847, 848], "paragraph": [1, 2, 28, 30, 41, 842], "p": [1, 2, 28, 30, 41, 55, 69, 70, 74, 92, 93, 97, 110, 151, 256, 388, 393, 438, 451, 519, 552, 553, 641, 644, 646, 649, 653, 690, 706, 741, 807, 828, 835, 836, 838], "path": [1, 21, 22, 23, 24, 25, 26, 37, 39, 40, 58, 59, 788, 799, 815, 835, 842, 856, 857, 858, 868, 878], "correspond": [1, 4, 5, 19, 20, 24, 25, 29, 43, 44, 58, 66, 68, 69, 70, 73, 76, 79, 80, 82, 86, 89, 91, 92, 96, 99, 105, 109, 112, 115, 165, 177, 180, 240, 290, 304, 343, 357, 358, 381, 384, 387, 388, 390, 393, 399, 410, 416, 427, 432, 438, 441, 442, 443, 462, 487, 488, 508, 513, 514, 515, 518, 535, 536, 604, 626, 642, 644, 646, 648, 649, 651, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 675, 680, 684, 685, 690, 697, 698, 721, 722, 753, 759, 760, 764, 765, 766, 767, 772, 773, 778, 779, 780, 781, 788, 791, 793, 821, 826, 828, 834, 836, 840, 841, 843, 844, 845, 847, 848, 849, 852, 853, 855, 857, 860, 863, 865, 874, 875, 876, 878], "toctre": [1, 842], "index": [1, 57, 58, 59, 62, 65, 69, 70, 76, 79, 80, 81, 86, 88, 92, 93, 99, 102, 103, 104, 144, 151, 325, 332, 333, 342, 343, 344, 381, 387, 388, 390, 395, 397, 399, 410, 416, 447, 449, 456, 479, 486, 489, 497, 499, 501, 504, 505, 508, 509, 525, 526, 535, 544, 547, 565, 567, 588, 589, 593, 639, 641, 646, 650, 651, 653, 656, 657, 658, 711, 721, 725, 735, 736, 737, 740, 741, 742, 748, 750, 759, 760, 762, 764, 765, 766, 768, 770, 792, 807, 822, 824, 843, 844, 849, 853, 854, 855, 856, 858, 860, 878], "rst": [1, 853], "left": [1, 35, 46, 57, 58, 69, 74, 79, 81, 92, 97, 102, 104, 132, 133, 244, 259, 352, 368, 375, 384, 385, 387, 388, 390, 399, 422, 441, 446, 452, 459, 461, 487, 497, 539, 540, 541, 542, 543, 544, 557, 640, 644, 646, 649, 656, 658, 684, 685, 690, 699, 704, 759, 770, 791, 835, 836, 839, 842, 844, 845, 847, 850], "add": [1, 35, 46, 59, 61, 68, 69, 77, 84, 86, 91, 92, 100, 107, 114, 115, 375, 385, 387, 389, 430, 469, 584, 613, 644, 646, 648, 649, 654, 659, 675, 703, 752, 780, 788, 799, 807, 810, 826, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 856, 857, 860, 861, 863, 865, 867, 868, 878], "grid": [1, 23, 59, 65, 151, 328, 381, 641, 847, 860], "item": [1, 6, 7, 8, 9, 10, 11, 43, 44, 55, 57, 59, 64, 70, 84, 86, 88, 91, 92, 93, 146, 171, 208, 262, 278, 286, 353, 357, 370, 554, 564, 565, 569, 604, 605, 641, 642, 643, 646, 653, 660, 738, 739, 740, 741, 745, 750, 751, 785, 834, 843, 845, 865, 874], "card": [1, 69, 92, 372, 384], "refer": [1, 12, 13, 69, 76, 82, 83, 92, 94, 99, 105, 106, 144, 159, 257, 275, 325, 340, 370, 381, 384, 387, 388, 390, 416, 421, 432, 439, 463, 486, 627, 628, 641, 644, 647, 649, 651, 659, 660, 680, 682, 705, 721, 779, 781, 782, 783, 807, 828, 833, 834, 835, 836, 839, 840, 842, 844, 845, 852, 853, 854, 855, 856, 857, 858, 859, 860, 867, 869, 878], "also": [1, 4, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 23, 24, 25, 26, 27, 29, 33, 35, 37, 40, 43, 44, 46, 48, 49, 50, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 167, 180, 183, 184, 185, 187, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 381, 384, 387, 388, 390, 397, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 641, 642, 644, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 743, 744, 745, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 806, 807, 816, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 871, 874, 875, 877, 878, 879, 880], "look": [1, 8, 9, 10, 11, 12, 13, 23, 33, 43, 44, 57, 59, 62, 828, 832, 834, 835, 836, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 857, 858, 860, 861, 862, 863, 865, 866, 868, 874, 878], "document": [1, 5, 8, 9, 10, 11, 14, 23, 33, 43, 76, 259, 347, 348, 384, 626, 644, 646, 725, 829, 830, 833, 836, 842, 844, 845, 847, 856, 857, 858, 860, 866], "sphinx": [1, 830, 842], "websit": [1, 61, 828, 835, 839], "alreadi": [2, 5, 8, 9, 23, 24, 25, 34, 37, 38, 39, 40, 43, 44, 49, 57, 59, 62, 69, 74, 86, 92, 97, 248, 258, 285, 295, 305, 390, 399, 475, 476, 496, 532, 541, 644, 649, 687, 694, 821, 822, 828, 834, 835, 836, 841, 843, 845, 846, 852, 856, 857, 863, 867, 868, 878], "instal": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 57, 59, 60, 61, 62, 830, 835, 836, 841, 842, 850, 851], "skip": [2, 6, 7, 23, 59, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 153, 155, 161, 165, 167, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 388, 390, 411, 412, 413, 431, 447, 449, 456, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 497, 500, 502, 504, 505, 506, 508, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 653, 662, 663, 664, 665, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 792, 821, 842, 853, 860], "colab": [2, 6, 7, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 57, 59, 61, 62], "manual": [2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 653, 733, 743, 744, 834, 835, 836, 845, 851, 860, 866], "mind": [2, 27, 29, 33, 39, 43, 47, 834, 835, 840, 843, 860, 868, 875], "click": [2, 4, 5, 59, 834, 835, 836, 844, 848, 850, 851], "runtim": [2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 23, 24, 25, 35, 43, 46, 57, 58, 838, 853, 860, 863, 878], "restart": [2, 4, 5, 6, 7, 12, 13, 21, 22, 23, 57, 58, 835, 850], "git": [2, 4, 5, 6, 7, 12, 13, 21, 22, 43, 57, 58, 59, 60, 828, 830, 833, 835, 836, 839, 842, 844, 850, 851, 860, 868], "clone": [2, 4, 5, 12, 13, 21, 22, 43, 57, 59, 60, 828, 830, 836, 850, 868], "http": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 29, 37, 39, 40, 43, 44, 57, 58, 59, 60, 61, 62, 68, 69, 91, 92, 94, 159, 167, 255, 265, 266, 281, 340, 347, 348, 381, 384, 387, 390, 399, 431, 504, 534, 627, 628, 641, 642, 644, 647, 649, 651, 659, 697, 698, 729, 779, 828, 830, 835, 836, 839, 842, 844, 845, 848, 850, 868, 875], "github": [2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 24, 25, 43, 57, 58, 59, 60, 61, 828, 830, 831, 833, 836, 837, 839, 842, 844, 845, 847, 848, 850, 851, 859, 860, 868], "com": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 29, 43, 57, 58, 59, 60, 61, 828, 830, 835, 836, 839, 842, 844, 845, 850, 868], "llc": [2, 4, 5, 12, 13, 21, 22, 43, 57, 58, 59, 60, 828, 868], "model": [2, 3, 4, 5, 15, 16, 26, 31, 32, 33, 60, 62, 252, 285, 389, 465, 644, 804, 808, 809, 826, 828, 866, 869, 871, 872, 874, 875, 878, 879, 880], "depth": [2, 4, 5, 8, 9, 12, 13, 21, 22, 58, 65, 69, 73, 88, 92, 96, 153, 387, 390, 423, 483, 557, 569, 641, 646, 648, 666, 667, 836, 844, 865, 868], "repositori": [2, 4, 5, 12, 13, 21, 22, 830, 834, 835, 836, 838, 839, 842, 850, 859], "cd": [2, 4, 5, 12, 13, 21, 22, 43, 60, 828, 830, 835, 836, 850, 868], "acceler": [3, 31, 845, 857, 872], "convert": [3, 12, 13, 14, 15, 16, 19, 20, 24, 25, 26, 27, 29, 31, 34, 36, 39, 40, 42, 43, 44, 45, 47, 49, 57, 60, 62, 64, 65, 68, 86, 87, 88, 91, 109, 139, 140, 152, 162, 163, 205, 206, 207, 208, 219, 227, 231, 251, 291, 390, 395, 474, 475, 476, 525, 590, 608, 610, 611, 612, 614, 641, 642, 643, 644, 646, 649, 653, 707, 734, 745, 746, 788, 816, 821, 834, 840, 841, 854, 855, 857, 860, 862, 865, 866, 867, 869, 870, 872, 875, 880], "faster": [3, 4, 5, 15, 16, 19, 20, 24, 25, 26, 31, 43, 44, 60, 62, 69, 74, 92, 97, 388, 461, 649, 699, 830, 833, 842, 869], "infer": [3, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 26, 31, 35, 46, 48, 49, 58, 60, 62, 65, 69, 70, 73, 76, 88, 92, 93, 96, 99, 138, 140, 143, 147, 148, 152, 155, 161, 170, 171, 172, 173, 174, 324, 325, 387, 390, 394, 423, 508, 522, 568, 602, 603, 641, 642, 646, 648, 651, 671, 721, 816, 817, 838, 841, 845, 846, 860, 865, 875, 880], "finetun": [3, 31, 57], "project": [3, 21, 22, 24, 25, 31, 36, 37, 39, 40, 43, 44, 47, 110, 648, 675, 807, 828, 830, 831, 834, 835, 836, 837, 840, 841, 842, 860, 867, 872, 875, 878], "resnet": [3, 8, 9, 24, 25, 31, 43, 874, 875], "video": [4, 12, 19, 21, 24, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 828, 829, 834, 835, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 868], "tutori": [4, 8, 9, 10, 11, 12, 19, 21, 23, 24, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 828, 836, 857, 868], "written": [4, 5, 6, 7, 8, 9, 23, 33, 43, 44, 57, 70, 390, 485, 835, 839, 840, 848, 851, 852, 856, 857, 861, 865, 866, 867, 875, 878], "imag": [4, 5, 8, 9, 10, 11, 19, 20, 24, 25, 27, 39, 43, 44, 57, 58, 59, 60, 61, 62, 69, 73, 91, 92, 96, 114, 232, 233, 234, 235, 238, 241, 250, 253, 255, 257, 266, 267, 268, 273, 275, 288, 295, 296, 298, 299, 303, 387, 406, 407, 423, 424, 425, 427, 557, 644, 646, 648, 650, 661, 662, 663, 664, 665, 668, 669, 670, 711, 807, 828, 835, 850, 863, 868, 874, 875, 878], "classif": [4, 5, 21, 22, 26, 57, 878], "three": [4, 5, 6, 7, 31, 37, 48, 49, 59, 69, 151, 324, 381, 390, 476, 641, 835, 836, 843, 844, 845, 847, 857, 860, 863, 866, 879], "major": [4, 5, 6, 7, 656, 762, 845, 846, 858, 860, 867, 878], "ml": [4, 5, 6, 7, 8, 9, 23, 31, 32, 33, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 57, 59, 62, 828, 829, 833, 857, 866, 870, 872, 875, 877, 878, 880], "framework": [4, 5, 6, 7, 10, 11, 14, 15, 16, 27, 29, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 50, 57, 59, 61, 64, 70, 182, 204, 214, 217, 228, 555, 571, 575, 607, 610, 642, 643, 646, 653, 735, 786, 788, 792, 799, 804, 811, 816, 817, 831, 832, 834, 835, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 852, 853, 854, 856, 857, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880], "sinc": [4, 5, 12, 13, 21, 22, 23, 39, 40, 43, 44, 57, 59, 69, 92, 110, 384, 830, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 849, 856, 857, 867, 878], "automat": [4, 5, 12, 13, 15, 16, 21, 22, 23, 40, 43, 44, 49, 834, 835, 836, 838, 841, 842, 844, 845, 851, 853, 856, 860, 863, 869, 871, 878], "sure": [4, 5, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 43, 57, 831, 834, 835, 836, 839, 844, 849, 850, 857, 858, 860, 863], "enabl": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 37, 40, 58, 69, 74, 86, 97, 115, 387, 389, 410, 468, 592, 646, 649, 692, 809, 826, 828, 835, 836, 837, 840, 843, 845, 853, 854, 855, 856, 857, 860, 861, 865, 866, 867, 869, 872, 874, 878, 879, 880], "dm": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 43, 44, 55, 57], "haiku": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 40, 43, 44, 55, 57, 61, 804, 828, 875, 878], "exit": [4, 12, 21, 23, 43, 44, 846], "download": [4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 43, 44, 58, 59, 62, 830, 835, 842, 860, 874, 875], "imagenet": [4, 5, 8, 9, 23, 29, 58, 60, 828], "class": [4, 5, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 26, 27, 29, 33, 43, 44, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 146, 155, 161, 177, 180, 193, 195, 196, 255, 292, 350, 372, 384, 398, 399, 407, 408, 441, 540, 541, 548, 557, 561, 574, 584, 607, 641, 642, 643, 644, 646, 648, 649, 650, 653, 654, 669, 674, 678, 684, 694, 698, 699, 701, 708, 727, 734, 745, 752, 767, 774, 778, 779, 788, 789, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 821, 826, 834, 841, 842, 843, 845, 846, 847, 848, 852, 854, 855, 858, 859, 860, 863, 865, 866, 869, 874, 875, 878, 879], "wget": [4, 5, 8, 9, 12, 13, 21, 22, 57, 58, 61, 835], "raw": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 43, 44, 57, 60, 61, 86, 828, 848, 875, 879], "githubusercont": [4, 5, 8, 9, 12, 13, 21, 22, 57, 61], "hub": [4, 5, 8, 9, 12, 13, 21, 22, 57, 60, 62], "master": [4, 5, 12, 13, 21, 22, 34, 35, 36, 45, 46, 47, 48, 49, 50, 57, 59, 60, 61, 831, 844, 878], "imagenet_class": [4, 5, 21, 22], "categori": [4, 5, 8, 9, 21, 22, 834, 839, 840, 843, 845, 849, 857, 861], "strip": [4, 5, 21, 22, 35, 46], "readlin": [4, 5, 21, 22, 58], "cat": [4, 5, 10, 11, 21, 22, 58, 858, 863, 865, 866, 874, 875], "jpg": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 43, 44, 59, 60, 828, 875], "filenam": [4, 5, 12, 13, 21, 22, 23, 43, 44, 57, 59, 62, 70, 809, 815], "import": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 60, 61, 62, 69, 80, 84, 88, 92, 107, 206, 207, 211, 223, 319, 399, 534, 569, 585, 643, 646, 650, 652, 657, 711, 731, 732, 767, 799, 816, 817, 828, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 851, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 874, 875, 876, 877, 878], "devic": [4, 5, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 58, 59, 62, 65, 69, 78, 86, 88, 92, 101, 114, 117, 118, 119, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 231, 324, 325, 340, 341, 381, 394, 484, 520, 521, 523, 524, 548, 562, 563, 641, 646, 655, 753, 754, 755, 756, 786, 788, 789, 804, 806, 807, 808, 809, 810, 811, 812, 813, 826, 836, 838, 841, 845, 849, 853, 854, 858, 860, 861, 863, 865, 867, 869, 878], "torchvis": [4, 5, 8, 9, 19, 20, 21, 22, 23, 57], "transform": [4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 39, 43, 44, 57, 58, 60, 69, 73, 92, 96, 387, 388, 409, 410, 415, 416, 419, 420, 421, 431, 432, 435, 452, 648, 672, 791, 794, 807, 828, 854, 860, 869, 874, 875, 878, 879], "pil": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 43, 44, 58, 59, 60, 828, 875], "time": [4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 40, 43, 44, 49, 57, 59, 60, 61, 69, 71, 74, 80, 92, 94, 103, 109, 110, 146, 353, 384, 387, 388, 390, 399, 416, 421, 433, 435, 456, 463, 496, 502, 534, 628, 633, 641, 647, 648, 649, 651, 652, 656, 657, 671, 674, 689, 727, 730, 731, 732, 759, 760, 764, 765, 807, 808, 809, 826, 834, 835, 836, 839, 841, 843, 844, 845, 847, 850, 852, 853, 854, 856, 857, 860, 861, 865, 866, 867, 868, 871, 874, 875, 878, 879], "filterwarn": [4, 5, 6, 7, 23], "ignor": [4, 5, 6, 7, 23, 56, 64, 65, 69, 86, 92, 151, 387, 388, 390, 399, 411, 412, 413, 442, 450, 458, 498, 499, 503, 542, 641, 648, 653, 675, 744, 745, 811, 835, 842, 844, 847, 860, 867], "compos": [4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 43, 44, 57, 69, 92, 387, 401, 402, 403, 404, 835, 843, 857, 860, 874, 876, 878], "resiz": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 57, 58, 69, 92, 387, 423, 863], "centercrop": [4, 5, 21, 22, 23], "224": [4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 43, 44, 57, 58, 60, 828, 875], "totensor": [4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 57], "485": [4, 5, 21, 22, 23, 57], "456": [4, 5, 21, 22, 23, 57, 860], "406": [4, 5, 21, 22, 23, 57, 69, 92, 409, 552, 646], "229": [4, 5, 21, 22, 23, 57, 291, 644], "225": [4, 5, 21, 22, 23, 57, 59, 246, 644], "torch_img": [4, 5, 12, 13, 21, 22], "unsqueez": [4, 5, 12, 13, 19, 20, 21, 22], "img": [4, 5, 12, 13, 21, 22, 39, 43, 44, 57, 58, 59, 61, 828, 875], "ipython": [4, 5, 12, 13, 21, 22, 37, 39, 40, 43, 44, 62], "displai": [4, 5, 12, 13, 21, 22, 23, 39, 43, 44, 57, 58, 59, 61, 62, 835, 842, 844, 849, 860], "end": [4, 5, 12, 13, 23, 57, 58, 69, 92, 138, 240, 296, 365, 384, 387, 389, 390, 435, 464, 486, 496, 498, 499, 641, 644, 822, 835, 836, 841, 844, 850, 856, 861, 863, 867, 880], "set_default_devic": [4, 6, 8, 9, 12, 13, 19, 21, 23, 24, 229, 643, 846], "ivy_model": [4, 5, 6, 7, 12, 13, 21, 22, 60], "ivy_alexnet": [4, 5], "quick": [4, 5, 31, 44, 836, 838, 858], "trace_graph": [4, 5, 6, 7, 12, 13, 21, 22, 35, 36, 37, 38, 43, 44, 46, 47, 48, 49, 50, 51, 60, 809, 866, 873], "moment": [4, 5, 69, 71, 92, 94, 388, 445, 627, 628, 633, 647, 811, 826, 834, 841, 867, 874, 875], "cost": [4, 5, 71, 94, 627, 628, 631, 633, 634, 635, 647, 652, 730, 731, 732, 822, 845, 863], "arg": [4, 5, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 27, 29, 37, 38, 40, 43, 44, 48, 49, 50, 61, 64, 86, 108, 118, 134, 215, 225, 613, 640, 641, 643, 646, 786, 788, 803, 804, 807, 808, 809, 813, 816, 821, 826, 828, 840, 845, 846, 849, 855, 856, 857, 863, 865, 874, 875, 876], "asarrai": [4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 58, 65, 69, 70, 81, 88, 92, 93, 104, 139, 397, 526, 527, 557, 568, 572, 573, 603, 604, 605, 641, 646, 648, 657, 658, 662, 765, 769, 849, 854, 857, 858], "cuda": [4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 33, 43, 58, 59, 62, 65, 69, 78, 88, 92, 101, 149, 150, 153, 205, 206, 207, 223, 394, 520, 521, 523, 524, 641, 643, 649, 655, 700, 753, 754, 755, 756, 806, 807, 808, 809, 810, 811, 812, 826, 865, 866, 867, 869], "output": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 33, 39, 40, 42, 43, 44, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 191, 225, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 334, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 429, 431, 432, 433, 435, 436, 438, 439, 440, 442, 444, 447, 448, 450, 453, 454, 455, 456, 458, 459, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 479, 480, 481, 484, 486, 487, 488, 489, 490, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 551, 552, 553, 557, 558, 559, 561, 565, 574, 581, 588, 589, 590, 614, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 746, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 791, 806, 807, 821, 822, 828, 830, 835, 836, 838, 839, 840, 842, 843, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 867, 869, 874, 875, 879], "softmax": [4, 5, 8, 9, 10, 11, 21, 22, 27, 40, 43, 44, 59, 63, 73, 84, 85, 96, 389, 466, 638, 648, 675, 678, 803, 828], "pass": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 40, 42, 43, 44, 50, 56, 57, 59, 61, 62, 68, 69, 84, 86, 91, 92, 107, 115, 134, 135, 137, 169, 191, 206, 225, 240, 286, 387, 389, 390, 393, 394, 399, 433, 466, 486, 513, 515, 520, 540, 541, 574, 640, 642, 643, 644, 646, 652, 730, 731, 786, 788, 792, 799, 804, 808, 809, 811, 812, 816, 821, 826, 828, 832, 834, 836, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 863, 867, 874, 875, 876], "argsort": [4, 5, 21, 22, 81, 104, 658, 770, 857], "descend": [4, 5, 21, 22, 81, 104, 649, 658, 699, 700, 768, 771], "top": [4, 5, 21, 22, 40, 42, 43, 44, 57, 58, 69, 76, 92, 331, 381, 389, 390, 464, 506, 557, 646, 715, 835, 836, 845, 850, 857, 859, 860, 863, 878], "logit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 57, 58, 59, 60, 69, 75, 92, 98, 379, 394, 520, 523, 650, 708, 710, 803, 874], "gather": [4, 5, 21, 22, 57, 69, 70, 92, 93, 342, 343, 344, 381, 565, 567, 646], "to_list": [4, 5, 21, 22, 70, 93, 646], "arrai": [4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 112, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 180, 181, 183, 184, 185, 187, 189, 190, 191, 192, 198, 208, 209, 213, 218, 220, 222, 225, 226, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 592, 593, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 745, 746, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 793, 799, 806, 807, 808, 809, 812, 816, 821, 822, 824, 828, 832, 834, 835, 836, 838, 841, 842, 843, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 869, 875, 876, 878, 880], "282": [4, 5, 21, 22], "281": [4, 5, 21, 22, 57, 59], "285": [4, 5, 21, 22, 92], "64773697": [4, 5], "29496649": [4, 5], "04526037": [4, 5], "tiger": [4, 5, 21, 22], "tabbi": [4, 5, 10, 11, 21, 22], "egyptian": [4, 5, 21, 22], "torch_alexnet": [4, 5], "alexnet_weight": [4, 5], "imagenet1k_v1": [4, 5, 21, 22, 23], "dropout": [4, 5, 73, 96, 387, 411, 412, 413, 648, 673, 675, 678, 807], "torch_output": [4, 5, 12, 13, 14, 15, 16, 21, 22], "dim": [4, 5, 21, 22, 59, 69, 86, 88, 92, 153, 325, 381, 387, 390, 405, 415, 416, 417, 420, 428, 486, 508, 641, 648, 661, 668, 669, 674, 793, 807, 845, 857, 858, 863], "torch_class": [4, 5, 21, 22], "torch_logit": [4, 5, 21, 22], "tensor": [4, 5, 6, 7, 8, 9, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 37, 38, 40, 42, 43, 44, 45, 49, 55, 57, 65, 68, 69, 70, 73, 74, 75, 76, 78, 82, 86, 88, 91, 92, 93, 96, 97, 98, 99, 101, 105, 108, 141, 149, 150, 153, 159, 175, 191, 283, 284, 314, 331, 335, 336, 337, 338, 339, 340, 349, 372, 379, 381, 384, 387, 388, 389, 390, 399, 400, 406, 407, 410, 414, 423, 424, 425, 426, 433, 435, 437, 444, 445, 446, 447, 450, 452, 454, 456, 457, 460, 462, 463, 464, 466, 469, 470, 486, 489, 494, 497, 498, 499, 500, 503, 508, 509, 540, 545, 588, 589, 641, 642, 644, 646, 648, 649, 650, 651, 655, 659, 671, 674, 675, 690, 701, 708, 721, 723, 753, 776, 807, 816, 822, 826, 828, 840, 841, 845, 846, 850, 852, 853, 856, 857, 858, 860, 861, 863, 865, 866, 867, 869, 874, 875, 876, 879], "6477": [4, 5], "2950": [4, 5], "0453": [4, 5], "grad_fn": [4, 5, 21, 22, 40, 55, 630, 637, 647], "takebackward0": [4, 5, 21, 22], "great": [4, 5, 10, 11, 12, 13, 836, 860], "simpl": [4, 5, 10, 11, 27, 34, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 55, 57, 59, 62, 69, 92, 399, 534, 793, 807, 822, 828, 834, 835, 836, 840, 842, 843, 845, 846, 847, 848, 853, 856, 857, 860, 861, 863, 865, 867, 869, 871, 874, 875, 878, 879], "let": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 55, 57, 58, 60, 62, 70, 82, 93, 232, 233, 234, 235, 238, 241, 250, 253, 255, 257, 266, 267, 268, 273, 275, 288, 296, 298, 299, 303, 564, 565, 644, 646, 649, 659, 703, 776, 778, 779, 780, 781, 828, 834, 837, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 857, 858, 860, 861, 862, 863, 865, 866, 874, 875], "ll": [4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 58, 828, 829, 831, 832, 834, 835, 836, 837, 842, 847, 850, 851, 855, 856, 874, 875], "try": [4, 5, 8, 9, 10, 11, 23, 34, 45, 55, 58, 62, 86, 613, 646, 806, 816, 828, 834, 835, 836, 839, 840, 843, 844, 845, 849, 851, 856, 858, 865, 867, 876], "tf": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 27, 29, 34, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 55, 60, 61, 804, 828, 840, 845, 846, 852, 856, 857, 860, 861, 863, 865, 866, 867, 869, 874, 875, 876, 878], "onc": [4, 5, 8, 9, 12, 13, 43, 44, 55, 57, 74, 78, 97, 101, 225, 388, 441, 643, 649, 655, 684, 685, 686, 699, 753, 834, 835, 836, 843, 844, 845, 846, 847, 850, 851, 856, 857, 860, 863, 865, 867, 874], "set": [4, 5, 10, 11, 15, 16, 27, 29, 35, 43, 44, 46, 49, 57, 58, 59, 60, 61, 64, 69, 70, 73, 74, 79, 81, 82, 86, 92, 93, 96, 97, 102, 104, 105, 127, 130, 137, 157, 159, 193, 194, 195, 196, 197, 208, 221, 222, 223, 224, 225, 240, 340, 352, 368, 370, 375, 381, 384, 385, 387, 388, 389, 390, 399, 410, 431, 435, 439, 443, 446, 464, 469, 470, 486, 496, 499, 506, 534, 539, 540, 541, 542, 543, 544, 546, 550, 557, 569, 574, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 607, 615, 638, 640, 641, 642, 643, 644, 646, 648, 649, 653, 655, 656, 658, 659, 671, 678, 680, 690, 692, 695, 698, 699, 733, 740, 743, 744, 745, 750, 751, 757, 759, 760, 764, 766, 767, 768, 771, 779, 781, 788, 791, 792, 793, 794, 799, 806, 807, 809, 811, 816, 822, 825, 826, 828, 829, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 858, 860, 861, 863, 865, 866, 868, 873, 874, 875, 878, 879], "post": [4, 5, 8, 9, 12, 13, 23, 57, 77, 100, 654, 752, 835, 850, 855], "process": [4, 5, 8, 9, 12, 13, 37, 43, 44, 48, 57, 219, 231, 643, 829, 835, 836, 842, 843, 844, 850, 851, 853, 855, 857, 858, 859, 860, 863, 865, 866, 874, 878, 880], "st": [4, 5, 6, 7, 19, 20, 791, 839, 858, 860], "perf_count": [4, 5, 15, 16, 17, 19, 20], "raw_logit": [4, 5], "latenc": [4, 5, 19, 20], "nn": [4, 5, 8, 9, 10, 11, 12, 13, 17, 18, 29, 40, 43, 44, 57, 61, 151, 641, 828, 853, 858, 863, 865, 866, 875, 879], "direct": [4, 5, 69, 92, 353, 360, 364, 369, 373, 384, 387, 390, 421, 432, 487, 488, 502, 658, 771, 834, 840, 842, 857, 863, 865, 877, 878, 879], "tolist": [4, 5], "652289830999962": [4, 5], "int32": [4, 5, 55, 57, 66, 69, 70, 78, 79, 82, 89, 92, 93, 101, 102, 144, 149, 153, 155, 161, 164, 167, 169, 171, 173, 175, 178, 180, 181, 185, 188, 192, 196, 200, 202, 220, 247, 283, 284, 395, 399, 525, 535, 536, 537, 565, 574, 611, 641, 642, 643, 644, 646, 655, 656, 659, 754, 755, 756, 760, 772, 773, 778, 780, 791, 792, 845, 857, 860, 865], "6477362": [4, 5], "29496726": [4, 5], "04526032": [4, 5], "As": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 35, 39, 40, 43, 44, 46, 49, 55, 56, 80, 84, 107, 649, 657, 697, 764, 765, 766, 767, 832, 834, 835, 836, 837, 840, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 863, 867, 874, 875, 876, 878], "ident": [4, 5, 8, 9, 15, 16, 26, 40, 42, 58, 60, 74, 86, 144, 213, 567, 593, 641, 643, 646, 649, 653, 687, 691, 746, 807, 843, 853, 854, 857, 858, 861, 863, 867, 869], "had": [4, 5, 843, 844, 856, 861, 865, 866, 878, 879], "postprocess": [4, 5], "routin": [4, 5, 844, 856, 857, 863, 867, 878], "feed": [4, 5, 225, 643, 874, 878, 879], "carefulli": [4, 5, 290, 644, 806, 857], "rewrit": [4, 5], "easili": [4, 5, 39, 43, 44, 55, 835, 840, 844, 850, 857, 860, 863, 866, 867, 872, 878], "quickest": [4, 5], "particular": [4, 5, 43, 44, 280, 644, 792, 835, 836, 839, 841, 844, 845, 847, 854, 856, 857, 860, 861, 878], "again": [4, 5, 12, 13, 36, 37, 46, 47, 48, 49, 649, 697, 836, 840, 841, 842, 843, 847, 849, 851, 856, 857, 860, 861, 863, 865, 867], "speed": [4, 5, 19, 20, 24, 25, 26, 43, 44, 57, 62, 70, 93, 581, 646, 860], "repeat": [4, 5, 6, 7, 36, 47, 69, 70, 76, 92, 93, 99, 387, 390, 399, 416, 421, 485, 534, 559, 646, 651, 652, 727, 731, 732, 821, 836, 840, 841, 847, 848, 856, 860], "previou": [4, 5, 26, 35, 36, 37, 39, 46, 47, 48, 50, 71, 92, 94, 199, 200, 201, 202, 203, 376, 386, 387, 433, 614, 616, 617, 618, 619, 621, 622, 624, 628, 633, 642, 646, 647, 806, 825, 835, 836, 839, 841, 844, 846, 852, 857, 860, 863, 867], "trace": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 31, 32, 36, 39, 43, 46, 48, 49, 61, 70, 74, 86, 93, 97, 576, 577, 580, 591, 600, 615, 623, 646, 649, 788, 799, 809, 811, 826, 828, 839, 843, 845, 857, 862, 863, 866, 867, 873, 874, 875, 879], "026875037000081647": [4, 5], "overrid": [4, 5, 12, 13, 49, 58, 65, 69, 88, 92, 153, 399, 534, 641, 840, 842], "prealloc": [4, 5, 12, 13], "temporari": [4, 5, 12, 13, 601, 624, 646, 822, 845, 862], "fix": [4, 5, 12, 13, 59, 69, 92, 109, 110, 384, 387, 388, 433, 463, 648, 675, 828, 832, 835, 836, 839, 845, 851, 860, 861], "until": [4, 5, 12, 13, 822, 836, 856, 865, 867, 874], "o": [4, 5, 12, 13, 23, 56, 57, 58, 59, 61, 584, 646, 648, 675, 828, 835, 838, 844, 866, 868], "environ": [4, 5, 12, 13, 24, 25, 37, 39, 40, 58, 61, 828, 829, 836, 868, 871, 878, 880], "xla_python_client_alloc": [4, 5, 12, 13], "platform": [4, 5, 8, 9, 12, 13, 23, 26, 37, 40, 830, 833, 835, 842, 880], "jit": [4, 5, 19, 20, 24, 25, 43, 46, 866, 867, 874, 878], "img_jax": [4, 5, 12, 13], "device_put": [4, 5, 19, 20], "warm": [4, 5], "_": [4, 5, 15, 16, 17, 19, 20, 24, 25, 26, 43, 56, 57, 68, 69, 86, 91, 92, 94, 110, 167, 255, 257, 265, 266, 281, 347, 348, 384, 387, 390, 399, 431, 460, 463, 504, 534, 557, 627, 628, 642, 644, 646, 647, 649, 651, 653, 659, 697, 698, 700, 729, 740, 779, 836, 844, 845, 848, 856, 860], "0022192720000475674": [4, 5], "64773613": [4, 5], "29496723": [4, 5], "exact": [4, 5, 69, 85, 86, 122, 387, 389, 423, 428, 468, 469, 657, 764, 766, 793, 803, 835, 836, 839, 847, 866], "note": [4, 5, 8, 9, 12, 13, 23, 26, 43, 44, 49, 58, 59, 60, 69, 70, 74, 76, 80, 92, 97, 99, 109, 146, 159, 191, 259, 294, 295, 302, 340, 341, 361, 381, 384, 387, 388, 390, 410, 441, 446, 456, 457, 463, 486, 504, 642, 644, 648, 649, 651, 657, 659, 675, 684, 685, 696, 697, 699, 721, 725, 765, 767, 776, 807, 822, 826, 832, 834, 835, 836, 840, 845, 847, 848, 851, 856, 857, 858, 860, 861, 863], "were": [4, 5, 12, 13, 60, 86, 89, 180, 184, 185, 259, 644, 648, 675, 834, 835, 836, 845, 849, 851, 855, 856, 858, 860, 861, 863, 865, 874, 878, 879], "function": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 23, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 167, 177, 178, 179, 180, 183, 184, 185, 187, 191, 192, 209, 211, 212, 221, 225, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 584, 587, 588, 589, 592, 593, 596, 598, 600, 603, 604, 605, 606, 607, 609, 611, 612, 613, 619, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 739, 740, 741, 743, 744, 745, 746, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 789, 791, 792, 793, 794, 799, 803, 806, 809, 816, 817, 824, 826, 832, 835, 836, 838, 839, 840, 841, 842, 844, 847, 848, 850, 856, 859, 866, 869, 872, 874, 876, 877, 878, 879, 880], "dog": [4, 5], "006431100999861883": [4, 5], "258": [4, 5, 648, 663, 665], "104": [4, 5, 82, 649, 659, 694, 774], "259": [4, 5], "72447652": [4, 5], "13937832": [4, 5], "05874982": [4, 5], "samoi": [4, 5], "wallabi": [4, 5], "pomeranian": [4, 5], "incorrect": [4, 5, 844], "predict": [4, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 26, 57, 58, 59, 60, 69, 75, 92, 98, 389, 465, 468, 471, 650, 708, 709, 710, 828, 845], "down": [4, 5, 35, 46, 60, 69, 92, 387, 390, 423, 488, 828, 835, 860, 869, 878], "itself": [4, 5, 10, 11, 37, 48, 68, 109, 286, 547, 613, 644, 646, 653, 745, 822, 832, 835, 836, 839, 842, 843, 844, 845, 846, 849, 850, 851, 856, 857, 867, 874, 878, 879], "version": [4, 5, 8, 9, 15, 16, 26, 39, 40, 46, 57, 58, 59, 62, 63, 69, 92, 109, 122, 303, 352, 354, 384, 399, 539, 544, 626, 644, 646, 649, 685, 686, 788, 816, 817, 828, 835, 836, 842, 844, 845, 848, 856, 858, 865, 872, 875], "004749261999904775": [4, 5], "7245": [4, 5], "1394": [4, 5], "0587": [4, 5], "promis": [4, 5, 10, 11], "sourc": [4, 5, 10, 11, 14, 15, 16, 17, 18, 21, 22, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 49, 50, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 835, 836, 839, 840, 842, 843, 844, 857, 859, 871, 873, 875, 876, 878, 879, 880], "modul": [4, 5, 8, 9, 12, 13, 19, 20, 24, 25, 27, 29, 33, 37, 39, 40, 43, 44, 45, 49, 55, 56, 57, 59, 60, 61, 84, 86, 107, 115, 380, 382, 383, 391, 392, 396, 585, 646, 660, 784, 788, 803, 804, 805, 807, 808, 810, 812, 815, 816, 826, 830, 835, 840, 841, 842, 849, 853, 856, 857, 859, 860, 865, 866, 867, 874, 876, 878, 879], "__init__": [4, 5, 12, 13, 27, 29, 43, 44, 55, 56, 57, 59, 86, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 789, 796, 797, 798, 803, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 821, 823, 826, 828, 834, 840, 841, 845, 849, 857, 861, 866, 875], "self": [4, 5, 8, 9, 10, 11, 12, 13, 27, 29, 43, 44, 55, 56, 57, 59, 61, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 175, 177, 180, 183, 184, 185, 187, 189, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 648, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 811, 821, 828, 836, 840, 843, 849, 857, 858, 866, 875], "num_class": [4, 5, 27, 29, 43, 44, 57, 59, 61, 828, 865, 875], "1000": [4, 5, 8, 9, 15, 16, 17, 19, 20, 21, 22, 23, 27, 43, 44, 57, 58, 59, 60, 62, 65, 88, 150, 641, 828, 875], "v": [4, 5, 6, 7, 12, 13, 31, 32, 35, 43, 44, 46, 49, 50, 55, 58, 59, 69, 73, 81, 88, 92, 96, 104, 150, 250, 255, 257, 298, 388, 390, 442, 452, 459, 460, 485, 644, 648, 652, 658, 675, 678, 731, 732, 770, 788, 807, 808, 809, 810, 811, 812, 830, 835, 836, 838, 842, 850, 865, 877], "_build": [4, 5, 12, 13, 808, 809], "kwarg": [4, 5, 6, 7, 10, 11, 12, 13, 24, 25, 26, 43, 57, 61, 64, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 115, 118, 215, 390, 496, 584, 613, 641, 643, 646, 786, 788, 803, 804, 807, 808, 809, 816, 826, 828, 840, 845, 846, 849, 853, 856, 857, 863, 865, 874, 875, 876], "featur": [4, 5, 10, 11, 24, 25, 26, 27, 29, 31, 33, 43, 44, 57, 61, 69, 92, 387, 401, 403, 404, 411, 412, 413, 806, 807, 826, 828, 834, 835, 836, 840, 841, 844, 845, 852, 861, 863, 867, 871, 872, 875, 878, 879, 880], "sequenti": [4, 5, 12, 13, 15, 16, 21, 22, 23, 40, 43, 44, 59, 842, 843, 875], "conv2d": [4, 5, 12, 13, 21, 22, 23, 40, 43, 44, 59, 62, 73, 96, 648, 665, 807, 819], "64": [4, 5, 12, 13, 21, 22, 23, 55, 57, 58, 59, 62, 68, 69, 73, 91, 92, 93, 96, 97, 101, 105, 115, 176, 246, 256, 290, 299, 300, 358, 384, 387, 409, 419, 557, 558, 605, 633, 642, 644, 646, 647, 648, 649, 653, 659, 663, 665, 667, 669, 670, 691, 694, 704, 741, 745, 755, 774, 778, 835, 845], "data_format": [4, 5, 59, 69, 73, 92, 96, 387, 393, 402, 406, 407, 408, 411, 412, 413, 424, 425, 426, 427, 429, 513, 514, 515, 518, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 791, 807, 810], "nchw": [4, 5, 59, 69, 73, 92, 96, 387, 393, 402, 407, 412, 425, 429, 518, 648, 661, 664, 665, 668, 669, 670, 807], "relu": [4, 5, 12, 13, 21, 22, 23, 40, 43, 44, 55, 62, 63, 69, 84, 85, 92, 124, 314, 315, 323, 379, 638, 803, 858], "maxpool2d": [4, 5, 12, 13, 21, 22, 23, 57, 807, 828], "192": [4, 5, 59, 791, 821], "384": [4, 5, 94, 627, 647, 653, 733], "avgpool": [4, 5, 21, 22, 23], "adaptiveavgpool2d": [4, 5, 21, 22, 23, 807], "classifi": [4, 5, 10, 11, 23, 26, 27, 29, 43, 44, 57, 59, 60, 828, 834, 874, 875], "prob": [4, 5, 8, 9, 10, 11, 59, 69, 73, 92, 96, 101, 387, 394, 411, 412, 413, 520, 648, 655, 671, 753, 807], "4096": [4, 5], "_forward": [4, 5, 12, 13, 19, 20, 24, 25, 43, 44, 55, 56, 59, 848, 866], "invalid": [5, 69, 83, 92, 106, 390, 504, 649, 651, 660, 705, 717, 782, 783, 791, 835, 845], "distribut": [5, 62, 69, 75, 78, 92, 98, 101, 387, 388, 389, 394, 411, 412, 413, 446, 457, 463, 466, 468, 469, 471, 520, 521, 522, 523, 524, 650, 655, 708, 709, 710, 753, 754, 755, 756, 758, 806, 807, 834, 835, 844, 846, 867, 878], "ocutil": 5, "opt": [5, 8, 9, 10, 11, 14, 37, 39, 40, 61, 835, 841, 845, 856, 860, 863], "homebrew": [5, 14], "site": [5, 14, 37, 39, 40, 879], "resolv": [5, 8, 9, 21, 22, 57, 59, 69, 82, 259, 399, 535, 536, 644, 651, 659, 717, 772, 773, 778, 780, 836, 842, 845, 851, 865], "account": [5, 49, 59, 61, 69, 76, 92, 99, 299, 390, 486, 644, 651, 721, 806, 821, 835, 844, 848, 857, 861, 874], "behaviour": [5, 24, 25, 37, 39, 40, 124, 127, 286, 638, 644, 833, 836, 838, 839, 840, 843, 845, 846, 848, 849, 852, 853, 854, 856, 857, 860, 861], "conflict": [5, 24, 25, 37, 39, 40, 49, 835, 836, 844, 857], "maco": 5, "incompat": [5, 166, 642], "remot": [5, 835, 839, 850, 851], "enumer": [5, 8, 9, 10, 11, 12, 13, 23, 57, 59, 796], "compress": 5, "156": [5, 290, 644, 791], "delta": [5, 69, 71, 92, 94, 389, 465, 627, 647], "37": [5, 23, 26, 37, 39, 40, 55, 63, 68, 69, 85, 91, 92, 96, 114, 125, 238, 246, 295, 298, 302, 395, 430, 525, 644, 648, 649, 653, 655, 672, 691, 741, 755, 844], "reus": [5, 57, 65, 88, 92, 99, 140, 474, 475, 482, 484, 486, 487, 488, 495, 511, 717, 718, 719, 721, 723, 724, 726, 728, 849, 860], "pack": [5, 648, 673], "83": [5, 21, 22, 23, 26, 55, 74, 96, 101, 299, 387, 399, 409, 419, 430, 535, 644, 648, 649, 672, 687, 755], "mib": 5, "user": [5, 8, 9, 10, 11, 14, 23, 24, 25, 31, 37, 39, 40, 43, 58, 59, 61, 286, 303, 390, 496, 592, 644, 646, 807, 808, 809, 821, 828, 835, 836, 838, 840, 841, 843, 844, 845, 846, 849, 854, 855, 856, 857, 860, 862, 863, 864, 865, 867, 868, 878], "samuelarmstrong": [5, 14], "examples_and_demos_cpu": 5, "metadata": [5, 57, 59, 62, 856], "setup": [5, 57, 59, 62, 835, 836, 842, 844, 850], "satisfi": [5, 23, 37, 39, 40, 57, 59, 62, 69, 387, 388, 410, 442, 845, 847], "scipi": [5, 834], "einop": [5, 37, 39, 40, 57, 59, 62, 70, 93, 557, 558, 559, 646, 845], "psutil": [5, 37, 39, 40, 57, 59, 62], "termcolor": [5, 37, 39, 40, 57, 59, 62, 86, 115], "colorama": [5, 37, 39, 40, 57, 59], "nvidia": [5, 19, 20, 23, 24, 25, 37, 39, 40, 57, 59, 62], "535": [5, 37, 39, 40, 63, 85, 130, 638, 849], "133": [5, 8, 9, 21, 22, 57, 73, 672], "diskcach": [5, 37, 39, 40, 57], "googl": [5, 6, 7, 37, 39, 40, 57, 58, 59, 61, 844], "auth": [5, 37, 39, 40], "urllib3": [5, 37, 39, 40, 57], "request": [5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 37, 39, 40, 43, 44, 57, 60, 69, 216, 394, 524, 643, 826, 828, 829, 831, 834, 847, 851, 861, 863, 875], "pyvi": [5, 37, 39, 40, 43, 44], "dill": [5, 37, 39, 40, 57], "astunpars": [5, 37, 39, 40], "cloudpickl": [5, 37, 39, 40], "gast": [5, 37, 39, 40], "wheel": [5, 37, 39, 40, 57, 59, 62], "43": [5, 6, 7, 26, 55, 57, 59, 69, 92, 101, 115, 246, 387, 388, 399, 408, 440, 535, 644, 655, 656, 755, 756, 763], "six": [5, 37, 39, 40, 57, 62, 835, 863], "cffi": 5, "cachetool": [5, 37, 39, 40], "pyasn1": [5, 37, 39, 40], "rsa": [5, 37, 39, 40], "jinja2": [5, 23, 37, 39, 40], "jsonpickl": [5, 37, 39, 40], "networkx": [5, 23, 37, 39, 40, 62], "charset": [5, 37, 39, 40, 57], "idna": [5, 37, 39, 40, 57], "certifi": [5, 37, 39, 40, 57], "2017": [5, 37, 39, 40, 57, 648, 675], "2024": [5, 8, 9], "pycpars": 5, "decor": [5, 31, 32, 37, 39, 40, 49, 61, 551, 646, 791, 793, 799, 832, 839, 840, 843, 845, 846, 850, 853, 856, 857, 858, 863], "jedi": [5, 37, 39, 40], "inlin": [5, 37, 39, 40, 842], "prompt": [5, 37, 39, 40, 834, 836], "toolkit": [5, 37, 39, 40, 878, 879], "41": [5, 26, 37, 39, 40, 55, 57, 62, 68, 69, 74, 91, 92, 93, 96, 97, 125, 239, 247, 254, 285, 299, 387, 388, 395, 399, 407, 425, 430, 452, 525, 535, 552, 638, 644, 646, 649, 659, 679, 687, 780], "pygment": [5, 37, 39, 40], "stack": [5, 26, 35, 37, 39, 40, 46, 55, 59, 69, 74, 76, 86, 92, 97, 99, 114, 157, 158, 341, 381, 388, 390, 441, 480, 481, 483, 492, 512, 591, 600, 623, 641, 646, 649, 651, 653, 681, 683, 684, 685, 686, 688, 689, 691, 692, 693, 695, 696, 697, 699, 700, 703, 733, 743, 744, 807, 828, 833, 839, 856, 865, 877], "traitlet": [5, 37, 39, 40], "exceptiongroup": [5, 37, 39, 40], "pexpect": [5, 37, 39, 40], "markupsaf": [5, 23, 37, 39, 40], "parso": [5, 37, 39, 40], "ptyprocess": [5, 37, 39, 40], "wcwidth": [5, 37, 39, 40], "execut": [5, 8, 9, 19, 20, 24, 25, 33, 34, 35, 37, 39, 40, 43, 44, 46, 48, 51, 58, 60, 62, 135, 137, 613, 640, 643, 646, 835, 836, 842, 843, 844, 845, 846, 847, 849, 853, 854, 856, 860, 863, 866, 867, 869, 874, 878, 879], "asttoken": [5, 37, 39, 40], "pure": [5, 37, 39, 40, 49, 59, 848, 852, 857, 863, 865, 867, 878], "eval": [5, 6, 7, 8, 9, 12, 13, 21, 22, 23, 29, 37, 39, 40, 648, 673, 809], "collect": [5, 23, 47, 57, 59, 61, 62, 64, 86, 87, 638, 643, 646, 647, 648, 650, 653, 654, 655, 746, 803, 807, 808, 809, 810, 811, 835, 844, 849, 850, 854, 855, 858, 860, 878], "creat": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 33, 34, 35, 37, 39, 40, 43, 44, 45, 46, 48, 49, 50, 57, 58, 59, 61, 62, 65, 68, 69, 78, 86, 88, 91, 92, 97, 101, 110, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 159, 160, 161, 286, 324, 325, 335, 337, 339, 340, 381, 387, 388, 390, 394, 406, 407, 408, 429, 446, 457, 463, 472, 480, 496, 501, 520, 521, 522, 523, 524, 592, 609, 626, 637, 641, 644, 646, 647, 655, 694, 753, 754, 755, 756, 758, 788, 799, 804, 806, 807, 808, 809, 810, 811, 812, 828, 829, 831, 835, 836, 837, 840, 841, 842, 844, 845, 846, 849, 853, 854, 856, 857, 858, 860, 863, 866, 868, 869, 874, 875, 876, 878, 879], "py3": [5, 23, 57, 59, 62], "whl": [5, 23, 57, 58, 59, 62], "76449": 5, "sha256": [5, 57, 59, 62], "4ef86060439480c8cdd692e30d269e68540c3728a30c4a372981b0c5c0cbc214": 5, "store": [5, 57, 59, 62, 66, 69, 70, 74, 76, 86, 89, 92, 93, 97, 99, 166, 387, 388, 432, 440, 444, 458, 462, 561, 646, 649, 651, 703, 723, 788, 789, 807, 808, 809, 830, 836, 840, 841, 843, 848, 854, 856, 857, 858, 866, 869, 874], "directori": [5, 8, 9, 23, 57, 58, 59, 62, 601, 624, 643, 646, 826, 830, 834, 835, 836, 842, 844, 850, 857, 860, 866, 868], "privat": [5, 811, 857, 860], "var": [5, 14, 56, 82, 105, 107, 134, 135, 136, 137, 640, 652, 659, 730, 731, 813, 835, 847, 866], "3x": [5, 19, 20], "7zt1qbl12mn7zq12fzzv6xh80000gn": 5, "ephem": [5, 57, 59], "abb7vdwj": 5, "01": [5, 10, 11, 21, 22, 37, 40, 59, 65, 69, 70, 71, 74, 92, 93, 94, 97, 101, 150, 277, 295, 296, 324, 330, 355, 356, 363, 381, 387, 409, 419, 420, 561, 604, 605, 627, 628, 633, 641, 644, 646, 647, 649, 652, 655, 686, 696, 731, 732, 755, 756, 791, 841], "2d": [5, 43, 44, 59, 69, 92, 109, 325, 381, 387, 388, 390, 399, 402, 403, 411, 412, 454, 461, 475, 485, 534, 807, 826, 857, 863], "adc983ab61e1210a8d2ee2a20d1fc3d7c3e082fcdeabe25595": 5, "successfulli": [5, 8, 9, 10, 11, 23, 57, 59, 62, 809, 831, 835, 840], "built": [5, 42, 43, 44, 49, 57, 59, 62, 138, 641, 807, 808, 809, 835, 836, 842, 843, 860, 868, 874, 878], "zsh": 5, "found": [5, 10, 11, 57, 59, 60, 62, 74, 76, 80, 86, 92, 97, 99, 103, 115, 213, 399, 481, 535, 643, 653, 683, 689, 725, 744, 764, 822, 831, 834, 835, 836, 840, 841, 842, 843, 845, 846, 848, 851, 854, 856, 857], "filenotfounderror": 5, "traceback": [5, 14, 860], "recent": [5, 14, 59, 825, 835, 836, 860], "line": [5, 8, 9, 14, 19, 20, 24, 25, 26, 35, 36, 39, 43, 44, 46, 47, 58, 59, 302, 644, 826, 828, 835, 839, 840, 844, 846, 847, 849, 857, 860, 863, 875], "get_ipython": 5, "system": [5, 24, 25, 37, 39, 40, 59, 388, 458, 649, 698, 791, 828, 835, 836, 837, 841, 844, 845, 867, 875, 878], "34": [5, 14, 21, 22, 26, 55, 57, 91, 92, 93, 101, 180, 250, 277, 298, 387, 399, 430, 541, 557, 558, 642, 644, 646, 648, 649, 655, 672, 691, 755, 756, 846], "interactiveshel": 5, "324": [5, 839], "_modified_open": 5, "317": 5, "318": 5, "valueerror": [5, 65, 69, 76, 88, 92, 99, 103, 140, 387, 389, 421, 432, 469, 474, 475, 482, 484, 486, 487, 488, 495, 511, 651, 717, 718, 719, 721, 723, 724, 726, 728, 767, 793, 823, 849], "319": 5, "won": [5, 835, 836, 843, 845, 868, 874, 875, 876], "fd": [5, 73, 96, 648, 661, 666, 667, 668, 669], "320": 5, "like": [5, 6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 34, 35, 36, 38, 43, 45, 46, 47, 48, 49, 50, 60, 62, 65, 68, 69, 76, 88, 91, 92, 96, 99, 104, 150, 168, 191, 236, 256, 262, 265, 278, 296, 353, 358, 370, 384, 387, 388, 389, 390, 397, 399, 430, 432, 441, 466, 475, 476, 485, 486, 526, 527, 544, 641, 642, 644, 649, 651, 655, 658, 684, 721, 756, 769, 822, 828, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 871, 874, 875, 878, 880], "crash": 5, "know": [5, 37, 48, 49, 50, 80, 657, 764, 765, 766, 767, 828, 830, 834, 836, 846, 854, 858, 860, 863, 876, 879], "what": [5, 8, 9, 19, 20, 24, 25, 31, 36, 43, 44, 47, 48, 51, 56, 57, 387, 421, 432, 793, 822, 834, 836, 838, 843, 844, 847, 848, 851, 852, 854, 855, 856, 857, 858, 860, 864, 867, 872, 879], "321": 5, "builtin": [5, 21, 22, 835], "322": 5, "io_open": 5, "errno": 5, "No": [5, 8, 9, 43, 44, 57, 69, 75, 92, 98, 389, 466, 467, 468, 470, 471, 650, 708, 836, 844, 845, 878], "kernel": [5, 69, 73, 92, 96, 387, 406, 407, 408, 424, 425, 426, 427, 648, 674, 865, 867, 878], "while": [5, 8, 9, 10, 11, 23, 26, 43, 44, 51, 69, 73, 86, 92, 96, 109, 110, 115, 137, 153, 191, 259, 260, 280, 281, 359, 384, 387, 388, 390, 432, 433, 455, 498, 499, 533, 640, 641, 642, 644, 648, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 764, 776, 779, 789, 828, 832, 834, 835, 836, 840, 841, 842, 844, 845, 846, 847, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 865, 867, 868, 874, 878, 880], "review": [5, 69, 92, 388, 463, 830, 831, 834, 836, 842, 844, 847, 857, 861], "identifi": [5, 69, 92, 342, 343, 344, 381, 834, 839, 844, 845, 860, 863], "caus": [5, 26, 389, 466, 835, 836, 839, 841, 843, 844, 845, 847, 856, 858, 860, 867], "failur": [5, 836, 844, 858, 860], "href": 5, "aka": 5, "vscodejupyterkernelcrash": 5, "more": [5, 8, 9, 10, 11, 23, 27, 30, 33, 34, 35, 36, 40, 42, 43, 44, 45, 46, 55, 57, 58, 59, 63, 68, 69, 74, 76, 80, 85, 91, 92, 97, 99, 103, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 165, 257, 259, 275, 290, 303, 307, 312, 313, 315, 375, 379, 385, 388, 389, 390, 436, 438, 450, 452, 455, 468, 474, 475, 476, 481, 502, 592, 638, 641, 642, 644, 646, 649, 651, 657, 683, 689, 692, 695, 697, 699, 706, 718, 725, 764, 765, 766, 767, 793, 803, 822, 828, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 872, 875, 876, 878, 879, 880], "viewoutput": 5, "log": [5, 8, 9, 23, 65, 68, 69, 74, 88, 91, 92, 97, 130, 150, 275, 277, 290, 312, 313, 366, 373, 379, 384, 389, 394, 466, 468, 469, 520, 638, 641, 644, 697, 791, 793, 794, 803, 836, 843, 844, 847, 853, 856, 857, 858, 860, 862, 863, 865], "further": [5, 8, 9, 10, 11, 23, 33, 86, 115, 793, 828, 836, 839, 840, 844, 847, 849, 852, 853, 856, 857, 859, 860, 866], "detail": [5, 8, 9, 10, 11, 23, 35, 46, 59, 63, 68, 69, 74, 76, 80, 85, 91, 92, 93, 97, 99, 103, 122, 123, 124, 125, 126, 127, 128, 129, 130, 145, 156, 303, 307, 312, 313, 315, 379, 388, 438, 481, 560, 638, 641, 644, 657, 683, 689, 695, 699, 725, 764, 765, 766, 767, 803, 828, 834, 836, 839, 841, 842, 843, 844, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 866], "bidirect": [6, 7, 648, 673], "encod": [6, 7, 27, 29, 43, 44, 57, 59, 70, 75, 93, 98, 561, 646, 650, 708, 828, 875], "mlm": [6, 7], "choos": [6, 7, 57, 59, 67, 79, 80, 90, 226, 252, 259, 280, 281, 285, 347, 348, 384, 390, 643, 644, 656, 657, 659, 763, 764, 765, 766, 767, 775, 776, 777, 779, 791, 834, 835, 836, 854, 860, 874], "librari": [6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 40, 42, 55, 57, 67, 80, 90, 226, 257, 259, 275, 280, 281, 303, 347, 348, 384, 643, 644, 649, 657, 659, 685, 686, 764, 765, 766, 767, 775, 776, 777, 779, 826, 834, 835, 839, 845, 867, 872, 874, 878, 880], "pretrain": [6, 7, 19, 20, 27, 28, 29, 43, 44, 62, 828, 875], "save": [6, 7, 8, 9, 21, 22, 23, 57, 69, 86, 92, 399, 541, 601, 624, 643, 646, 660, 809, 826, 835, 844, 851, 860, 866, 867, 872, 880], "some": [6, 7, 12, 13, 15, 16, 17, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 48, 49, 55, 59, 60, 86, 94, 257, 259, 275, 387, 411, 412, 413, 627, 628, 631, 633, 634, 635, 643, 644, 647, 653, 744, 807, 828, 832, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 867, 868, 869, 874, 875, 878, 879, 880], "mohame54": [6, 7], "automodel": [6, 7, 24, 25, 43], "autotoken": [6, 7], "load": [6, 7, 8, 9, 10, 11, 19, 20, 24, 25, 39, 43, 57, 58, 59, 60, 61, 62, 86, 388, 459, 660, 809, 860, 867, 880], "token": [6, 7, 59, 837], "bert_bas": [6, 7], "from_pretrain": [6, 7, 10, 11, 24, 25, 43, 60, 874, 875], "base": [6, 7, 10, 11, 26, 57, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 119, 150, 159, 191, 255, 256, 273, 274, 275, 276, 290, 331, 340, 342, 349, 352, 358, 365, 381, 384, 387, 388, 389, 397, 430, 434, 459, 464, 526, 594, 605, 617, 641, 642, 644, 646, 649, 651, 657, 659, 690, 717, 764, 765, 766, 767, 774, 789, 792, 793, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 822, 823, 826, 828, 835, 836, 837, 839, 843, 844, 845, 849, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 878], "uncas": [6, 7], "evalu": [6, 7, 68, 69, 86, 91, 92, 255, 257, 273, 274, 275, 276, 280, 287, 289, 296, 300, 334, 366, 377, 378, 381, 386, 388, 389, 390, 455, 464, 469, 493, 637, 644, 647, 653, 660, 743, 744, 782, 783, 808, 809, 836, 843, 845, 853, 854, 878], "bert_token": [6, 7], "sampl": [6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 27, 29, 39, 43, 44, 58, 65, 68, 69, 78, 82, 88, 91, 92, 101, 105, 149, 150, 304, 331, 381, 387, 389, 390, 394, 411, 412, 413, 423, 433, 435, 464, 469, 499, 520, 521, 522, 523, 524, 641, 644, 655, 659, 753, 754, 755, 756, 779, 781, 807, 858, 860], "test": [6, 7, 10, 11, 34, 35, 37, 45, 46, 48, 49, 50, 58, 59, 68, 70, 83, 91, 93, 106, 137, 183, 187, 266, 267, 268, 269, 292, 387, 411, 412, 413, 581, 640, 642, 644, 646, 660, 782, 783, 786, 789, 792, 822, 828, 830, 832, 833, 838, 842, 845, 847, 849, 851, 854, 857, 859, 861, 867, 868, 874, 875, 876, 878], "did": [6, 7, 57, 834, 842], "realli": [6, 7, 55, 835, 843, 850, 867, 870, 874], "input": [6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 23, 24, 25, 27, 29, 39, 40, 42, 43, 48, 49, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 180, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 206, 208, 209, 222, 225, 226, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 453, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 588, 589, 590, 596, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 619, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 741, 742, 744, 745, 746, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 792, 799, 803, 806, 807, 808, 809, 810, 819, 821, 822, 826, 839, 840, 841, 843, 845, 846, 847, 848, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 874, 875, 879], "pad": [6, 7, 21, 22, 23, 57, 59, 69, 73, 76, 92, 96, 99, 110, 112, 387, 390, 406, 407, 408, 409, 410, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 561, 646, 648, 651, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 716, 729, 793, 807], "longest": [6, 7], "return_tensor": [6, 7, 10, 11, 24, 25, 43, 60, 874, 875], "pt": [6, 7, 10, 11, 24, 25, 43, 874], "max_length": [6, 7, 86], "512": [6, 7, 12, 13, 21, 22, 23, 57, 59, 97, 648, 663, 704, 828], "input_id": [6, 7], "101": [6, 7, 26, 58, 648, 649, 653, 672, 688, 739], "1045": [6, 7], "2106": [6, 7], "1005": [6, 7], "1056": [6, 7], "2428": [6, 7], "2066": [6, 7], "2115": [6, 7], "4309": [6, 7], "1012": [6, 7], "102": [6, 7, 26, 69, 92, 101, 409, 754], "token_type_id": [6, 7], "attention_mask": [6, 7, 73, 96, 648, 675], "pooler": [6, 7], "compar": [6, 7, 15, 16, 17, 19, 20, 24, 25, 43, 56, 60, 62, 69, 70, 80, 81, 82, 86, 92, 93, 104, 105, 346, 363, 384, 399, 542, 546, 549, 646, 648, 657, 658, 659, 673, 764, 765, 766, 767, 768, 771, 777, 788, 828, 841, 847, 849, 858, 860, 863, 877, 878], "no_grad": [6, 7, 57, 874], "bert_output": [6, 7], "pooler_output": [6, 7], "ivy_bert": [6, 7], "bert_base_uncas": [6, 7], "ivy_input": [6, 7], "k": [6, 7, 19, 20, 56, 59, 65, 69, 70, 73, 74, 78, 88, 91, 92, 96, 97, 101, 109, 110, 134, 144, 157, 158, 159, 279, 325, 340, 341, 381, 388, 390, 394, 397, 399, 439, 454, 458, 460, 462, 502, 506, 520, 521, 522, 523, 524, 527, 537, 549, 640, 641, 646, 648, 649, 653, 655, 656, 675, 678, 682, 689, 690, 696, 698, 699, 700, 703, 741, 754, 755, 756, 762, 838, 839, 857, 858, 865, 866, 874, 878], "ivy_output": [6, 7, 60], "logits_clos": [6, 7], "allclos": [6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 42, 43, 60, 62, 69, 92, 384], "detach": [6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 43, 855], "rtol": [6, 7, 10, 11, 27, 29, 69, 74, 92, 97, 346, 363, 384, 649, 692, 695, 786, 788, 832, 850, 858], "005": [6, 7, 21, 22, 69, 92, 346, 363, 384, 465], "atol": [6, 7, 10, 11, 14, 15, 16, 17, 19, 20, 23, 24, 25, 42, 43, 69, 74, 92, 97, 346, 363, 384, 649, 692, 786, 788, 832, 850, 858], "768": [6, 7], "fn": [6, 7, 60, 62, 69, 86, 89, 92, 118, 178, 179, 211, 212, 215, 390, 473, 547, 562, 563, 613, 642, 643, 646, 653, 739, 740, 741, 743, 744, 745, 786, 788, 813, 816, 819, 823, 824, 826, 846, 849, 856, 857, 866, 874], "finish": [6, 7, 10, 11, 31, 43, 44, 55, 58, 829, 834, 835, 838], "sec": [6, 7], "procedur": [6, 7, 842, 844, 847, 858], "60": [6, 7, 23, 55, 59, 68, 82, 91, 93, 101, 105, 236, 270, 390, 501, 565, 573, 589, 604, 626, 644, 646, 649, 653, 659, 694, 736, 754, 772, 774, 778, 822, 844], "big": [6, 7, 806, 829, 867, 878], "jnp": [6, 7, 34, 39, 43, 44, 45, 46, 49, 55, 57, 61, 828, 845, 846, 849, 852, 856, 861, 865, 875, 876], "ref": [6, 7, 12, 13, 19, 20, 24, 25, 93, 97, 271, 285, 288, 294, 301, 644, 651, 725, 835, 856], "fast": [6, 7, 37, 48, 69, 387, 410, 878], "valu": [6, 7, 26, 55, 56, 58, 59, 65, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 112, 114, 115, 117, 130, 134, 135, 137, 138, 144, 147, 148, 149, 150, 153, 159, 164, 181, 185, 191, 224, 225, 232, 233, 234, 235, 237, 239, 240, 241, 248, 252, 253, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 314, 319, 322, 323, 325, 332, 334, 340, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 360, 361, 363, 364, 366, 369, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 398, 399, 410, 423, 430, 431, 433, 435, 439, 442, 446, 452, 457, 459, 461, 463, 464, 465, 467, 468, 469, 470, 479, 485, 490, 496, 501, 503, 504, 505, 506, 508, 510, 513, 515, 520, 521, 523, 524, 530, 532, 535, 536, 537, 540, 541, 542, 543, 544, 550, 552, 553, 554, 556, 561, 564, 565, 567, 572, 573, 574, 581, 588, 589, 593, 594, 595, 598, 607, 612, 617, 618, 621, 624, 625, 626, 627, 628, 629, 633, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 678, 682, 685, 686, 690, 691, 692, 695, 696, 697, 698, 699, 700, 703, 706, 714, 715, 716, 720, 721, 729, 730, 731, 735, 737, 738, 739, 740, 741, 746, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 786, 788, 791, 792, 793, 794, 796, 798, 803, 806, 807, 808, 809, 810, 811, 819, 826, 832, 835, 836, 839, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 856, 857, 860, 862, 863, 865, 867, 874, 878, 879], "emerg": [8, 9, 871, 878], "popular": [8, 9, 10, 11, 839, 878], "Its": [8, 9, 69, 389, 464, 878], "python": [8, 9, 10, 11, 21, 22, 27, 33, 46, 51, 55, 57, 58, 59, 61, 62, 69, 78, 92, 101, 138, 219, 231, 259, 294, 387, 394, 433, 520, 521, 522, 523, 524, 626, 641, 643, 644, 646, 655, 753, 754, 755, 756, 758, 816, 821, 822, 826, 828, 833, 835, 836, 839, 842, 843, 844, 849, 850, 857, 859, 860, 866, 867, 869, 874, 878, 879], "superior": [8, 9], "eager": [8, 9, 23, 31, 32, 35, 38, 40, 46, 49, 50, 61, 826, 843, 867, 878], "mode": [8, 9, 10, 11, 12, 13, 49, 61, 69, 74, 86, 92, 97, 108, 109, 110, 111, 112, 113, 222, 225, 230, 235, 252, 285, 339, 377, 378, 381, 386, 387, 388, 390, 418, 423, 431, 432, 444, 446, 454, 456, 457, 463, 479, 489, 494, 496, 497, 499, 501, 504, 505, 509, 590, 591, 592, 596, 597, 599, 600, 614, 615, 619, 620, 622, 623, 643, 644, 646, 648, 649, 673, 696, 799, 807, 808, 809, 825, 826, 835, 836, 838, 843, 846, 847, 850, 863, 867, 878], "made": [8, 9, 19, 20, 24, 25, 43, 69, 76, 92, 388, 390, 448, 474, 475, 476, 725, 834, 836, 837, 839, 840, 843, 844, 849, 851, 853, 855, 856, 857, 861, 863, 865, 878], "favorit": [8, 9, 871], "increasingli": [8, 9, 847, 874], "span": [8, 9, 836], "industri": [8, 9, 871, 878], "still": [8, 9, 23, 26, 36, 38, 39, 43, 44, 46, 47, 50, 74, 86, 97, 649, 699, 791, 834, 835, 836, 840, 841, 845, 848, 849, 851, 853, 856, 857, 860, 863, 867, 874, 875, 878], "practition": [8, 9, 10, 11, 23, 878], "larg": [8, 9, 23, 58, 68, 69, 91, 92, 235, 252, 259, 285, 286, 390, 399, 504, 534, 644, 649, 697, 830, 835, 836, 842, 844, 850, 871, 874, 878], "unabl": [8, 9, 14, 23, 24, 25, 836, 863], "rich": [8, 9, 23, 872], "ecosystem": [8, 9, 23, 871, 878], "state": [8, 9, 23, 30, 41, 42, 57, 73, 92, 96, 112, 199, 200, 201, 202, 203, 285, 387, 433, 614, 616, 619, 621, 622, 642, 644, 646, 648, 673, 674, 789, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 832, 835, 842, 845, 846, 848, 849, 850, 851, 852, 857, 860, 865, 872, 875], "art": [8, 9, 23, 42, 872], "sota": [8, 9, 10, 11, 23], "inaccur": [8, 9, 23], "dynam": [8, 9, 15, 16, 23, 50, 651, 721, 809, 816, 838, 844, 845, 846, 856, 857, 862, 866, 871, 874, 878], "connect": [8, 9, 21, 22, 23, 57, 807, 830, 835, 842, 859], "layer": [8, 9, 10, 11, 15, 16, 17, 23, 27, 29, 33, 39, 40, 43, 44, 55, 60, 69, 77, 92, 100, 654, 673, 674, 675, 752, 804, 806, 808, 809, 810, 811, 812, 828, 848, 857, 861, 863, 865, 875, 878], "togeth": [8, 9, 23, 69, 86, 92, 346, 363, 384, 388, 442, 812, 837, 840, 843, 845, 856, 857, 860, 861, 863, 865, 867, 878, 879], "For": [8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 35, 43, 44, 46, 49, 51, 65, 69, 74, 80, 92, 97, 138, 151, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 257, 258, 259, 266, 267, 268, 273, 274, 275, 276, 277, 280, 285, 287, 288, 290, 294, 295, 296, 297, 298, 299, 302, 303, 305, 342, 343, 344, 347, 348, 350, 371, 381, 384, 388, 390, 454, 456, 476, 496, 499, 641, 644, 649, 651, 657, 659, 697, 699, 703, 714, 725, 764, 765, 766, 767, 775, 777, 778, 780, 792, 804, 834, 835, 836, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 872, 874, 879], "seamless": [8, 9, 23, 866, 872, 880], "wai": [8, 9, 23, 26, 31, 32, 33, 36, 38, 43, 47, 49, 55, 109, 112, 828, 830, 833, 834, 835, 839, 840, 841, 842, 844, 845, 846, 856, 857, 858, 860, 863, 867, 868, 876], "introduc": [8, 9, 23, 43, 44, 259, 644, 651, 657, 722, 764, 834, 843, 844, 845, 854, 858, 860, 863], "pipelin": [8, 9, 10, 11, 23, 828, 830, 838, 839, 840, 858, 861, 869, 875, 878, 879], "blog": [8, 9, 10, 11, 23, 836], "through": [8, 9, 10, 11, 23, 42, 44, 49, 57, 69, 92, 112, 240, 399, 540, 541, 644, 653, 736, 742, 809, 821, 829, 832, 833, 834, 836, 837, 838, 841, 842, 843, 844, 846, 847, 849, 850, 851, 853, 854, 856, 857, 858, 860, 862, 863, 865, 874, 878, 879], "train": [8, 9, 10, 11, 27, 29, 40, 43, 44, 60, 69, 71, 73, 92, 94, 96, 112, 387, 388, 393, 411, 412, 413, 460, 513, 515, 627, 628, 633, 647, 648, 671, 673, 675, 678, 806, 807, 808, 809, 810, 828, 843, 846, 853, 867, 875, 880], "illustr": [8, 9, 23, 35, 46, 841, 865], "workflow": [8, 9, 23, 36, 47, 58, 834, 836, 837, 841, 845, 855, 857, 869, 880], "pre": [8, 9, 43, 44, 832, 834, 859, 860, 865, 867, 868, 878], "convnext": [8, 9, 19, 20, 23], "belong": [8, 9, 86, 834, 839], "convolut": [8, 9, 23, 40, 69, 73, 92, 96, 387, 408, 426, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 793, 807, 826, 875, 878], "neural": [8, 9, 648, 803, 807, 828, 875, 878, 880], "network": [8, 9, 33, 40, 43, 44, 55, 57, 62, 648, 672, 803, 806, 807, 828, 843, 853, 866, 875, 878, 880], "cnn": [8, 9, 43, 44, 878], "architectur": [8, 9, 23, 60, 828, 835, 867, 878, 880], "inspir": [8, 9, 840], "vision": [8, 9, 10, 11, 42, 43, 44, 62], "perform": [8, 9, 12, 13, 14, 17, 26, 35, 37, 39, 40, 43, 44, 46, 48, 55, 57, 65, 69, 73, 74, 82, 83, 88, 92, 93, 96, 97, 105, 106, 125, 129, 149, 150, 222, 230, 252, 285, 306, 353, 375, 384, 385, 387, 388, 390, 397, 399, 410, 411, 412, 413, 415, 416, 420, 421, 429, 431, 457, 473, 527, 535, 536, 557, 558, 559, 572, 573, 574, 590, 600, 638, 641, 643, 644, 646, 648, 649, 652, 653, 659, 660, 671, 674, 690, 699, 701, 706, 730, 731, 732, 740, 741, 772, 773, 776, 782, 783, 786, 803, 807, 822, 826, 839, 840, 841, 843, 845, 846, 847, 852, 853, 854, 856, 857, 858, 860, 861, 863, 865, 867, 871, 872, 874, 875, 878, 879], "strength": [8, 9, 871, 872], "wise": [8, 9, 43, 63, 68, 69, 74, 85, 91, 92, 97, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 232, 233, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 259, 260, 261, 262, 263, 264, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 290, 291, 293, 294, 301, 306, 307, 308, 309, 310, 311, 313, 315, 317, 318, 319, 321, 322, 323, 346, 349, 354, 357, 358, 359, 362, 363, 364, 365, 369, 370, 373, 374, 379, 384, 387, 388, 390, 411, 412, 413, 440, 447, 483, 490, 492, 493, 512, 638, 644, 651, 680, 714, 811, 863], "supervis": [8, 9, 10, 11, 69, 389, 464], "convent": [8, 9, 299, 644, 649, 659, 689, 774, 836, 841, 852, 861], "demonstr": [8, 9, 10, 11, 23, 26, 39, 43, 44, 58, 837, 845, 847, 849], "improv": [8, 9, 19, 20, 24, 25, 26, 43, 46, 831, 836, 845, 852, 853, 863, 865, 869, 874, 878], "scalabl": [8, 9, 865], "sometim": [8, 9, 834, 835, 836, 839, 845, 853, 857, 860, 863], "rival": [8, 9], "even": [8, 9, 19, 20, 23, 39, 43, 44, 69, 92, 109, 252, 285, 290, 295, 390, 399, 496, 534, 644, 828, 835, 836, 837, 839, 841, 844, 845, 846, 848, 852, 853, 856, 857, 858, 863, 867], "downsampl": [8, 9, 21, 22, 23, 69, 92, 423], "detial": [8, 9], "outsid": [8, 9, 23, 651, 714, 725, 845, 846, 853], "scope": [8, 9, 23, 841, 879], "demo": [8, 9, 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 44, 51, 55, 59, 828], "interest": [8, 9, 10, 11, 23, 40, 43, 55, 252, 285, 644, 834, 836], "reader": [8, 9, 10, 11, 23], "paper": [8, 9, 23, 648, 675, 828], "mostli": [8, 9, 23, 846, 856, 860], "kera": [8, 9, 15, 16, 17, 23, 27, 29, 40, 43, 44, 60, 61, 804, 828, 875], "wrapper": [8, 9, 35, 69, 92, 310, 799, 840, 842, 843, 845, 849, 853, 856, 857, 860, 869, 878], "prepar": [8, 9, 23, 44, 57, 59, 62, 844], "data": [8, 9, 10, 11, 29, 37, 39, 40, 44, 49, 57, 59, 62, 63, 65, 68, 69, 70, 73, 74, 76, 78, 79, 80, 81, 82, 83, 85, 86, 88, 91, 92, 93, 96, 97, 99, 101, 102, 103, 104, 105, 106, 114, 115, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 169, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 198, 204, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 312, 313, 314, 315, 324, 325, 326, 327, 328, 329, 330, 341, 342, 343, 344, 345, 347, 348, 349, 366, 371, 379, 381, 384, 387, 388, 390, 394, 398, 399, 402, 411, 412, 413, 429, 431, 433, 439, 441, 461, 479, 501, 504, 505, 507, 508, 520, 521, 522, 523, 524, 530, 534, 535, 536, 540, 543, 544, 561, 574, 576, 577, 580, 607, 638, 641, 643, 644, 646, 648, 649, 651, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 715, 718, 719, 721, 722, 724, 725, 729, 737, 754, 755, 756, 758, 759, 760, 762, 763, 768, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 791, 792, 793, 794, 799, 803, 806, 807, 808, 809, 813, 822, 826, 835, 838, 839, 840, 841, 842, 843, 846, 848, 852, 853, 854, 856, 858, 861, 863, 865, 869, 878, 879], "experiment": [8, 17, 23, 826, 832, 836, 845, 857, 861, 865, 878], "set_memory_growth": [8, 23], "list_physical_devic": [8, 9, 23], "manual_se": [8, 9, 10, 11, 23, 40], "set_se": [8, 9, 23], "51": [8, 9, 23, 26, 55, 59, 68, 69, 91, 92, 93, 101, 247, 285, 298, 388, 409, 463, 644, 756, 791], "38": [8, 9, 24, 25, 26, 55, 57, 59, 62, 66, 69, 91, 92, 101, 177, 302, 369, 384, 387, 399, 407, 426, 429, 430, 535, 642, 644, 649, 691, 791, 847], "926817": [8, 9], "e": [8, 9, 24, 25, 43, 60, 61, 65, 69, 74, 78, 80, 81, 82, 84, 91, 92, 97, 101, 104, 105, 107, 109, 110, 114, 141, 150, 151, 154, 155, 159, 163, 192, 205, 232, 233, 234, 238, 240, 241, 244, 246, 248, 252, 253, 255, 258, 259, 265, 266, 273, 274, 275, 276, 283, 284, 285, 286, 288, 292, 294, 295, 298, 299, 303, 313, 340, 347, 348, 381, 384, 387, 388, 389, 390, 394, 399, 400, 406, 407, 410, 424, 425, 426, 427, 431, 444, 447, 455, 469, 504, 508, 520, 521, 522, 523, 524, 535, 536, 545, 639, 641, 642, 643, 644, 648, 649, 651, 653, 655, 657, 658, 659, 675, 680, 685, 686, 689, 690, 692, 695, 698, 699, 700, 703, 706, 717, 725, 736, 740, 741, 742, 745, 750, 751, 754, 755, 756, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 807, 821, 822, 826, 828, 829, 832, 834, 835, 836, 838, 839, 841, 843, 845, 849, 850, 855, 857, 860, 865, 867, 868, 869, 874], "extern": [8, 9, 843, 852, 857, 860, 861], "local_xla": [8, 9], "xla": [8, 9, 24, 25, 857, 867, 869, 878], "stream_executor": [8, 9, 24, 25], "cuda_dnn": [8, 9, 24, 25], "cc": [8, 9, 24, 25, 37, 40, 58, 850], "9261": [8, 9], "regist": [8, 9, 24, 25, 809, 836, 874], "cudnn": [8, 9, 23, 24, 25], "factori": [8, 9, 24, 25, 69, 389, 468, 469, 822], "plugin": [8, 9, 24, 25, 835], "926873": [8, 9], "cuda_fft": [8, 9, 24, 25], "607": [8, 9], "cufft": [8, 9, 23, 24, 25], "928224": [8, 9], "cuda_bla": [8, 9, 24, 25], "1515": [8, 9], "cubla": [8, 9, 23, 24, 25], "936743": [8, 9], "cpu_feature_guard": [8, 9, 37, 40], "182": [8, 9, 37, 40, 92], "instruct": [8, 9, 37, 40, 86, 115, 828, 834, 835, 839, 849, 851, 858, 860, 868, 879], "avx2": [8, 9, 37, 40], "fma": [8, 9, 37, 40], "rebuild": [8, 9, 37, 40, 86, 115], "flag": [8, 9, 23, 37, 40, 86, 208, 389, 399, 466, 534, 643, 648, 675, 788, 799, 810, 836, 845, 846, 856, 857, 858, 860, 874, 875], "40": [8, 9, 14, 15, 16, 23, 26, 55, 57, 59, 69, 70, 91, 92, 93, 101, 105, 115, 246, 250, 270, 299, 361, 384, 387, 390, 407, 409, 419, 425, 501, 557, 559, 564, 565, 589, 604, 626, 629, 644, 646, 647, 649, 653, 659, 688, 694, 742, 755, 774, 778, 844], "071672": [8, 9], "w": [8, 9, 12, 13, 24, 25, 58, 59, 69, 70, 71, 73, 86, 91, 92, 93, 94, 96, 109, 279, 361, 376, 384, 386, 387, 388, 393, 406, 407, 408, 410, 424, 425, 426, 427, 443, 463, 518, 533, 557, 559, 604, 627, 628, 629, 631, 633, 634, 635, 646, 647, 648, 653, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 739, 838, 855, 866, 875], "tf2tensorrt": [8, 9, 24, 25], "py_util": [8, 9, 24, 25], "trt": [8, 9, 24, 25], "find": [8, 9, 14, 24, 25, 31, 36, 42, 58, 59, 62, 74, 80, 86, 97, 649, 653, 657, 692, 735, 764, 765, 766, 767, 821, 822, 828, 829, 830, 831, 833, 834, 835, 836, 839, 842, 844, 850, 855, 860, 863, 865, 868, 869, 874], "tensorrt": [8, 9, 24, 25], "map": [8, 9, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 153, 155, 161, 165, 167, 180, 184, 185, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 384, 387, 411, 412, 413, 431, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 502, 504, 505, 506, 508, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 626, 631, 636, 646, 653, 662, 663, 664, 665, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 740, 741, 745, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 822, 840, 843, 845, 852, 853, 857, 860, 861, 867, 869, 875, 879], "dataset": [8, 9, 10, 11, 23, 26, 43, 86, 874, 875], "gist": [8, 9], "yrevar": [8, 9], "942d3a0ac09ec9e5eb3a": [8, 9], "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": [8, 9], "imagenet1000_clsidx_to_label": [8, 9], "idx2label": [8, 9], "read": [8, 9, 57, 59, 69, 76, 86, 88, 92, 99, 146, 390, 486, 641, 651, 721, 834, 835, 842, 844, 850, 860, 862, 863, 878], "185": [8, 9, 21, 22, 57, 85], "199": [8, 9, 21, 22, 57, 238, 644], "108": [8, 9, 21, 22, 26, 37, 39, 40, 57, 648, 659, 672, 774], "109": [8, 9, 21, 22, 57, 74, 649, 687], "111": [8, 9, 21, 22, 57, 653, 751], "443": [8, 9, 21, 22, 57, 297, 644], "sent": [8, 9, 21, 22, 57], "await": [8, 9, 21, 22, 57], "respons": [8, 9, 21, 22, 23, 57, 393, 518, 836, 844, 845], "200": [8, 9, 21, 22, 23, 26, 57, 93, 96, 246, 387, 411, 412, 565, 589, 644, 646, 821], "ok": [8, 9, 21, 22, 57, 835], "30564": [8, 9], "30k": [8, 9], "plain": [8, 9, 21, 22, 57], "imagenet1000_clsidx": [8, 9], "85k": [8, 9], "003": [8, 9], "is_avail": [8, 9, 23, 26], "url": [8, 9, 10, 11, 19, 20, 23, 24, 25, 39, 43, 44, 57, 60, 828, 875], "cocodataset": [8, 9, 10, 11, 19, 20, 24, 25, 39, 43, 44, 60, 828, 875], "org": [8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 39, 43, 44, 57, 59, 60, 62, 68, 69, 91, 92, 94, 159, 167, 255, 265, 266, 281, 340, 347, 348, 381, 384, 387, 390, 399, 431, 504, 534, 627, 628, 641, 642, 644, 647, 649, 651, 659, 697, 698, 729, 779, 828, 848, 875], "val2017": [8, 9, 10, 11, 19, 20, 24, 25, 43, 60], "000000039769": [8, 9, 10, 11, 19, 20, 24, 25, 43, 60], "stream": [8, 9, 10, 11, 19, 20, 24, 25, 39, 43, 44, 57, 60, 67, 90, 226, 643, 828, 875], "initialis": [8, 9, 23, 839, 857, 860], "api": [8, 9, 10, 11, 14, 23, 30, 35, 40, 41, 46, 59, 61, 68, 69, 74, 91, 92, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 167, 177, 180, 190, 192, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 347, 348, 350, 384, 387, 390, 399, 431, 504, 508, 534, 641, 642, 644, 649, 651, 656, 657, 658, 659, 660, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 715, 717, 718, 719, 721, 722, 724, 725, 729, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 828, 832, 835, 836, 838, 840, 842, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 860, 863, 866, 867, 869, 871, 878], "convnextxlarg": [8, 9], "arbitrari": [8, 9, 23, 35, 46, 65, 66, 69, 86, 89, 92, 151, 165, 192, 334, 389, 466, 474, 475, 476, 629, 641, 642, 647, 852, 853, 855, 856, 857, 860, 867, 874, 876, 879], "regardless": [8, 9, 23, 43, 44, 55, 86, 829, 845, 849], "host": [8, 9, 23, 826, 830, 844, 867], "convnext_xlarg": [8, 9], "include_top": [8, 9, 29, 828], "include_preprocess": [8, 9], "input_tensor": [8, 9, 69, 92, 388, 389, 460, 464, 469, 857], "input_shap": [8, 9, 19, 20, 29, 40, 43, 44, 828], "pool": [8, 9, 69, 92, 96, 387, 401, 402, 403, 404, 406, 407, 408, 424, 425, 426, 427, 430, 807, 835], "classifier_activ": [8, 9], "936026": [8, 9], "common_runtim": [8, 9, 58], "gpu_devic": [8, 9], "1929": [8, 9], "job": [8, 9, 43, 44, 828, 842, 844, 875], "localhost": [8, 9], "replica": [8, 9], "14791": [8, 9], "tesla": [8, 9], "v100": [8, 9, 19, 20], "pcie": [8, 9], "16gb": [8, 9], "pci": [8, 9], "bu": [8, 9, 97], "id": [8, 9, 26, 58, 69, 92, 208, 342, 343, 344, 381, 569, 643, 646, 828, 833, 835, 840, 842, 843, 851, 855, 860, 868], "0001": [8, 9, 68, 69, 92, 295, 296, 388, 457, 463, 791, 794, 811], "over": [8, 9, 10, 11, 15, 16, 23, 33, 40, 44, 46, 57, 69, 74, 82, 83, 84, 89, 92, 96, 97, 105, 106, 107, 109, 134, 332, 333, 347, 348, 361, 368, 381, 384, 387, 388, 389, 390, 397, 399, 401, 402, 403, 404, 407, 416, 421, 425, 429, 430, 431, 432, 433, 434, 456, 464, 473, 486, 501, 504, 505, 508, 527, 537, 543, 592, 626, 640, 646, 649, 654, 655, 659, 660, 680, 690, 701, 703, 705, 706, 752, 756, 775, 776, 777, 778, 779, 780, 781, 782, 783, 807, 810, 816, 821, 828, 835, 836, 841, 847, 848, 855, 856, 858, 861, 865, 867, 871, 878], "wonder": [8, 9], "why": [8, 9, 33, 828, 836, 856, 870], "One": [8, 9, 10, 11, 23, 59, 69, 70, 76, 78, 92, 93, 99, 101, 112, 390, 474, 475, 476, 479, 496, 505, 508, 558, 646, 651, 655, 721, 754, 840, 843, 845, 847, 853, 858, 860], "reason": [8, 9, 23, 294, 303, 644, 834, 836, 839, 840, 843, 844, 845, 847, 853, 856, 857, 860, 861, 863], "highlight": [8, 9, 836, 844, 847, 857, 859], "directli": [8, 9, 27, 29, 33, 36, 40, 43, 44, 47, 387, 388, 423, 447, 653, 745, 828, 834, 835, 836, 837, 839, 840, 843, 844, 845, 846, 848, 851, 853, 854, 856, 857, 858, 861, 862, 865, 866, 867, 874, 875, 876], "much": [8, 9, 19, 20, 24, 25, 26, 33, 34, 40, 43, 44, 45, 46, 57, 112, 346, 363, 384, 806, 834, 835, 836, 840, 843, 845, 853, 856, 857, 858, 861, 862, 863, 865, 878], "There": [8, 9, 23, 33, 40, 44, 49, 109, 380, 382, 383, 391, 392, 396, 793, 834, 835, 836, 839, 840, 842, 843, 845, 846, 847, 849, 851, 853, 855, 857, 858, 862, 865, 867, 868, 874, 879], "deeper": [8, 9, 33, 44, 64, 653, 744, 745, 828, 836, 838, 860, 864], "offer": [8, 9, 857, 872, 878, 880], "limit": [8, 9, 86, 115, 177, 180, 552, 553, 569, 642, 646, 651, 714, 791, 793, 794, 806, 813, 822, 835, 836, 842, 844, 847, 849, 857, 860, 863, 867, 878, 879, 880], "soon": [8, 9, 834, 836, 844, 845, 867, 874], "comparison": [8, 9, 17, 21, 22, 69, 92, 253, 288, 349, 384, 389, 468, 469, 644, 649, 700, 786, 849], "separ": [8, 9, 58, 69, 70, 92, 393, 514, 561, 646, 648, 675, 788, 799, 835, 836, 840, 843, 844, 847, 858, 859, 860, 865, 879], "stai": [8, 9, 844], "origin": [8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 26, 40, 42, 43, 44, 45, 46, 47, 49, 56, 57, 58, 62, 69, 74, 76, 82, 86, 92, 97, 99, 105, 109, 112, 114, 115, 240, 265, 292, 331, 381, 387, 388, 390, 399, 431, 457, 489, 495, 497, 500, 535, 536, 540, 541, 542, 543, 544, 644, 649, 651, 659, 690, 721, 722, 773, 788, 793, 816, 817, 828, 830, 834, 835, 836, 841, 842, 844, 845, 850, 854, 856, 857, 858, 865, 866, 874, 875, 878, 879, 880], "convert_to_tensor": [8, 9, 14, 23, 42, 828, 866], "tmp": [8, 9, 57, 59, 601, 624, 646], "ipykernel_65585": [8, 9], "3221769294": [8, 9], "_eagertensorbas": [8, 9], "op": [8, 9, 27, 33, 55, 803, 816, 826, 861, 865, 866, 867], "deprec": [8, 9, 62], "futur": [8, 9, 15, 16, 33, 38, 40, 43, 57, 649, 685, 686, 835, 836, 837, 844, 845, 860, 861, 863, 867], "instead": [8, 9, 23, 24, 25, 27, 29, 33, 37, 39, 40, 43, 50, 57, 62, 68, 69, 74, 91, 92, 97, 110, 206, 294, 328, 381, 387, 399, 424, 425, 426, 534, 537, 643, 644, 649, 692, 791, 834, 835, 836, 839, 842, 844, 845, 847, 848, 849, 852, 853, 854, 856, 857, 858, 860, 863, 865, 867, 874, 875, 876, 878], "logits_np": [8, 9, 10, 11, 23], "class_id": [8, 9], "int": [8, 9, 10, 11, 12, 13, 57, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 112, 114, 118, 125, 129, 130, 139, 140, 144, 146, 147, 148, 149, 150, 153, 157, 158, 159, 166, 173, 176, 177, 180, 187, 202, 216, 217, 218, 225, 226, 235, 242, 243, 244, 245, 246, 247, 259, 262, 286, 290, 295, 301, 304, 312, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 352, 353, 357, 361, 368, 370, 372, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 442, 444, 445, 446, 447, 449, 454, 456, 457, 460, 461, 463, 468, 472, 473, 477, 481, 482, 485, 486, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 510, 511, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 547, 557, 558, 559, 561, 564, 565, 568, 569, 583, 586, 588, 603, 604, 605, 606, 610, 626, 627, 628, 629, 630, 633, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 680, 682, 683, 690, 691, 696, 701, 703, 704, 705, 706, 708, 709, 710, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 739, 740, 742, 744, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 766, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 803, 806, 807, 821, 822, 826, 843, 845, 846, 847, 849, 852, 853, 856, 858, 860, 861, 863, 865, 874], "argmax": [8, 9, 10, 11, 12, 13, 23, 58, 59, 60, 79, 102, 390, 501, 656, 857, 874], "57": [8, 9, 21, 22, 26, 55, 57, 68, 69, 91, 92, 210, 233, 234, 237, 238, 240, 250, 251, 291, 307, 308, 379, 643, 644], "342029": [8, 9], "local_tsl": [8, 9], "tsl": [8, 9], "subprocess": [8, 9], "304": [8, 9], "cannot": [8, 9, 15, 16, 57, 58, 59, 62, 69, 302, 474, 475, 476, 644, 836, 839, 841, 845, 857, 866], "spawn": [8, 9, 585, 646], "child": [8, 9], "906376": [8, 9], "454": [8, 9], "8904": [8, 9], "993553": [8, 9], "58": [8, 9, 10, 11, 17, 18, 55, 276, 552, 644, 646], "578886": [8, 9], "servic": [8, 9], "168": [8, 9, 59, 552, 646, 653, 733], "0x558ecdd86830": [8, 9], "guarante": [8, 9, 657, 764, 766, 826, 840, 845, 856, 867], "578915": [8, 9], "176": [8, 9, 552, 646], "streamexecutor": [8, 9], "messag": [8, 9, 23, 813, 823, 827, 835, 836, 844, 847, 849, 851, 857, 866], "absl": [8, 9, 57], "initializelog": [8, 9], "stderr": [8, 9], "i0000": [8, 9], "1710255118": [8, 9], "868823": [8, 9], "65585": [8, 9], "device_compil": [8, 9], "h": [8, 9, 12, 13, 69, 70, 73, 92, 93, 96, 387, 393, 407, 408, 425, 426, 518, 557, 559, 646, 648, 653, 661, 664, 665, 666, 667, 668, 669, 670, 736, 740, 742, 745, 750, 829, 838, 842, 843, 844, 875], "186": [8, 9], "cluster": [8, 9, 69, 92, 388, 442, 867, 878], "lifetim": [8, 9], "grei": [8, 9], "fox": [8, 9], "grai": [8, 9], "urocyon": [8, 9], "cinereoargenteu": [8, 9], "eagerli": [8, 9, 23, 37, 38, 43, 44, 48, 49, 50, 57, 874, 875, 876], "explain": [8, 9, 10, 11, 23, 49, 69, 92, 387, 421, 432, 828, 834, 835, 836, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 860, 861, 863, 865, 866, 877], "doc": [8, 9, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 58, 59, 92, 159, 340, 347, 348, 381, 384, 536, 641, 828, 829, 833, 834, 838, 847, 848, 851, 852, 860, 865, 874, 875, 876], "involv": [8, 9, 23, 27, 30, 40, 66, 89, 192, 235, 252, 259, 285, 290, 642, 644, 822, 829, 837, 838, 844, 845, 847, 858, 863, 878], "dummi": [8, 9, 23, 37, 48, 49, 50, 56, 836], "transpiled_model": [8, 9, 10, 11, 23], "backend_compil": [8, 9, 43, 44], "root": [8, 9, 10, 11, 15, 16, 21, 22, 23, 24, 25, 37, 39, 40, 57, 58, 59, 62, 68, 91, 299, 644, 830, 834, 835, 836, 842, 850, 857], "placement": [8, 9, 23, 24, 25, 834], "case": [8, 9, 23, 27, 29, 35, 37, 43, 44, 46, 47, 48, 49, 57, 64, 65, 69, 70, 76, 82, 86, 88, 92, 93, 99, 109, 110, 115, 140, 151, 178, 179, 206, 211, 212, 219, 227, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 257, 258, 259, 260, 266, 267, 268, 273, 274, 275, 276, 277, 280, 285, 288, 290, 294, 295, 296, 297, 298, 299, 302, 303, 305, 347, 348, 359, 361, 371, 384, 387, 389, 390, 393, 394, 400, 411, 412, 413, 433, 464, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 501, 502, 508, 511, 513, 515, 522, 545, 562, 563, 567, 574, 588, 589, 590, 641, 642, 643, 644, 646, 649, 651, 653, 659, 697, 703, 717, 718, 719, 721, 723, 724, 726, 728, 736, 742, 775, 776, 777, 778, 779, 780, 781, 791, 792, 811, 822, 828, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 863, 865, 867, 874, 875, 876], "ad": [8, 9, 21, 22, 23, 24, 25, 26, 37, 39, 40, 69, 76, 92, 99, 107, 252, 285, 346, 363, 384, 393, 513, 514, 515, 604, 605, 644, 646, 648, 649, 651, 675, 685, 686, 717, 807, 812, 828, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 861, 863, 867, 874, 878, 880], "logits_transpil": [8, 9, 23], "logits_transpiled_np": [8, 9, 23], "class_id_transpil": [8, 9], "But": [8, 9, 10, 11, 43, 44, 793, 843, 844, 848, 851, 854, 863, 865], "produc": [8, 9, 10, 11, 15, 16, 23, 56, 69, 70, 73, 92, 96, 314, 324, 327, 379, 381, 387, 435, 648, 678, 791, 822, 834, 845, 850, 851, 856, 858, 860, 861, 874, 879], "granular": [8, 9, 10, 11, 23], "level": [8, 9, 10, 11, 23, 33, 43, 44, 46, 69, 92, 93, 388, 460, 549, 822, 826, 828, 829, 834, 835, 836, 837, 843, 845, 849, 853, 855, 856, 857, 859, 862, 863, 865, 866, 867, 869, 878, 879], "close": [8, 9, 10, 11, 23, 59, 74, 257, 275, 295, 324, 381, 644, 649, 651, 699, 717, 831, 832, 834, 835, 836, 837, 845, 848, 850, 857, 863, 878], "inde": [8, 9, 10, 11, 23, 852, 863, 867], "benefit": [8, 9, 10, 11, 23, 44, 835, 840, 843, 856, 863, 867, 872], "trainabl": [8, 9, 10, 11, 23, 27, 29, 33, 39, 40, 43, 44, 61, 804, 808, 809, 812, 828, 848, 875, 876], "cifar": [8, 9, 10, 11], "dataload": [8, 9, 10, 11, 23], "cifar10": [8, 9, 10, 11], "batch_siz": [8, 9, 10, 11, 23, 57, 59, 62, 69, 73, 78, 92, 96, 101, 387, 389, 406, 407, 408, 424, 425, 426, 427, 471, 648, 650, 655, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 711, 753], "shuffl": [8, 9, 10, 11, 23, 59, 69, 78, 86, 92, 101, 522, 655], "drop_last": [8, 9, 10, 11], "num_work": [8, 9, 10, 11, 23], "sgd": [8, 9, 10, 11, 23, 57, 811, 878], "lr": [8, 9, 57, 71, 94, 548, 628, 631, 633, 634, 635, 646, 647, 811], "1e": [8, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 42, 43, 55, 59, 66, 69, 71, 74, 75, 77, 89, 92, 94, 97, 98, 100, 113, 177, 346, 363, 384, 389, 393, 469, 513, 514, 515, 594, 595, 604, 617, 618, 627, 628, 633, 635, 642, 646, 647, 649, 650, 654, 699, 708, 709, 710, 752, 786, 788, 808, 810, 811, 832, 843, 850, 853, 856, 858], "loss_fn": [8, 9, 23, 43, 44, 55, 57, 59], "crossentropyloss": [8, 9, 57, 808], "epoch": [8, 9, 10, 11, 23, 43, 44, 57, 59], "loss_epoch_arr": [8, 9, 10, 11], "loss_arr": [8, 9, 10, 11], "permut": [8, 9, 12, 13, 21, 22, 57, 76, 99, 114, 397, 526, 651, 719, 726, 875], "loss": [8, 9, 10, 11, 23, 43, 44, 57, 59, 69, 92, 109, 464, 465, 466, 467, 468, 469, 470, 471, 597, 620, 646, 708, 709, 710, 711, 712, 713, 828, 844, 845, 853, 857, 861, 862, 878], "backward": [8, 9, 10, 11, 57, 69, 83, 92, 106, 294, 387, 410, 415, 416, 420, 421, 431, 432, 644, 649, 660, 680, 705, 782, 783, 807, 826, 861, 867], "append": [8, 9, 10, 11, 26, 58, 59, 69, 74, 86, 92, 244, 353, 384, 644, 649, 651, 683, 689, 717, 822, 844, 860, 865], "avg_loss": [8, 9, 10, 11, 57], "02": [8, 9, 21, 22, 24, 25, 57, 65, 70, 71, 77, 78, 91, 94, 101, 150, 237, 238, 277, 387, 409, 419, 420, 604, 605, 627, 628, 633, 641, 644, 646, 647, 654, 655, 752, 755, 756, 858], "94": [8, 9, 23, 26, 55, 68, 69, 71, 78, 91, 92, 94, 101, 219, 295, 296, 372, 384, 419, 631, 643, 647, 756], "ve": [8, 9, 10, 11, 12, 13, 15, 16, 23, 26, 31, 40, 43, 78, 101, 655, 753, 834, 835, 836, 837, 850, 860, 863, 869], "And": [8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 27, 29, 34, 37, 43, 44, 45, 58, 89, 377, 378, 386, 839, 842, 851, 853, 860, 871, 874], "plug": [8, 9, 23], "seen": [8, 9, 23, 27, 29, 34, 40, 43, 388, 394, 447, 522, 569, 646, 816, 844, 845, 847, 849, 857, 860, 865], "d": [8, 9, 10, 11, 23, 58, 69, 70, 73, 74, 76, 88, 92, 93, 96, 97, 99, 112, 128, 150, 159, 192, 235, 252, 253, 285, 288, 340, 381, 387, 388, 390, 393, 394, 397, 406, 407, 408, 415, 420, 424, 425, 426, 427, 429, 433, 439, 455, 476, 482, 484, 487, 491, 505, 507, 511, 518, 520, 526, 549, 560, 638, 641, 642, 644, 648, 649, 651, 653, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 682, 683, 687, 690, 694, 703, 704, 723, 736, 740, 741, 742, 745, 750, 751, 792, 822, 828, 829, 835, 838, 841, 842, 843, 850, 855, 860, 863], "sign": [8, 9, 10, 11, 23, 68, 69, 74, 80, 82, 91, 92, 97, 109, 138, 232, 233, 234, 235, 238, 240, 241, 246, 250, 252, 255, 257, 259, 285, 287, 294, 298, 299, 303, 351, 384, 388, 390, 399, 459, 503, 504, 535, 536, 641, 644, 649, 657, 659, 697, 764, 765, 766, 767, 772, 773, 778, 780, 835, 837, 845, 865, 866], "ask": [8, 9, 10, 11, 23, 828, 834, 835, 847, 867], "server": [8, 9, 10, 11, 23, 57, 828, 835, 836, 842, 850, 868, 878], "forward": [8, 9, 10, 11, 12, 13, 21, 22, 23, 29, 43, 44, 57, 59, 69, 92, 377, 386, 387, 410, 415, 416, 420, 421, 431, 432, 804, 806, 807, 809, 811, 826, 828, 835, 841, 848, 855, 860, 861, 863, 866, 867, 874, 878, 879], "come": [10, 11, 33, 57, 831, 834, 835, 836, 840, 844, 857, 862, 863, 869, 878], "onto": [10, 11, 653, 739, 745, 870, 871, 878], "scene": [10, 11, 838, 864, 870, 871, 878], "almost": [10, 11, 57, 833, 843, 858], "alwai": [10, 11, 65, 66, 69, 70, 76, 88, 89, 92, 99, 122, 140, 164, 235, 285, 358, 384, 388, 390, 459, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 511, 567, 574, 638, 642, 644, 646, 651, 717, 718, 719, 721, 723, 724, 726, 728, 793, 834, 835, 836, 840, 841, 843, 845, 848, 851, 852, 853, 856, 857, 858, 859, 860, 861, 863, 866, 867, 874], "huggingfac": [10, 11, 57, 874, 875], "implement": [10, 11, 26, 33, 34, 43, 45, 49, 57, 60, 66, 67, 69, 80, 81, 89, 90, 92, 97, 104, 109, 164, 178, 179, 192, 211, 212, 226, 232, 233, 234, 237, 238, 239, 240, 249, 250, 252, 255, 257, 259, 273, 274, 275, 276, 285, 287, 290, 294, 297, 298, 302, 303, 347, 348, 371, 384, 388, 399, 440, 441, 540, 541, 562, 563, 642, 643, 644, 646, 648, 649, 657, 658, 659, 675, 684, 685, 686, 694, 703, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 792, 794, 816, 828, 832, 834, 838, 839, 840, 841, 843, 845, 846, 848, 849, 850, 852, 853, 854, 856, 858, 860, 861, 863, 865, 867, 869, 878, 880], "conveni": [10, 11, 36, 47, 834, 845, 846, 852, 858, 869], "who": [10, 11, 831, 837, 838, 849, 864, 867, 878], "must": [10, 11, 49, 57, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 225, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 337, 338, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 355, 356, 358, 360, 362, 364, 365, 366, 367, 371, 374, 379, 381, 384, 387, 388, 389, 390, 393, 394, 397, 399, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 429, 431, 432, 434, 436, 438, 439, 441, 447, 448, 453, 454, 455, 456, 461, 465, 466, 467, 468, 470, 471, 474, 475, 476, 481, 482, 484, 486, 487, 488, 489, 491, 495, 497, 498, 499, 500, 502, 504, 505, 506, 508, 509, 511, 516, 517, 519, 520, 521, 523, 524, 527, 534, 535, 536, 537, 544, 552, 553, 557, 558, 559, 564, 565, 567, 574, 588, 589, 626, 627, 628, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 806, 807, 811, 813, 833, 834, 835, 836, 839, 840, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 857, 860, 861, 862, 863, 865, 875, 876, 879], "reimplement": [10, 11], "choic": [10, 11, 23, 26, 44, 61, 69, 82, 92, 105, 388, 390, 459, 479, 659, 779, 781, 828, 835, 844, 856, 857, 875, 878], "veri": [10, 11, 23, 27, 35, 43, 44, 46, 68, 91, 286, 346, 363, 384, 644, 649, 697, 793, 833, 834, 835, 836, 842, 843, 845, 846, 847, 849, 850, 852, 853, 856, 857, 858, 860, 861, 863, 865, 867, 877, 878, 879], "thousand": [10, 11, 867], "china": [10, 11], "howev": [10, 11, 26, 33, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 74, 97, 259, 302, 303, 390, 393, 504, 513, 515, 592, 644, 646, 649, 697, 699, 816, 834, 835, 839, 840, 841, 843, 845, 846, 847, 848, 849, 851, 852, 853, 856, 857, 858, 860, 863, 865, 866, 867, 871, 874, 878], "suffer": [10, 11], "abov": [10, 11, 33, 38, 43, 44, 49, 50, 65, 68, 69, 74, 78, 85, 91, 92, 97, 101, 110, 130, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 323, 325, 340, 341, 347, 348, 350, 353, 379, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 421, 424, 425, 426, 431, 432, 433, 441, 442, 496, 504, 508, 534, 537, 564, 568, 570, 572, 574, 603, 612, 636, 638, 641, 642, 644, 646, 647, 648, 649, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 754, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 832, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 863, 865, 866, 878], "dinov2": [10, 11], "second": [10, 11, 15, 16, 68, 69, 71, 74, 76, 80, 91, 92, 93, 94, 97, 99, 103, 110, 114, 115, 135, 159, 190, 198, 235, 240, 242, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 270, 271, 272, 277, 278, 279, 281, 282, 285, 288, 290, 301, 331, 340, 346, 359, 361, 362, 363, 369, 373, 374, 381, 384, 388, 389, 390, 397, 399, 440, 441, 442, 444, 448, 470, 502, 510, 521, 523, 527, 534, 537, 549, 598, 621, 627, 628, 633, 640, 641, 642, 644, 646, 647, 649, 651, 652, 653, 657, 680, 683, 684, 685, 687, 689, 694, 696, 697, 699, 701, 703, 705, 725, 726, 731, 734, 764, 765, 766, 811, 835, 839, 842, 845, 847, 851, 856, 857, 860, 862], "iter": [10, 11, 23, 57, 59, 64, 69, 70, 76, 84, 86, 92, 93, 99, 107, 112, 115, 134, 225, 332, 333, 381, 387, 388, 390, 433, 446, 457, 463, 480, 496, 546, 584, 640, 643, 646, 651, 653, 716, 720, 727, 729, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 748, 749, 751, 821, 822, 826, 839, 841, 843, 865, 874], "dino": [10, 11], "meta": [10, 11, 57, 730, 731, 732, 840, 861, 878], "vit": [10, 11], "purpos": [10, 11, 35, 43, 44, 46, 57, 59, 159, 257, 275, 340, 381, 641, 644, 649, 697, 836, 838, 840, 843, 844, 846, 847, 849, 852, 853, 854, 857, 859, 860, 863, 869, 879, 880], "abund": [10, 11], "literatur": [10, 11], "mainli": [10, 11, 834, 838, 855, 857, 860, 869, 878], "focus": [10, 11, 828, 845, 861, 878, 880], "rather": [10, 11, 42, 49, 70, 86, 93, 138, 225, 576, 577, 580, 641, 643, 646, 648, 673, 832, 836, 839, 843, 845, 848, 850, 857, 858, 860, 861, 867, 878, 880], "65": [10, 11, 23, 26, 55, 57, 59, 62, 91, 94, 101, 246, 285, 572, 627, 644, 646, 647, 649, 659, 694, 755, 756, 774, 844], "749": [10, 11], "env": [10, 11, 14, 37, 39, 40], "flags_fraction_of_gpu_memory_to_us": [10, 11], "auto_growth": [10, 11], "paddl": [10, 11, 37, 39, 40, 221, 347, 348, 384, 643, 804, 816, 834, 835, 845, 850], "autoimageprocessor": [10, 11, 874, 875], "automodelforimageclassif": [10, 11], "device_count": [10, 11], "seed": [10, 11, 34, 37, 59, 60, 69, 73, 78, 80, 86, 92, 96, 101, 335, 336, 337, 338, 339, 381, 388, 394, 446, 457, 463, 520, 521, 522, 523, 524, 648, 655, 657, 671, 753, 754, 755, 756, 758, 764, 799, 804, 806, 822, 854, 858, 860], "libpaddl": [10, 11], "0x7c8738e15470": [10, 11], "processor": [10, 11], "facebook": [10, 11, 60], "imagenet1k": [10, 11], "id2label": [10, 11, 60, 874], "predicted_class_idx": [10, 11, 60], "paddle_input": [10, 11], "pixel_valu": [10, 11], "to_tensor": [10, 11, 108, 109, 110, 111, 112, 113], "stop_gradi": [10, 11, 71, 94, 225, 548, 628, 631, 633, 634, 635, 643, 646, 647, 652, 730, 731, 732, 811], "logits_np_transpil": [10, 11], "4th": [10, 11], "decim": [10, 11, 68, 91, 295, 644, 862], "io": [10, 11, 24, 25, 37, 39, 40, 58, 61, 835, 844], "to_rgb": [10, 11], "cv2": [10, 11, 57, 59, 61], "tar": [10, 11, 57, 58, 59, 62], "gz": [10, 11, 57, 58, 59, 62], "bj": [10, 11, 235, 252, 285, 350, 384, 644], "bcebo": [10, 11], "41626": [10, 11], "2m": [10, 11], "cross_entropi": [10, 11, 59, 75, 98, 650, 710, 843, 853, 856], "33": [10, 11, 26, 55, 57, 58, 68, 78, 82, 91, 92, 93, 94, 96, 238, 239, 246, 295, 387, 388, 390, 399, 407, 429, 430, 460, 479, 535, 553, 604, 631, 644, 646, 647, 648, 649, 653, 659, 671, 672, 694, 751, 754, 774, 781, 791, 794], "bring": [10, 11, 43, 44, 839, 859, 860, 865, 869, 871], "hope": [10, 11, 55, 867], "milesi": [12, 13], "blob": [12, 13, 57, 59, 828], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": [12, 13], "data_load": [12, 13], "l65": [12, 13], "mask_valu": [12, 13], "pil_img": [12, 13], "scale": [12, 13, 19, 20, 57, 69, 73, 77, 92, 94, 96, 100, 124, 223, 224, 316, 317, 320, 331, 361, 379, 381, 384, 387, 388, 393, 405, 411, 412, 413, 421, 423, 428, 432, 448, 513, 514, 515, 634, 638, 643, 647, 648, 654, 671, 675, 678, 752, 791, 793, 794, 806, 807, 811, 822, 871, 872, 878], "is_mask": [12, 13], "neww": [12, 13], "newh": [12, 13], "assert": [12, 13, 14, 18, 26, 58, 60, 62, 86, 550, 646, 799, 832, 838, 839, 850, 853, 856, 857, 858, 860, 861], "too": [12, 13, 69, 92, 235, 252, 259, 285, 390, 504, 644, 806, 834, 835, 836, 839, 845, 849, 861, 867], "small": [12, 13, 23, 26, 59, 68, 69, 74, 77, 91, 92, 97, 100, 252, 259, 285, 286, 346, 363, 384, 388, 389, 393, 452, 469, 513, 514, 515, 644, 649, 654, 692, 695, 697, 752, 806, 810, 828, 835, 844, 847, 853, 858, 863, 865, 867, 874, 875, 879], "pixel": [12, 13, 57, 69, 92, 387, 423], "resampl": [12, 13], "nearest": [12, 13, 69, 92, 235, 252, 285, 295, 357, 384, 387, 399, 423, 544, 644, 863], "bicub": [12, 13, 69, 92, 387, 423, 863], "zero": [12, 13, 57, 65, 66, 68, 69, 70, 71, 73, 74, 76, 79, 80, 82, 83, 88, 89, 91, 92, 94, 96, 97, 101, 102, 105, 106, 110, 124, 126, 127, 128, 130, 141, 142, 144, 146, 151, 153, 154, 155, 157, 158, 161, 164, 165, 233, 234, 235, 237, 238, 239, 240, 241, 244, 246, 247, 249, 250, 251, 252, 254, 257, 258, 259, 266, 267, 268, 269, 275, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 302, 303, 305, 306, 308, 310, 311, 315, 317, 323, 325, 334, 341, 347, 348, 351, 352, 353, 357, 365, 368, 370, 371, 372, 373, 379, 381, 384, 387, 388, 390, 397, 399, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 430, 431, 432, 433, 434, 435, 440, 442, 450, 455, 458, 480, 490, 495, 496, 507, 508, 526, 535, 536, 553, 557, 564, 584, 589, 627, 628, 633, 634, 635, 636, 638, 641, 642, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 675, 678, 679, 681, 685, 686, 688, 689, 690, 691, 692, 693, 695, 697, 703, 705, 706, 711, 716, 717, 718, 719, 721, 722, 729, 752, 754, 755, 756, 759, 760, 761, 762, 764, 765, 766, 767, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 806, 807, 811, 826, 840, 843, 845, 846, 847, 852, 854, 855, 858, 865, 866], "ndim": [12, 13, 69, 74, 79, 92, 97, 102, 114, 118, 388, 390, 456, 457, 463, 474, 475, 476, 489, 497, 499, 509, 626, 646, 649, 656, 696, 699, 762, 843, 853, 860], "newaxi": [12, 13, 639], "transpos": [12, 13, 23, 39, 43, 44, 61, 69, 73, 74, 86, 92, 96, 97, 114, 388, 436, 454, 456, 458, 533, 648, 649, 661, 663, 665, 667, 668, 669, 673, 689, 693, 695, 701, 793, 807, 819, 828, 850, 856, 865, 875], "255": [12, 13, 39, 43, 44, 57, 58, 59, 61, 73, 92, 96, 246, 644, 670, 828, 875], "car": [12, 13], "full_img": [12, 13], "from_numpi": [12, 13, 15, 16], "img_numpi": [12, 13], "torch_unet": [12, 13], "unet_carvana": [12, 13], "ivy_unet": [12, 13], "n_channel": [12, 13], "n_class": [12, 13], "l62": [12, 13], "mask_to_imag": [12, 13], "ndarrai": [12, 13, 65, 69, 70, 88, 92, 110, 139, 140, 152, 387, 388, 390, 399, 432, 457, 501, 540, 541, 611, 641, 646, 816, 821, 834, 840, 845, 846, 849, 852, 856, 857, 858, 861, 863, 865, 869], "uint8": [12, 13, 39, 43, 44, 59, 167, 174, 178, 189, 192, 197, 203, 642, 791, 792, 845, 860], "elif": [12, 13, 19, 20, 844, 849, 856, 857, 858], "bool": [12, 13, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 139, 140, 141, 146, 147, 148, 149, 150, 151, 153, 155, 161, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 200, 204, 208, 209, 211, 212, 214, 216, 219, 220, 225, 226, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 341, 346, 347, 348, 349, 350, 352, 354, 362, 363, 368, 369, 371, 373, 374, 375, 381, 384, 385, 387, 388, 389, 390, 393, 399, 406, 407, 408, 410, 411, 412, 413, 423, 424, 425, 426, 429, 431, 433, 435, 442, 446, 449, 450, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 480, 481, 482, 484, 485, 486, 487, 488, 491, 495, 499, 502, 504, 505, 506, 508, 511, 513, 515, 516, 517, 518, 519, 521, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 588, 589, 593, 602, 603, 604, 605, 607, 609, 611, 612, 625, 628, 629, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 671, 672, 673, 674, 675, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 703, 704, 706, 708, 709, 710, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 739, 740, 741, 743, 744, 745, 750, 751, 753, 754, 755, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 789, 791, 792, 793, 803, 807, 810, 811, 821, 822, 826, 845, 847, 849, 856, 857, 860, 861, 863, 865, 874, 875], "fromarrai": [12, 13, 39, 43, 44, 59], "interpol": [12, 13, 57, 69, 92, 365, 384, 387, 399, 544, 648, 675, 863, 878], "bilinear": [12, 13, 69, 92, 387, 423, 863], "torch_mask": [12, 13], "squeez": [12, 13, 57, 76, 99, 651, 878], "torch_result": [12, 13], "to_numpi": [12, 13, 26, 43, 44, 55, 58, 59, 62, 70, 93, 646, 850, 858], "img_tf": [12, 13], "math": [12, 13, 60, 110, 302, 644, 845, 856, 857, 858, 865], "lot": [12, 13, 844, 845, 854, 860, 867], "far": [12, 13, 23, 43, 44, 653, 733, 744, 822, 846, 847], "space": [12, 13, 65, 68, 69, 70, 88, 91, 92, 93, 138, 149, 150, 304, 361, 384, 389, 466, 557, 561, 641, 644, 646, 863], "del": [12, 13, 844], "empty_cach": 12, "permute_dim": [12, 13, 76, 99, 651, 850], "func_wrapp": [12, 13, 63, 68, 69, 85, 91, 92, 122, 123, 124, 125, 126, 127, 128, 129, 130, 303, 307, 312, 313, 315, 379, 638, 644, 803, 846, 857, 862], "242": [12, 13, 92], "mani": [12, 13, 43, 44, 47, 76, 86, 99, 159, 340, 381, 641, 651, 723, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 852, 853, 854, 856, 857, 858, 860, 863, 865, 867, 871, 877, 878], "factor": [12, 13, 26, 69, 71, 73, 74, 92, 94, 96, 97, 108, 109, 110, 111, 112, 223, 224, 225, 387, 388, 393, 421, 432, 446, 447, 457, 460, 462, 463, 518, 627, 628, 633, 634, 643, 647, 648, 649, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 679, 791, 793, 794, 806, 807, 811, 849], "inc": [12, 13], "unetdoubleconv": [12, 13], "down1": [12, 13], "unetdown": [12, 13], "128": [12, 13, 21, 22, 23, 43, 44, 57, 66, 68, 73, 89, 91, 96, 115, 180, 256, 387, 409, 419, 557, 567, 642, 644, 646, 648, 649, 663, 665, 670, 694], "down2": [12, 13], "down3": [12, 13], "down4": [12, 13], "1024": [12, 13, 21, 22, 57, 58, 828], "up1": [12, 13], "unetup": [12, 13], "up2": [12, 13], "up3": [12, 13], "up4": [12, 13], "outc": [12, 13], "unetoutconv": [12, 13], "x1": [12, 13, 33, 43, 44, 62, 66, 68, 69, 70, 74, 79, 89, 91, 92, 93, 97, 102, 104, 114, 115, 119, 165, 175, 191, 198, 218, 235, 240, 242, 244, 245, 246, 247, 252, 253, 259, 260, 261, 262, 263, 264, 270, 271, 272, 277, 278, 279, 281, 282, 283, 284, 285, 288, 290, 294, 301, 306, 325, 346, 351, 358, 359, 360, 362, 364, 369, 373, 381, 384, 388, 390, 399, 458, 490, 534, 546, 549, 642, 643, 644, 646, 649, 656, 658, 680, 687, 689, 694, 698, 701, 702, 705, 763, 770, 788, 813, 828, 839, 845, 847, 849, 852, 856, 857, 875, 876], "x2": [12, 13, 33, 43, 44, 66, 68, 69, 70, 74, 79, 89, 91, 92, 93, 97, 102, 114, 115, 119, 165, 191, 198, 218, 235, 240, 242, 244, 245, 246, 247, 252, 253, 259, 260, 261, 262, 263, 264, 270, 271, 272, 277, 278, 279, 281, 282, 283, 284, 285, 288, 290, 294, 301, 306, 346, 351, 358, 359, 360, 362, 364, 369, 373, 384, 388, 390, 399, 444, 458, 490, 534, 546, 549, 642, 643, 644, 646, 649, 656, 680, 687, 689, 694, 698, 701, 702, 705, 763, 788, 813, 828, 839, 845, 847, 849, 852, 856, 857], "x3": [12, 13, 66, 70, 165, 546, 642, 646], "x4": [12, 13], "x5": [12, 13], "in_channel": [12, 13], "out_channel": [12, 13], "mid_channel": [12, 13], "double_conv": [12, 13], "with_bia": [12, 13, 807, 828, 875], "batchnorm2d": [12, 13, 21, 22, 23, 810], "downscal": [12, 13, 70, 93, 552, 553, 574, 646], "maxpool": [12, 13, 21, 22, 23], "doubl": [12, 13], "conv": [12, 13, 648, 807, 863], "maxpool_conv": [12, 13], "upscal": [12, 13], "scale_factor": [12, 13, 69, 92, 387, 423, 863], "align_corn": [12, 13, 69, 92, 387, 423, 863], "conv2dtranspos": [12, 13, 807], "bhwc": [12, 13], "diff_h": [12, 13], "diff_w": [12, 13], "pad_width": [12, 13, 69, 76, 92, 99, 390, 496, 651, 716, 729], "constant_pad": [12, 13, 76, 99, 651], "kornia": [14, 31, 32, 39, 42, 43, 44, 57, 61, 828, 875], "tf_rgb_to_grayscal": [14, 42], "rgb_to_grayscal": [14, 42, 828], "target": [14, 18, 26, 27, 29, 35, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 59, 69, 92, 207, 389, 464, 465, 466, 467, 468, 469, 470, 471, 643, 786, 807, 809, 815, 828, 832, 835, 838, 841, 850, 851, 858, 859, 864, 866, 875, 876, 878, 880], "databas": [14, 844, 860], "examples_and_demo": 14, "sqlite": 14, "tabl": [14, 235, 252, 285, 597, 620, 644, 646, 791, 792, 807, 857, 862, 871, 878], "autotun": 14, "ivyexcept": [14, 574, 607, 646, 823, 846, 849, 854, 856, 857, 861], "source_to_sourc": 14, "profil": [14, 643], "translat": 14, "_compil": [14, 835], "_source_to_sourc": 14, "47": [14, 26, 55, 59, 68, 69, 74, 78, 91, 92, 93, 94, 96, 101, 241, 299, 387, 399, 407, 425, 426, 535, 557, 558, 631, 644, 646, 647, 648, 649, 655, 672, 687, 755, 756], "48": [14, 26, 55, 59, 68, 69, 91, 92, 93, 94, 101, 124, 234, 257, 299, 387, 407, 408, 409, 419, 425, 426, 429, 572, 627, 631, 638, 644, 646, 647, 649, 653, 659, 694, 734, 755, 774], "49": [14, 55, 59, 69, 78, 92, 96, 97, 299, 387, 388, 399, 409, 419, 430, 455, 535, 644, 659, 704, 755, 774], "vll": 14, "pyx": 14, "ivy_kei": 14, "pem": 14, "torch_input": [14, 15, 16], "rand": [14, 15, 16, 17, 18, 40, 42, 43, 44, 59, 821, 822, 828, 874], "tf_input": [14, 15, 16, 875], "tf_output": [14, 15, 16], "via": [15, 16, 42, 46, 49, 259, 388, 390, 457, 460, 463, 504, 644, 653, 743, 744, 836, 839, 843, 845, 846, 856, 861, 863, 865, 866, 878], "alongsid": [15, 16, 33, 34, 45, 648, 675], "basic": [15, 16, 27, 29, 33, 36, 40, 43, 44, 47, 50, 390, 503, 829, 834, 847, 860], "singl": [15, 16, 35, 46, 55, 60, 68, 78, 86, 91, 101, 110, 304, 363, 384, 388, 394, 455, 521, 612, 625, 629, 644, 646, 647, 648, 655, 657, 675, 754, 755, 756, 764, 791, 807, 826, 834, 835, 836, 839, 844, 847, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 867, 871, 872], "lstm": [15, 16, 17, 18, 648, 674, 807, 865, 878], "sample_input": [15, 16], "uniform": [15, 16, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 48, 49, 50, 57, 69, 78, 92, 101, 399, 537, 655, 753, 754, 756, 806, 828, 859, 875, 876], "tf_lstm": [15, 16, 17, 18], "torch_lstm": [15, 16, 17, 18], "physicaldevic": [15, 16], "physical_devic": [15, 16], "device_typ": [15, 16], "alloc": [15, 16, 65, 66, 69, 89, 157, 158, 164, 341, 381, 641, 642, 826, 834, 836, 867], "physic": [15, 16, 216, 643], "modifi": [15, 16, 59, 69, 86, 92, 109, 390, 399, 493, 496, 501, 541, 791, 822, 834, 835, 836, 839, 841, 842, 845, 846, 848, 850, 851, 853, 856, 858, 860, 861, 865], "164": [15, 16, 23], "state_upd": [15, 16, 40], "properti": [15, 16, 40, 86, 109, 110, 111, 112, 113, 114, 118, 809, 811, 839, 843, 853, 858, 860], "_transpil": [15, 16, 40], "those": [15, 16, 56, 57, 74, 76, 86, 92, 97, 99, 138, 191, 252, 285, 505, 626, 641, 642, 644, 646, 649, 651, 653, 656, 696, 699, 714, 735, 762, 831, 834, 835, 836, 837, 840, 843, 844, 845, 854, 856, 857, 858, 860, 863], "constant": [15, 16, 17, 18, 27, 29, 34, 37, 45, 48, 50, 55, 69, 76, 77, 92, 99, 100, 109, 110, 334, 381, 387, 389, 390, 433, 468, 469, 496, 651, 653, 654, 716, 739, 752, 806, 810, 828, 853, 858, 861, 867, 874, 876], "toler": [15, 16, 17, 69, 74, 92, 97, 346, 363, 384, 388, 442, 457, 463, 649, 692, 695, 786, 788, 839, 858, 878], "benchmark": [15, 16, 17], "n_run": [15, 16, 17], "tf_time": [15, 16], "round": [15, 16, 68, 69, 91, 92, 109, 111, 112, 113, 235, 248, 252, 258, 259, 285, 299, 305, 306, 357, 384, 644, 832, 834, 835, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 871], "torch_tim": [15, 16], "cpu_speedup": [15, 16], "gpu_speedup": 15, "ntranspil": [15, 16], "5017": [15, 16], "1101": [15, 16], "7519": [15, 16], "901": [15, 16], "607x": [15, 16], "944x": [15, 16], "32": [17, 18, 26, 40, 43, 44, 55, 57, 58, 59, 68, 69, 78, 91, 92, 96, 97, 101, 114, 115, 124, 176, 234, 246, 247, 256, 270, 276, 292, 295, 296, 350, 384, 387, 388, 390, 399, 407, 408, 409, 419, 429, 430, 440, 444, 479, 535, 557, 573, 638, 642, 644, 646, 648, 649, 655, 656, 659, 663, 665, 666, 670, 672, 689, 694, 705, 754, 755, 756, 763, 774, 791, 794, 844, 845, 855], "original_output": [17, 18], "transpiled_output": [17, 18], "original_torch_tim": 17, "autograph": 17, "do_not_convert": 17, "compiled_tf_lstm": 17, "transpiled_tf_tim": 17, "original_tf_lstm": 17, "time_major": [17, 92, 387, 433, 648, 674], "return_sequ": [17, 807], "original_tf_tim": 17, "slower": [17, 35, 857], "480074623755541x": 17, "362692848996253x": 17, "openmim": [19, 20], "mim": [19, 20], "0rc8": [19, 20], "get_model": [19, 20], "list_model": [19, 20], "mmengin": [19, 20], "configdict": [19, 20], "saniti": [19, 20, 24, 25, 26, 43, 857], "checkpoint": [19, 20, 21, 22, 60, 867], "against": [19, 20, 66, 69, 70, 74, 79, 89, 91, 92, 93, 97, 102, 165, 284, 303, 346, 349, 352, 363, 384, 399, 540, 541, 542, 543, 544, 581, 642, 644, 646, 649, 656, 689, 690, 692, 695, 759, 860, 866, 867, 878], "zoo": [19, 20], "checkpoint_nam": [19, 20, 24, 25, 43], "tiny_32xb128": [19, 20], "noema_in1k": [19, 20], "openmmlab": [19, 20], "get_scal": [19, 20], "cfg": [19, 20, 851], "_config": [19, 20], "train_pipelin": [19, 20], "tensor_imag": [19, 20], "transpiled_graph": [19, 20, 24, 25, 43], "issu": [19, 20, 24, 25, 389, 466, 806, 829, 830, 831, 832, 833, 835, 837, 839, 841, 842, 844, 845, 846, 847, 849, 850, 857, 860, 861, 863, 867, 874], "107960": [19, 20, 24, 25], "export": [19, 20, 24, 25, 58, 844, 880], "lc_all": [19, 20, 24, 25], "en_u": [19, 20, 24, 25], "utf": [19, 20, 24, 25], "ld_library_path": [19, 20, 24, 25], "lib64": [19, 20, 24, 25], "library_path": [19, 20, 24, 25], "stub": [19, 20, 24, 25, 842], "ldconfig": [19, 20, 24, 25], "_f": [19, 20, 24, 25, 43], "comp_model": [19, 20, 24, 25, 43], "equival": [19, 20, 24, 25, 42, 43, 74, 97, 109, 110, 138, 246, 259, 280, 281, 294, 295, 390, 480, 504, 510, 641, 644, 649, 692, 695, 698, 706, 816, 856, 857, 863, 865, 875], "np_imag": [19, 20, 39, 43, 44], "jax_imag": [19, 20], "hk": [19, 20, 24, 25, 43, 57, 61, 828, 875], "rng_kei": [19, 20, 24, 25, 43, 828, 875], "prngkei": [19, 20, 24, 25, 35, 36, 43, 44, 57, 828, 875], "jax_mlp_forward": [19, 20], "init": [19, 20, 24, 25, 43, 57, 59, 69, 92, 388, 446, 457, 463, 828, 839, 875], "rng": [19, 20, 24, 25, 43, 57, 828, 875], "06": [19, 20, 26, 37, 59, 66, 78, 91, 94, 113, 122, 177, 234, 250, 387, 409, 419, 633, 638, 642, 647, 756, 786, 788, 860], "block_until_readi": [19, 20], "08": [19, 20, 69, 82, 92, 101, 238, 346, 363, 384, 387, 389, 409, 419, 469, 644, 755, 756, 781, 786, 791, 851], "train2017": [19, 20, 24, 25, 39, 43, 44, 828, 875], "000000283921": [19, 20, 24, 25, 43], "out_torch": [19, 20, 24, 25, 43], "et": [19, 20, 648, 649, 675, 699], "out_jax": [19, 20, 24, 25, 43], "66m": [19, 20], "53m": [19, 20], "That": [19, 20, 24, 25, 27, 29, 34, 35, 36, 37, 43, 44, 45, 46, 47, 48, 49, 50, 57, 294, 389, 468, 644, 821, 835, 836, 840, 860, 879], "pretti": [19, 20, 24, 25, 43, 44, 57, 832, 850], "solid": [19, 20, 24, 25, 43], "2023": [21, 22, 23, 24, 25, 37, 39, 40, 57], "52": [21, 22, 26, 55, 68, 91, 93, 94, 101, 240, 250, 252, 399, 535, 557, 558, 573, 627, 644, 646, 647, 648, 649, 659, 672, 694, 756, 774, 821], "110": [21, 22, 57], "10472": [21, 22], "10k": [21, 22], "tx": [21, 22], "23k": [21, 22], "unifyai": [21, 22, 61, 828, 830, 835, 836, 842, 850], "634575": [21, 22], "620k": [21, 22], "jpeg": [21, 22, 58, 59], "619": [21, 22], "70k": [21, 22], "113": [21, 22], "resnet34_weight": [21, 22], "torch_resnet_34": [21, 22], "conv1": [21, 22, 23], "kernel_s": [21, 22, 23, 40, 43, 44, 59, 69, 92, 387, 406, 407, 408, 427, 434, 807, 813], "stride": [21, 22, 23, 69, 73, 92, 93, 96, 114, 387, 390, 406, 407, 408, 424, 425, 426, 427, 429, 430, 434, 472, 646, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 807, 856, 861, 878], "bia": [21, 22, 23, 69, 73, 92, 96, 100, 393, 399, 518, 534, 584, 646, 648, 654, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 752, 807, 853, 860, 865], "bn1": [21, 22, 23], "ep": [21, 22, 23, 69, 74, 77, 92, 97, 100, 177, 312, 379, 388, 389, 393, 442, 469, 513, 514, 515, 642, 649, 654, 692, 695, 752, 803, 810], "05": [21, 22, 23, 26, 59, 65, 68, 69, 71, 77, 91, 92, 94, 100, 150, 277, 330, 346, 355, 356, 363, 381, 384, 393, 513, 514, 515, 572, 594, 617, 627, 628, 633, 641, 644, 646, 647, 649, 654, 690, 752, 786, 791, 806, 810, 858, 860], "momentum": [21, 22, 23, 57, 69, 92, 393, 513, 515, 810], "affin": [21, 22, 23, 810], "track_running_stat": [21, 22, 23, 810], "dilat": [21, 22, 23, 61, 69, 73, 92, 96, 387, 390, 424, 425, 426, 429, 430, 434, 496, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 807], "ceil_mod": [21, 22, 23, 69, 92, 387, 406, 407, 408, 424, 425, 426, 429, 807], "layer1": [21, 22, 23], "basicblock": [21, 22, 23], "conv2": [21, 22, 23], "bn2": [21, 22, 23], "layer2": [21, 22, 23], "layer3": [21, 22, 23], "layer4": [21, 22, 23], "output_s": [21, 22, 23, 69, 92, 387, 401, 402, 403, 404, 648, 677, 807, 828, 875], "fc": [21, 22, 23, 29, 57, 828, 875], "in_featur": [21, 22, 23, 73, 96, 648, 672, 860], "out_featur": [21, 22, 23, 73, 96, 648, 672, 860], "resnet_34": [21, 22], "ivy_resnet_34": [21, 22], "333f7ec4": [21, 22], "pth": [21, 22], "3m": [21, 22], "4mb": [21, 22], "preserv": [21, 22, 24, 25, 37, 39, 40, 69, 70, 71, 86, 92, 93, 94, 115, 387, 388, 390, 399, 423, 457, 474, 475, 476, 487, 488, 507, 541, 574, 636, 646, 647, 651, 718, 791, 859, 860, 867, 875, 880], "multipl": [21, 22, 24, 25, 33, 37, 39, 40, 43, 68, 69, 74, 77, 82, 83, 86, 91, 92, 93, 94, 97, 99, 100, 105, 106, 146, 246, 270, 277, 283, 284, 285, 287, 347, 348, 384, 387, 388, 390, 393, 397, 409, 416, 419, 421, 455, 482, 491, 508, 511, 518, 527, 546, 553, 584, 627, 628, 631, 633, 634, 635, 636, 641, 644, 646, 647, 648, 649, 651, 654, 656, 659, 660, 663, 664, 665, 666, 679, 688, 689, 690, 703, 714, 717, 722, 723, 752, 759, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 807, 822, 826, 834, 836, 840, 841, 843, 847, 849, 851, 853, 856, 857, 858, 860, 863, 865, 867, 874, 878, 880], "rel": [21, 22, 24, 25, 37, 39, 40, 69, 71, 74, 76, 81, 88, 92, 94, 97, 99, 104, 114, 148, 346, 363, 384, 389, 399, 468, 469, 534, 628, 631, 633, 634, 635, 647, 649, 651, 658, 683, 692, 695, 703, 718, 722, 768, 771, 786, 788, 836, 844, 858, 863, 878], "home": [21, 22, 24, 25, 37, 39, 40, 844], "workspac": [21, 22, 24, 25, 34, 37, 39, 40, 835, 850], "95": [21, 22, 23, 26, 55, 69, 71, 74, 78, 85, 94, 96, 101, 122, 372, 384, 430, 627, 631, 635, 638, 647, 649, 655, 687, 755, 756], "track": [21, 22, 33, 43, 44, 56, 57, 826, 835, 836, 839, 855, 856, 874, 878], "properli": [21, 22, 835, 838, 849, 851, 857, 860], "_trace_graph": [21, 22], "shown": [21, 22, 40, 43, 84, 86, 107, 269, 292, 350, 384, 644, 834, 835, 836, 839, 842, 844, 845, 847, 849, 851, 852, 857, 858, 860, 861, 862, 865, 866, 867], "8507": [21, 22], "1351": [21, 22], "0069": [21, 22], "85072625": [21, 22], "13506091": [21, 22], "00688289": [21, 22], "resnet50_weight": [21, 22], "torch_resnet_50": [21, 22], "imagenet1k_v2": [21, 22], "11ad3fa6": [21, 22], "8m": [21, 22], "8mb": [21, 22], "bottleneck": [21, 22], "conv3": [21, 22], "bn3": [21, 22], "2048": [21, 22, 605, 646], "resnet_50": [21, 22], "ivy_resnet_50": [21, 22], "3429": [21, 22], "0408": [21, 22], "0121": [21, 22], "34288204": [21, 22], "04077014": [21, 22], "01212029": [21, 22], "deploy": [23, 835, 871, 872, 875, 880], "ow": 23, "residu": 23, "extrem": 23, "though": [23, 39, 833, 834, 836, 845, 846, 848, 853, 856, 857, 863, 867], "idea": [23, 828, 834, 859, 861, 872, 880], "revolutionari": 23, "reach": [23, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 871, 872, 878], "152": 23, "vanish": [23, 806], "explod": [23, 806, 870, 871], "gradient": [23, 43, 44, 57, 59, 69, 92, 109, 225, 376, 384, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 643, 652, 730, 731, 732, 788, 799, 811, 838, 861, 867, 878], "astor": 23, "cu121": 23, "pillow": [23, 62], "filelock": [23, 39, 57], "extens": [23, 39, 57, 68, 74, 91, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 167, 177, 180, 192, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 347, 348, 350, 384, 387, 390, 399, 431, 504, 508, 534, 641, 642, 644, 649, 651, 656, 657, 658, 659, 660, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 715, 717, 718, 719, 721, 722, 724, 725, 729, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 833, 835, 836, 848, 850, 851, 860, 878], "sympi": [23, 39], "fsspec": [23, 39, 57], "nvrtc": 23, "cu12": 23, "cupti": 23, "54": [23, 55, 66, 68, 73, 91, 92, 96, 101, 180, 249, 250, 255, 270, 299, 305, 326, 381, 387, 399, 409, 419, 535, 644, 648, 649, 659, 672, 691, 694, 754, 755, 756, 774, 844, 847], "curand": 23, "106": [23, 59], "cusolv": [23, 649, 700], "107": 23, "cuspars": 23, "nccl": 23, "nvtx": 23, "triton": 23, "nvjitlink": 23, "mpmath": [23, 39], "py2": [23, 57, 59], "filter": [23, 57, 59, 61, 69, 73, 92, 96, 329, 330, 381, 387, 408, 426, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 793, 807, 828, 841, 844], "get_logg": 23, "setlevel": 23, "solv": [23, 74, 97, 388, 452, 649, 791, 828, 835, 839, 850, 857, 880], "todai": 23, "ant": 23, "bee": 23, "120": [23, 59, 82, 105, 115, 649, 694, 772], "usual": [23, 27, 29, 60, 252, 285, 644, 821, 835, 839, 845, 857, 860, 863], "upon": [23, 43, 44, 61, 826, 836, 837, 847, 856, 860, 863, 867, 878], "scratch": [23, 860], "transfer": 23, "subset": [23, 59, 793, 840, 844, 848, 852, 855, 857, 860, 865, 878], "extract": [23, 43, 44, 51, 58, 69, 92, 110, 390, 479, 505, 857, 859, 861, 866, 877, 878, 879], "zipfil": 23, "zip": [23, 59, 865], "hymenoptera_data": 23, "replac": [23, 28, 30, 41, 58, 68, 69, 70, 76, 78, 86, 91, 92, 93, 99, 101, 144, 286, 322, 325, 379, 381, 390, 501, 504, 508, 588, 589, 593, 641, 644, 646, 651, 655, 714, 753, 791, 836, 842, 843, 845, 846, 854, 857, 860, 865, 867, 875], "send": 23, "statu": [23, 834, 837, 844, 851], "status_cod": 23, "basenam": 23, "zip_save_path": 23, "join": [23, 58, 59, 76, 86, 92, 99, 480, 481, 651, 715, 725, 828, 837, 868], "getcwd": 23, "wb": 23, "zip_ref": 23, "extractal": 23, "option": [23, 49, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 180, 182, 192, 204, 208, 220, 223, 224, 225, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 431, 432, 433, 435, 436, 438, 439, 440, 442, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 555, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 572, 573, 574, 576, 577, 580, 585, 588, 589, 593, 603, 604, 605, 607, 609, 611, 612, 613, 625, 627, 628, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 740, 744, 745, 750, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 792, 799, 803, 804, 806, 807, 809, 811, 812, 821, 826, 834, 835, 836, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 863, 865, 867, 868, 871, 874, 875, 876, 878], "delet": [23, 58, 836, 844], "fail": [23, 58, 786, 828, 832, 835, 836, 839, 844, 845, 847, 851, 854, 856, 857, 858], "augment": [23, 57], "data_transform": 23, "randomresizedcrop": 23, "randomhorizontalflip": 23, "val": [23, 70, 86, 91, 93, 265, 390, 485, 572, 573, 574, 593, 594, 595, 644, 646, 819, 845, 856], "data_dir": 23, "image_dataset": 23, "imagefold": 23, "dataset_s": [23, 59], "class_nam": [23, 59, 788], "imshow": [23, 57, 58], "inp": [23, 96, 648, 670], "clip": [23, 55, 68, 69, 76, 91, 92, 93, 99, 283, 284, 390, 479, 504, 505, 552, 553, 644, 646, 651, 843, 853, 855, 856, 865], "paus": 23, "001": [23, 57, 68, 69, 77, 89, 92, 94, 177, 275, 292, 350, 363, 384, 628, 642, 644, 647, 654, 752, 791], "bit": [23, 69, 82, 176, 177, 180, 243, 244, 246, 399, 535, 536, 642, 644, 659, 772, 773, 778, 780, 833, 834, 835, 843, 844, 845, 847, 853, 865], "batch": [23, 57, 58, 59, 69, 70, 74, 86, 92, 93, 97, 223, 224, 387, 388, 389, 393, 401, 403, 404, 410, 423, 433, 450, 464, 466, 513, 514, 515, 518, 561, 564, 565, 626, 643, 646, 648, 649, 652, 654, 672, 673, 674, 675, 706, 730, 731, 732, 752, 791, 807, 810, 843, 853, 858], "make_grid": 23, "resnet18": [23, 61, 62], "train_model": 23, "train_dataset": 23, "val_dataset": 23, "metric": [23, 828, 867], "train_acc_metr": 23, "sparsecategoricalaccuraci": 23, "val_acc_metr": 23, "nstart": 23, "start_tim": 23, "x_batch_train": 23, "y_batch_train": 23, "gradienttap": 23, "tape": 23, "loss_valu": 23, "grad": [23, 43, 44, 55, 59, 627, 647, 811, 855], "trainable_weight": 23, "apply_gradi": 23, "update_st": 23, "everi": [23, 39, 43, 44, 49, 57, 65, 69, 70, 92, 93, 147, 148, 313, 347, 348, 361, 379, 384, 387, 390, 424, 425, 426, 433, 510, 546, 641, 646, 834, 836, 839, 841, 842, 844, 845, 847, 851, 852, 853, 854, 856, 857, 858, 860, 865, 874, 875, 876, 878], "4f": 23, "float": [23, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 80, 82, 85, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 105, 109, 112, 114, 124, 130, 138, 139, 140, 142, 144, 146, 147, 148, 149, 150, 154, 155, 160, 164, 168, 172, 177, 181, 185, 191, 192, 195, 201, 210, 219, 223, 224, 227, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 263, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 314, 316, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 331, 346, 347, 348, 349, 357, 358, 363, 365, 366, 369, 370, 371, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 399, 402, 411, 412, 413, 430, 431, 438, 441, 442, 444, 457, 461, 463, 464, 465, 469, 470, 485, 503, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 534, 535, 536, 537, 542, 543, 544, 551, 552, 553, 561, 570, 594, 595, 598, 604, 605, 625, 627, 628, 631, 633, 634, 635, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 671, 673, 675, 678, 679, 681, 684, 685, 686, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 703, 706, 708, 709, 710, 730, 731, 732, 739, 752, 755, 756, 762, 764, 765, 766, 767, 772, 773, 775, 776, 777, 778, 779, 780, 781, 788, 791, 792, 794, 803, 806, 807, 810, 811, 826, 832, 839, 843, 845, 848, 849, 850, 852, 853, 855, 856, 858, 860, 861, 863, 865], "train_acc": 23, "acc": 23, "reset": [23, 199, 200, 201, 202, 203, 229, 230, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 642, 643, 646, 846], "reset_st": 23, "x_batch_val": 23, "y_batch_val": 23, "val_logit": 23, "val_acc": 23, "taken": [23, 49, 69, 74, 92, 97, 353, 384, 387, 432, 649, 683, 703, 834, 844, 857, 861, 879], "instanti": [23, 43, 44, 799, 848], "sparsecategoricalcrossentropi": 23, "from_logit": [23, 75, 98, 650, 708, 808], "3121": 23, "2126": 23, "4992": 23, "6072": 23, "244": [23, 68, 257, 828], "3852": 23, "1830": 23, "1015": 23, "1364": 23, "3915": 23, "7465": 23, "8033": 23, "3333": 23, "214": 23, "2763": 23, "3526": 23, "4220": 23, "1592": 23, "8525": 23, "3660": 23, "1085": 23, "1366": 23, "4634": 23, "8115": 23, "3987": 23, "36": [23, 26, 55, 59, 68, 69, 73, 82, 92, 93, 97, 240, 295, 296, 361, 384, 387, 388, 399, 409, 419, 445, 535, 557, 558, 605, 644, 646, 649, 653, 659, 672, 691, 694, 704, 744, 774], "3875": 23, "8096": 23, "5836": 23, "4432": 23, "8402": 23, "3529": 23, "218": [23, 59], "0323": 23, "0982": 23, "4332": 23, "0324": [23, 59], "8197": 23, "3464": 23, "228": [23, 62], "1794": 23, "9244": 23, "9429": 23, "7951": 23, "231": [23, 129, 638], "0132": 23, "4156": 23, "2132": 23, "1413": 23, "8279": 23, "4183": 23, "3028": 23, "1461": 23, "3779": 23, "4553": 23, "8607": 23, "4444": 23, "223": [23, 98], "2835": 23, "0436": 23, "7022": 23, "1335": 23, "8648": 23, "4052": 23, "215": 23, "0863": 23, "0237": 23, "0181": 23, "1331": 23, "8975": 23, "4967": 23, "209": 23, "1050": 23, "2271": 23, "3540": 23, "0588": 23, "8689": 23, "4902": 23, "222": 23, "7880": 23, "4800": 23, "4741": 23, "0218": 23, "5033": 23, "220": [23, 91, 257], "61": [23, 55, 57, 68, 69, 74, 91, 92, 94, 98, 101, 238, 273, 275, 300, 409, 627, 644, 647, 648, 649, 670, 687, 756, 850], "2198": 23, "6509": 23, "3352": 23, "0270": 23, "4771": 23, "216": [23, 94, 97, 627, 647, 704], "0385": 23, "1798": 23, "0143": 23, "0309": 23, "5359": 23, "213": [23, 860], "7697": 23, "3405": 23, "6033": 23, "8392": 23, "8770": 23, "205": [23, 59], "0623": 23, "4221": 23, "0138": 23, "4607": 23, "5294": 23, "221": [23, 63, 125], "0349": 23, "6545": 23, "1935": 23, "1512": 23, "8852": 23, "5098": 23, "212": [23, 57, 69, 73, 92, 371, 384, 672], "0821": 23, "1985": 23, "7769": 23, "3897": 23, "204": 23, "1106": 23, "1354": 23, "1801": 23, "0276": 23, "8893": 23, "5621": 23, "1185": 23, "0447": 23, "2817": 23, "1006": 23, "5752": 23, "2220": 23, "0387": 23, "1639": 23, "0080": 23, "9221": 23, "5686": 23, "0287": 23, "0115": 23, "1679": 23, "7920": 23, "208": 23, "0071": 23, "0790": 23, "2657": 23, "0758": 23, "8934": 23, "210": [23, 846], "2406": 23, "9193": 23, "2372": 23, "9555": 23, "9139": 23, "5817": 23, "211": 23, "1150": [23, 291, 644], "0810": 23, "2205": 23, "1616": 23, "9344": 23, "82": [23, 26, 55, 57, 62, 63, 68, 94, 101, 125, 238, 399, 535, 627, 647, 755, 756, 832, 850], "0200": 23, "0117": 23, "2090": 23, "1444": 23, "5948": 23, "63": [23, 24, 25, 26, 55, 59, 68, 85, 91, 96, 97, 130, 291, 298, 299, 387, 399, 409, 419, 430, 535, 644, 649, 653, 659, 679, 694, 734, 745, 774], "0482": 23, "0338": 23, "5971": 23, "0368": 23, "6144": 23, "207": 23, "1593": 23, "4745": 23, "0733": 23, "0434": 23, "6078": 23, "68": [23, 26, 55, 59, 62, 68, 101, 125, 147, 240, 387, 409, 419, 638, 641, 644, 649, 654, 705, 752, 755, 756], "3923": 23, "1614": 23, "3711": [23, 389, 471], "2719": 23, "6275": 23, "visualize_model": 23, "num_imag": 23, "was_train": 23, "learning_phas": 23, "images_so_far": 23, "pred": [23, 43, 44, 58, 59, 69, 75, 92, 98, 389, 465, 468, 650, 708, 709, 710, 711, 843, 853, 856], "j": [23, 65, 68, 69, 70, 74, 82, 88, 91, 92, 97, 109, 137, 153, 233, 234, 235, 236, 238, 241, 250, 252, 255, 257, 265, 273, 275, 279, 285, 296, 298, 299, 302, 303, 350, 384, 387, 388, 399, 415, 416, 420, 431, 432, 436, 441, 443, 454, 460, 544, 549, 640, 641, 644, 646, 649, 659, 684, 703, 774, 822, 836, 838, 842, 874], "continu": [23, 40, 43, 44, 59, 137, 299, 307, 379, 640, 644, 828, 833, 834, 835, 838, 839, 850, 856, 859, 860, 867, 871, 878], "yet": [24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 59, 380, 382, 383, 391, 392, 396, 834, 835, 850, 867, 874, 875, 876], "broken": [24, 25, 37, 39, 40, 878], "permiss": [24, 25, 37, 39, 40, 835, 844], "recommend": [24, 25, 37, 39, 40, 280, 281, 294, 389, 466, 644, 659, 776, 779, 830, 835, 841, 842, 851, 854, 855, 868, 874], "virtual": [24, 25, 37, 39, 40, 836, 857], "pypa": [24, 25, 37, 39, 40], "venv": [24, 25, 37, 39, 40], "autofeatureextractor": [24, 25, 43], "extractor": [24, 25, 27, 29, 43, 59], "hug": [24, 25, 43, 874], "face": [24, 25, 43, 829, 835, 839, 850, 851, 855, 863, 865, 874, 878], "arch_nam": [24, 25, 43], "microsoft": [24, 25, 43, 874, 875, 878], "feature_extractor": [24, 25, 43], "980130": [24, 25], "9342": [24, 25], "980177": [24, 25], "609": [24, 25], "980207": [24, 25], "1518": [24, 25], "351203": [24, 25], "inputs_jax": [24, 25, 43], "last_hidden_st": [24, 25, 43], "jax_forward": [24, 25, 43], "jit_appli": [24, 25], "134": [24, 25, 73, 649, 672, 691], "2x": [24, 25, 43], "ipytest": 26, "load_breast_canc": 26, "autoconfig": 26, "sole": [26, 55, 852, 861, 878, 879, 880], "test_jax_gpu": 26, "xla_bridg": [26, 57], "get_backend": [26, 853], "test_torch_gpu": 26, "test_xgboost_gpu": 26, "capsi": 26, "load_diabet": 26, "xgb_model": 26, "xgbregressor": 26, "tree_method": 26, "consol": [26, 587, 646, 836, 851, 860], "gpu_hist": 26, "captur": [26, 855, 860, 865, 879], "readouterr": 26, "err": 26, "tabular": 26, "pulsar": 26, "standard": [26, 68, 74, 77, 78, 82, 91, 100, 101, 105, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 167, 177, 180, 192, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 347, 348, 350, 384, 387, 388, 390, 399, 431, 461, 504, 508, 534, 626, 641, 642, 644, 646, 649, 651, 654, 655, 656, 657, 658, 659, 660, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 715, 717, 718, 719, 721, 722, 724, 725, 729, 752, 755, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 793, 806, 810, 821, 822, 828, 831, 838, 839, 840, 843, 845, 848, 852, 856, 859, 860, 861, 867, 871, 875, 880], "extra": [26, 44, 86, 115, 134, 626, 640, 646, 840, 845, 847, 854, 856, 857, 858, 863, 866, 874, 875], "dimens": [26, 65, 69, 70, 73, 74, 75, 76, 78, 79, 80, 82, 83, 86, 88, 92, 93, 96, 97, 98, 99, 101, 102, 103, 105, 106, 112, 114, 115, 118, 125, 129, 153, 157, 158, 328, 339, 341, 342, 343, 344, 347, 348, 352, 353, 361, 368, 375, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 399, 401, 403, 404, 406, 407, 408, 410, 415, 416, 420, 424, 425, 426, 427, 430, 431, 433, 434, 436, 438, 441, 450, 459, 464, 468, 474, 475, 476, 480, 486, 497, 498, 499, 500, 502, 504, 508, 513, 514, 515, 518, 522, 524, 527, 537, 539, 540, 541, 542, 543, 544, 557, 558, 559, 561, 568, 602, 606, 626, 638, 641, 646, 648, 649, 650, 651, 652, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 679, 680, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 706, 709, 710, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 730, 731, 732, 758, 759, 760, 762, 764, 765, 766, 767, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 793, 803, 807, 810, 847, 849, 855, 857, 858, 860, 863, 865], "load_data": 26, "standardscal": 26, "df": [26, 59], "delimit": 26, "sc": 26, "fit_transform": 26, "117564": 26, "navig": [26, 832, 835, 836, 838, 850], "rerun": [26, 57], "436": 26, "t4": 26, "tier": [26, 837], "reduc": [26, 69, 70, 74, 79, 82, 83, 86, 92, 93, 97, 102, 105, 106, 225, 347, 348, 368, 384, 385, 399, 539, 540, 541, 542, 543, 544, 558, 643, 646, 649, 656, 659, 660, 696, 759, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 821, 822, 844, 849, 857, 863, 865, 874], "although": [26, 649, 697, 830, 840, 842, 843, 857, 863, 878], "experi": [26, 31, 59, 835, 849, 860, 867], "substanti": [26, 831, 836, 840, 845, 860, 878], "stuff": 26, "201": [26, 91, 92, 237, 409, 644], "20x": 26, "ivyclassifi": 26, "106597": 26, "10967": 26, "96": [26, 55, 69, 71, 91, 92, 93, 101, 249, 270, 302, 372, 384, 387, 409, 557, 558, 631, 644, 646, 647, 649, 659, 694, 756, 774], "73": [26, 55, 68, 97, 299, 399, 535, 649, 655, 679, 755, 860], "852": [26, 648, 672], "449": 26, "nevertheless": 26, "fall": [26, 57, 811, 834, 845], "short": [26, 55, 69, 92, 435, 648, 673, 674, 834, 836, 845, 865], "blaze": 26, "35": [26, 55, 63, 73, 74, 85, 91, 92, 96, 97, 101, 125, 240, 299, 387, 409, 419, 644, 648, 649, 656, 659, 672, 680, 687, 755, 763, 774], "surpass": 26, "remark": [26, 867], "artifici": 26, "simpli": [26, 33, 43, 44, 46, 55, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 644, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 699, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 828, 834, 835, 836, 840, 841, 842, 844, 845, 846, 847, 848, 850, 852, 853, 856, 857, 858, 860, 863, 865, 866, 867, 869, 879], "x_doubl": 26, "vstack": [26, 69, 92, 390, 492], "y_doubl": 26, "235128": 26, "315": [26, 291, 644], "879": 26, "380": 26, "seem": [26, 834, 835, 863, 865, 867, 878], "examin": 26, "600": [26, 59, 93, 96, 387, 411, 412, 565, 844], "conduct": [26, 872], "num_boosting_round": 26, "300": [26, 91, 93, 96, 295, 387, 411, 412, 565, 589, 644, 646, 649, 688, 860], "500": [26, 69, 92, 93, 96, 387, 388, 411, 412, 463, 565, 646], "ivy_elapsed_tim": 26, "xgb_elapsed_tim": 26, "ivy_tim": 26, "partial": [26, 69, 86, 92, 178, 179, 211, 212, 361, 384, 387, 388, 390, 399, 435, 450, 457, 497, 498, 499, 500, 541, 562, 563, 632, 642, 643, 646, 647, 792, 794, 808, 809, 836, 842, 863], "xgb_time": 26, "fivethirtyeight": 26, "legend": [26, 59, 834], "loc": 26, "best": [26, 57, 584, 646, 822, 826, 828, 829, 832, 833, 834, 835, 836, 838, 844, 845, 849, 850, 859, 860, 861, 868, 872], "xlabel": 26, "ylabel": 26, "obviou": [26, 878], "trend": 26, "gap": 26, "train_siz": [26, 57], "widen": 26, "impress": 26, "outcom": [26, 69, 92, 349, 361, 384, 822], "tend": 26, "95933": 26, "9874": 26, "105807": 26, "wrap": [26, 33, 35, 43, 44, 46, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 600, 603, 604, 605, 606, 607, 609, 611, 612, 623, 625, 627, 628, 631, 633, 634, 635, 636, 646, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 699, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 788, 828, 838, 839, 840, 841, 843, 844, 845, 846, 848, 849, 852, 853, 856, 857, 860, 865, 866, 867, 869, 874, 875, 878, 879], "balanc": 26, "breast": 26, "cancer": 26, "return_x_i": 26, "171": [26, 74, 649, 687, 791], "perfectli": [26, 793], "align": [26, 69, 86, 92, 387, 388, 423, 439, 648, 677, 822, 831, 835, 844, 857, 859, 865, 869], "timm": [27, 43, 44, 828, 875], "focu": [27, 40, 834, 855, 880], "mlp": 27, "mixer": 27, "onli": [27, 29, 43, 44, 49, 55, 57, 59, 61, 64, 65, 68, 69, 74, 76, 78, 86, 88, 91, 92, 97, 99, 101, 109, 112, 114, 130, 150, 190, 191, 220, 280, 281, 286, 292, 324, 354, 361, 381, 384, 387, 388, 390, 394, 399, 410, 423, 433, 442, 447, 461, 463, 474, 475, 476, 486, 520, 521, 537, 551, 638, 641, 642, 643, 644, 646, 648, 649, 651, 653, 655, 656, 658, 659, 675, 689, 696, 699, 700, 718, 721, 733, 734, 740, 741, 743, 744, 745, 750, 751, 754, 755, 756, 759, 760, 770, 776, 779, 789, 791, 792, 794, 807, 811, 821, 826, 828, 829, 830, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 874, 875, 878, 879, 880], "retriev": [27, 29, 33, 547, 569, 594, 646, 836, 857], "mlp_encod": [27, 43, 44, 828, 875], "create_model": [27, 43, 44, 828, 875], "mixer_b16_224": [27, 43, 44, 828, 875], "nois": [27, 29, 43, 44, 828, 874, 875], "randn": [27, 29, 43, 44, 390, 508, 828, 875], "tf_mlp_encod": [27, 43, 44], "output_torch": [27, 29], "output_tf": [27, 29], "output_dens": [27, 43, 44, 828], "dens": [27, 40, 43, 44, 328, 381, 807, 828], "unit": [27, 43, 44, 69, 85, 92, 109, 110, 122, 124, 125, 126, 127, 128, 129, 130, 307, 308, 311, 315, 317, 318, 321, 322, 323, 379, 516, 517, 638, 828, 835, 839, 845, 857, 858, 860, 867, 879], "mention": [27, 29, 43, 44, 49, 834, 835, 836, 840, 847, 852, 853, 856, 857, 860, 863, 876, 878], "fulli": [27, 29, 31, 32, 35, 40, 43, 44, 57, 69, 92, 399, 541, 807, 828, 840, 845, 852, 855, 863, 865, 867, 876, 878, 880], "ground": [27, 29, 389, 465, 786, 788, 799, 832, 850, 857, 860], "ret": [27, 29, 43, 44, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 397, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 448, 450, 453, 455, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 593, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 792, 793, 794, 804, 809, 811, 816, 822, 824, 828, 845, 846, 848, 849, 855, 856, 857, 858, 861, 865, 866, 875], "eagertensor": [27, 33, 55, 816, 858], "deepmind": 28, "perceiverio": 28, "backbon": [28, 57, 828, 866], "TO": [28, 30, 41], "efficientnet": 29, "eff_encod": [29, 828], "efficientnet_v2": [29, 828], "efficientnetv2b0": [29, 828], "storag": [29, 57, 58], "googleapi": [29, 57, 58], "efficientnetv2": 29, "b0_notop": 29, "h5": [29, 86], "24274472": 29, "0u": 29, "torch_eff_encod": [29, 828], "modes_to_trac": 29, "1280": [29, 557, 646, 828], "welcom": [31, 58, 828, 829, 835, 836, 837, 859], "varieti": [31, 839, 844, 845, 846, 860, 862], "organ": [31, 840, 843, 853, 857, 859, 861, 869, 871, 872], "main": [31, 44, 65, 69, 74, 92, 97, 144, 157, 158, 159, 325, 340, 341, 381, 388, 390, 439, 485, 641, 649, 682, 683, 703, 828, 831, 834, 835, 836, 837, 839, 842, 843, 850, 854, 856, 878, 879], "exactli": [31, 35, 42, 46, 55, 56, 60, 302, 644, 834, 843, 844, 845, 846, 847, 849, 860, 863], "rush": 31, "jump": [31, 858], "straight": [31, 828, 844, 857, 860], "quickstart": [31, 828], "introduct": [31, 33, 40, 43, 44, 878], "point": [31, 40, 66, 68, 69, 74, 78, 80, 82, 89, 91, 92, 97, 101, 105, 138, 139, 140, 142, 144, 147, 154, 155, 160, 164, 177, 181, 185, 192, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 257, 258, 259, 265, 266, 267, 268, 273, 274, 275, 276, 277, 285, 287, 288, 290, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 324, 325, 327, 347, 348, 365, 366, 369, 371, 381, 384, 387, 388, 389, 394, 399, 402, 411, 412, 413, 431, 441, 461, 465, 520, 521, 522, 523, 524, 534, 535, 536, 544, 639, 641, 642, 644, 649, 655, 656, 657, 658, 659, 679, 681, 684, 685, 686, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 703, 706, 755, 756, 762, 764, 765, 766, 767, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 816, 817, 826, 832, 834, 835, 836, 839, 840, 842, 844, 845, 847, 848, 850, 852, 856, 857, 860, 861, 863, 865, 874], "showcas": [31, 828], "real": [31, 39, 68, 69, 82, 91, 92, 105, 114, 124, 127, 130, 154, 155, 232, 233, 234, 235, 237, 238, 239, 240, 241, 250, 252, 253, 255, 257, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 282, 285, 287, 288, 290, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 347, 348, 354, 355, 356, 366, 384, 387, 388, 410, 431, 432, 441, 442, 638, 641, 644, 649, 656, 659, 684, 685, 686, 690, 697, 699, 700, 703, 706, 762, 775, 777, 778, 779, 780, 843], "world": [31, 39, 836], "beginn": [31, 829, 878], "got": [31, 55, 849], "cover": [31, 43, 69, 92, 387, 424, 425, 426, 834, 839, 840, 842, 845, 847, 848, 853, 854, 860, 863], "lazi": [31, 32, 35, 38, 46, 49, 50, 61], "familiar": [33, 834, 835], "concept": 33, "roundup": [33, 872], "indep": [33, 43], "proof": [33, 43], "delv": [33, 44, 828], "theori": [33, 830, 842], "esenti": [33, 43], "abstract": [33, 43, 44, 806, 811, 828, 843, 845, 856, 857, 860, 863, 878], "quirk": [33, 43], "perk": [33, 43, 828, 840, 843], "under": [33, 43, 44, 69, 389, 468, 469, 821, 834, 835, 838, 839, 846, 847, 848, 851, 857, 858, 860, 863, 864, 866, 867, 874, 875, 878], "hood": [33, 43, 44, 838, 846, 847, 851, 857, 860, 863, 864, 866, 874, 875], "appropi": 33, "string": [33, 43, 44, 59, 69, 70, 73, 86, 92, 96, 162, 163, 175, 182, 204, 205, 206, 207, 208, 210, 219, 226, 227, 231, 387, 388, 390, 430, 434, 442, 496, 507, 536, 555, 642, 643, 646, 648, 649, 661, 662, 663, 664, 666, 668, 670, 686, 786, 788, 792, 821, 822, 841, 842, 844, 845, 846, 849, 857, 865], "simplest": [33, 835, 847, 860, 863], "interact": [33, 43, 58, 61, 834, 878], "submodul": [33, 43, 57, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 834, 835, 836, 839, 842, 844, 846, 850, 853, 854, 860, 865, 869], "likewis": [33, 38, 43, 50, 836, 843, 845, 848, 852, 853, 857, 863, 874, 875], "nativearrai": [33, 43, 44, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 148, 149, 150, 151, 152, 153, 155, 157, 158, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 180, 183, 184, 185, 187, 189, 191, 192, 198, 208, 209, 225, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 329, 330, 334, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 534, 535, 536, 537, 538, 546, 549, 550, 552, 553, 557, 558, 559, 561, 564, 565, 566, 567, 568, 570, 572, 573, 574, 577, 580, 581, 583, 588, 589, 590, 593, 602, 603, 604, 605, 606, 607, 609, 611, 612, 614, 625, 627, 628, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 740, 741, 742, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 812, 840, 843, 847, 849, 852, 853, 854, 856, 857, 861, 862, 865, 869], "alia": [33, 43, 347, 348, 384, 639, 834, 857, 873, 876], "lastli": [33, 43, 840], "subclass": [33, 43, 44, 854, 857, 863, 875], "dict": [33, 43, 44, 57, 61, 64, 70, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 137, 146, 148, 153, 155, 161, 165, 167, 178, 179, 180, 184, 185, 192, 208, 211, 212, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 337, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 381, 390, 410, 411, 412, 413, 431, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 496, 502, 504, 505, 506, 508, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 547, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 584, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 636, 640, 642, 643, 646, 653, 662, 663, 664, 665, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 733, 734, 736, 739, 740, 741, 742, 744, 745, 746, 750, 751, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 788, 789, 804, 807, 809, 816, 822, 840, 843, 869, 874, 875, 876], "recurs": [33, 43, 44, 57, 59, 64, 86, 87, 178, 179, 211, 212, 388, 460, 562, 563, 569, 642, 643, 646, 653, 733, 734, 737, 743, 744, 745, 786, 835, 839, 842, 843, 850, 853, 856, 867], "fashion": [33, 793, 860, 875], "native_arrai": [33, 43, 44, 65, 66, 68, 88, 90, 91, 92, 93, 97, 104, 122, 125, 148, 151, 153, 155, 161, 164, 165, 166, 167, 175, 180, 187, 209, 218, 226, 242, 246, 251, 252, 253, 255, 259, 263, 271, 272, 280, 285, 288, 291, 294, 299, 347, 348, 375, 384, 389, 390, 470, 496, 502, 506, 546, 549, 576, 577, 580, 611, 638, 641, 642, 643, 644, 646, 648, 649, 650, 651, 655, 656, 659, 660, 662, 663, 670, 678, 681, 685, 686, 691, 692, 696, 700, 701, 703, 706, 708, 710, 714, 721, 753, 762, 771, 777, 780, 782, 788, 798, 816, 832, 850, 858, 860], "data_class": [33, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 407, 408, 557, 561, 699, 727], "low": [33, 43, 46, 62, 69, 73, 78, 92, 96, 101, 387, 430, 434, 648, 655, 661, 662, 663, 664, 666, 668, 670, 754, 756, 793, 843, 849, 856, 857, 863, 866, 878, 879], "c": [33, 43, 49, 58, 59, 65, 69, 70, 71, 73, 76, 82, 88, 89, 91, 92, 93, 94, 96, 97, 99, 103, 105, 109, 110, 128, 139, 140, 150, 153, 177, 180, 235, 246, 252, 253, 273, 274, 276, 285, 288, 296, 303, 387, 388, 390, 393, 399, 401, 402, 403, 404, 415, 420, 436, 438, 440, 441, 443, 455, 474, 475, 476, 486, 504, 508, 513, 514, 515, 518, 536, 549, 557, 558, 559, 560, 568, 572, 573, 603, 612, 627, 628, 631, 633, 634, 635, 638, 641, 642, 644, 646, 647, 648, 649, 651, 653, 656, 657, 659, 662, 663, 664, 665, 666, 667, 669, 684, 686, 688, 721, 725, 733, 736, 740, 741, 742, 744, 745, 750, 751, 762, 767, 773, 774, 779, 781, 810, 821, 822, 829, 835, 838, 841, 842, 843, 847, 853, 855, 865, 866, 867, 869, 875, 877, 878], "fundament": [33, 43, 844, 857, 863, 865, 878], "signatur": [33, 43, 390, 399, 496, 534, 845, 846, 847, 848, 852, 856, 860, 861, 863], "matmul": [33, 43, 44, 60, 74, 97, 388, 458, 626, 646, 649, 699, 841, 860, 861, 865, 866], "to_n": [33, 43, 44, 55, 64, 87, 865], "jaxlib": [33, 36, 39, 58, 816, 835, 840, 845, 846, 852, 861, 865], "xla_extens": [33, 39, 816, 840, 845, 846, 852, 861, 865], "arrayimpl": [33, 39, 816], "disabl": [33, 43, 69, 92, 390, 504, 809, 826, 842], "array_mod": [33, 43, 590, 614, 646, 862], "set_array_mod": [33, 43, 614, 646, 862], "ultim": [33, 43, 871, 874], "sigmoid": [33, 43, 44, 55, 63, 69, 85, 92, 313, 379, 394, 520, 638, 803, 865], "z": [33, 43, 44, 56, 57, 65, 68, 69, 70, 74, 75, 78, 80, 82, 88, 91, 92, 93, 97, 98, 99, 101, 105, 114, 115, 149, 150, 152, 153, 213, 235, 236, 240, 242, 245, 247, 252, 263, 264, 267, 268, 269, 271, 272, 277, 279, 281, 282, 283, 284, 292, 301, 312, 313, 347, 348, 350, 379, 384, 389, 399, 465, 467, 468, 469, 470, 471, 477, 481, 492, 533, 534, 537, 544, 549, 561, 564, 565, 572, 573, 589, 602, 604, 605, 613, 626, 641, 643, 644, 646, 649, 650, 651, 653, 655, 656, 657, 659, 680, 689, 694, 695, 699, 706, 708, 709, 710, 714, 736, 740, 742, 750, 754, 755, 756, 759, 764, 774, 775, 777, 778, 779, 806, 841, 843, 846, 847, 865, 866, 874], "divid": [33, 38, 43, 44, 60, 68, 69, 70, 76, 86, 91, 92, 99, 114, 115, 259, 393, 466, 513, 514, 515, 518, 604, 644, 646, 651, 723, 840, 843, 847, 851, 860], "exp": [33, 43, 44, 68, 69, 91, 92, 128, 130, 257, 277, 290, 313, 379, 387, 389, 415, 420, 469, 638, 644, 649, 697, 855, 857], "entir": [33, 43, 44, 46, 59, 69, 82, 83, 86, 92, 93, 105, 106, 225, 255, 257, 297, 298, 347, 348, 384, 387, 390, 399, 411, 412, 413, 496, 537, 570, 643, 644, 659, 660, 775, 776, 777, 778, 779, 780, 781, 782, 783, 807, 822, 834, 835, 836, 839, 840, 843, 845, 847, 849, 856, 857, 858, 860, 863, 865, 867, 871, 875, 878, 880], "congratul": [33, 39], "independ": [33, 44, 69, 78, 92, 101, 235, 252, 285, 295, 393, 394, 518, 520, 644, 649, 655, 680, 698, 753, 828, 839, 845, 847, 854, 865, 875], "div": [34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 876], "sub": [34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 69, 74, 76, 86, 87, 91, 92, 93, 97, 99, 115, 284, 388, 390, 399, 442, 482, 491, 511, 540, 541, 569, 646, 649, 651, 652, 683, 703, 723, 730, 731, 732, 834, 836, 838, 843, 849, 857, 858, 860, 871, 876], "with_numpi": 34, "reproduc": [34, 60, 73, 96, 648, 671, 791, 792, 793, 794, 799, 832, 839, 850, 872], "x_": [34, 45, 110, 296, 644, 876], "66391283": 34, "12516928": 34, "38367081": 34, "03102401": 34, "76419425": 34, "52797794": 34, "90346956": 34, "61316347": 34, "27585283": 34, "66309303": 34, "ivy_repo": 34, "sever": [34, 35, 45, 46, 48, 49, 50, 69, 92, 109, 387, 388, 401, 402, 403, 404, 456, 791, 835, 836, 861, 867], "pro": [34, 35, 36, 45, 46, 47, 48, 49, 50, 871], "turn": [35, 46, 73, 96, 109, 110, 411, 412, 413, 648, 671, 807, 835, 842, 843, 846, 847, 857, 860], "unus": [35, 847, 856], "part": [35, 65, 68, 69, 91, 92, 97, 114, 124, 127, 130, 157, 158, 159, 265, 269, 292, 340, 341, 367, 381, 384, 387, 388, 390, 399, 431, 442, 496, 544, 638, 641, 644, 649, 685, 686, 788, 834, 835, 836, 837, 839, 842, 845, 851, 853, 856, 857, 860, 861, 863, 867, 874, 875, 876, 877, 878], "pick": [35, 46, 806], "trigger": [35, 46, 809, 834, 851], "unif": [35, 37, 46, 48, 829], "55563945": 35, "65538704": 35, "14150524": 35, "46951997": 35, "30220294": 35, "14739668": 35, "57017946": 35, "91962677": 35, "51029003": 35, "59644395": 35, "constitu": [35, 46, 86], "5556394": 35, "655387": 35, "1415051": 35, "4695197": 35, "3022028": 35, "1473966": 35, "5701794": 35, "91962665": 35, "51028997": 35, "5964439": 35, "985": 35, "000": [35, 91, 286, 791, 832, 844, 850], "On": [35, 43, 44, 835, 845, 846, 851, 857, 860, 863], "hand": [35, 68, 388, 458, 791, 839, 845, 846, 851, 853, 860, 867], "learnt": [36, 47], "ivy_norm": 36, "jax_norm": [36, 43, 44], "wider": [36, 47, 597, 620, 646, 845, 862], "avoid": [36, 47, 49, 69, 76, 92, 252, 257, 259, 275, 285, 389, 390, 393, 466, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 511, 513, 514, 515, 551, 567, 569, 592, 597, 620, 644, 646, 651, 717, 718, 719, 721, 723, 724, 726, 728, 793, 794, 835, 836, 841, 842, 843, 844, 845, 849, 854, 857, 860, 861, 862, 863, 878], "act": [36, 47, 69, 92, 310, 375, 385, 836, 847, 862, 867], "shorthand": [36, 47, 49, 860], "pair": [36, 47, 57, 69, 73, 92, 96, 240, 259, 332, 374, 381, 384, 387, 421, 430, 432, 434, 644, 648, 649, 661, 662, 663, 664, 666, 668, 670, 678, 680, 822], "93968587": 36, "26075466": 36, "22723222": 36, "06276492": 36, "47426987": 36, "72835908": 36, "71737559": 36, "50411096": 36, "65419174": 36, "15576624": 36, "implic": [36, 47, 48, 51, 843], "fw": [37, 39, 40, 73, 96, 399, 534, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 788, 835, 860], "mxnet": [37, 39, 40, 221, 643, 816, 834, 835], "miniconda": [37, 39, 40], "multienv": [37, 39, 40], "lazili": [37, 38, 39, 43, 44, 48, 50, 61, 874, 875, 876], "actual": [37, 48, 832, 836, 838, 844, 850, 853, 854, 856, 857, 858, 860, 863, 864, 867, 879], "occur": [37, 43, 44, 48, 61, 66, 68, 80, 89, 91, 103, 167, 286, 302, 642, 644, 656, 657, 759, 760, 764, 765, 766, 767, 828, 839, 844, 846, 849, 862], "altern": [37, 48, 58, 69, 92, 97, 109, 110, 346, 354, 355, 356, 360, 362, 363, 364, 365, 367, 368, 369, 373, 374, 384, 834, 835, 842, 856], "assum": [37, 48, 49, 50, 65, 68, 69, 70, 73, 74, 75, 91, 92, 93, 96, 97, 98, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 325, 341, 347, 348, 350, 353, 371, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 456, 458, 496, 504, 508, 534, 537, 564, 568, 570, 572, 581, 603, 612, 636, 641, 642, 644, 646, 647, 648, 649, 650, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 708, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 807, 821, 835, 839, 841, 844, 845, 848, 858, 860, 863, 867], "201733": 37, "slowli": [37, 48], "norm": [37, 48, 49, 69, 70, 74, 92, 93, 97, 108, 109, 387, 388, 409, 410, 414, 415, 416, 419, 420, 421, 431, 432, 438, 442, 516, 517, 519, 552, 553, 574, 646, 649, 690, 706, 752, 807, 811, 861], "slow": [37, 48, 830, 835, 842], "34431235": [37, 38], "51129461": [37, 38], "06686894": [37, 38], "36452447": [37, 38], "98795534": [37, 38], "15493582": [37, 38], "91630631": [37, 38], "41939619": [37, 38], "78909753": [37, 38], "19475674": [37, 38], "norm_trac": 37, "norm_tran": [37, 48], "subtract": [38, 43, 44, 68, 91, 114, 115, 146, 390, 496, 641, 644, 840, 843, 847], "happen": [38, 43, 44, 304, 644, 828, 835, 836, 837, 846, 856, 860, 874, 875], "wherea": [38, 50, 92, 387, 433, 836, 840, 843, 845, 846, 847, 852, 853, 860, 880], "graph_transpil": 38, "often": [39, 69, 389, 464, 833, 839, 849, 852, 853, 857, 860, 867, 871, 879], "fortun": [39, 40, 839], "everyth": [39, 58, 821, 828, 834, 835, 836, 837, 838, 844, 847, 856, 857, 858, 860, 867], "practic": [39, 836, 841, 844, 857, 859], "jax_kornia": [39, 43, 44, 828, 875], "000000000034": [39, 43, 44, 828, 875], "raw_img": [39, 43, 44, 828, 875], "sharp": [39, 43, 44, 828], "prefer": [39, 43, 44, 259, 644, 835, 843, 849, 850, 854, 857, 868, 871, 872, 878], "whole": [40, 69, 92, 390, 393, 503, 516, 517, 519, 836, 842, 851], "full": [40, 69, 74, 92, 96, 97, 109, 110, 112, 177, 264, 272, 335, 336, 337, 338, 339, 381, 388, 389, 390, 461, 462, 468, 469, 497, 500, 591, 600, 615, 623, 641, 642, 644, 646, 648, 649, 663, 665, 666, 667, 669, 692, 696, 698, 699, 792, 799, 828, 835, 836, 842, 845, 848, 849, 852, 853, 857, 860, 863, 865, 867, 878, 880], "complex": [40, 43, 44, 57, 63, 68, 69, 74, 82, 85, 89, 91, 92, 97, 105, 122, 123, 124, 125, 126, 127, 128, 129, 130, 154, 155, 170, 184, 193, 199, 232, 233, 234, 235, 236, 237, 238, 241, 249, 250, 252, 253, 255, 257, 265, 266, 267, 268, 269, 273, 274, 275, 276, 285, 287, 288, 290, 292, 295, 296, 297, 298, 299, 302, 303, 307, 312, 313, 315, 350, 355, 356, 379, 384, 387, 388, 399, 410, 421, 431, 432, 436, 441, 442, 443, 454, 456, 542, 543, 604, 605, 638, 641, 642, 644, 646, 649, 656, 659, 684, 685, 686, 690, 697, 699, 701, 703, 706, 762, 777, 778, 780, 792, 803, 822, 831, 834, 837, 842, 845, 847, 854, 857, 860, 861, 863, 865, 867, 869, 872, 875, 878], "neccessari": 40, "set_random_se": [40, 60], "301436": 40, "_c": 40, "0x7f252c392390": 40, "flatten": [40, 43, 44, 57, 59, 62, 69, 70, 74, 76, 79, 80, 92, 93, 97, 99, 102, 103, 352, 368, 384, 388, 390, 399, 439, 485, 495, 499, 504, 505, 508, 510, 532, 539, 540, 541, 542, 543, 544, 557, 561, 646, 649, 651, 656, 657, 687, 694, 706, 715, 720, 722, 759, 760, 764, 765, 766, 767, 786, 788, 828, 856, 863], "keyword": [40, 43, 44, 59, 61, 64, 65, 69, 86, 92, 115, 151, 286, 387, 390, 399, 435, 496, 534, 548, 551, 584, 613, 641, 644, 646, 649, 653, 659, 700, 739, 780, 786, 788, 792, 808, 809, 821, 834, 840, 843, 845, 846, 854, 856, 857, 858, 860, 861, 863, 874, 875, 876], "input_arrai": [40, 43, 44, 856], "torch_model": [40, 43, 44, 61], "159": [40, 85, 122, 638, 648, 672], "thank": 40, "fledg": [40, 835], "output_arrai": [40, 43, 44, 69, 466], "0893": 40, "1504": 40, "1372": 40, "0991": 40, "0867": 40, "0851": 40, "0911": 40, "0804": 40, "0926": 40, "0881": 40, "softmaxbackward0": 40, "furthermor": 40, "relat": [40, 259, 644, 828, 830, 833, 834, 835, 836, 842, 849, 857, 860, 861, 862, 863, 875], "regress": [41, 878], "boiler": 42, "plate": 42, "mathemat": [42, 74, 97, 235, 240, 252, 257, 259, 275, 285, 639, 644, 649, 690, 706, 845, 857, 863, 878], "minut": [42, 835, 844], "49296033": 42, "85580593": 42, "73077095": 42, "6316749": 42, "36565533": 42, "6911214": 42, "5613365": 42, "43097103": 42, "5831474": 42, "4034585": 42, "55593616": 42, "65984905": 42, "9567939": 42, "32861516": 42, "47598985": 42, "69988805": 42, "5131729": 42, "48460233": 42, "7778542": 42, "38005152": 42, "44124812": 42, "54439026": 42, "13614878": 42, "86290044": 42, "30565348": 42, "15573153": 42, "54602885": 42, "32699087": 42, "7613822": 42, "8590437": 42, "6796573": 42, "5998577": 42, "37982064": 42, "26729056": 42, "5365731": 42, "43443426": 42, "6852775": 42, "33589965": 42, "55056024": 42, "47998315": 42, "38066688": 42, "5961556": 42, "4367127": 42, "24993691": 42, "43087602": 42, "26046935": 42, "56437266": 42, "213066": 42, "57331777": 42, "31458968": 42, "47058818": 42, "32165387": 42, "5530722": 42, "4742369": 42, "46425182": 42, "24489878": 42, "4989296": 42, "6239719": 42, "29515338": 42, "39768082": 42, "52449703": 42, "44410226": 42, "70339715": 42, "7027339": 42, "9493737": 42, "3313049": 42, "29825547": 42, "25047007": 42, "25240797": 42, "47741622": 42, "4410479": 42, "4535742": 42, "1399214": 42, "14160769": 42, "521669": 42, "7550629": 42, "38794404": 42, "87214035": 42, "65314126": 42, "7622461": 42, "39658976": 42, "5003823": 42, "3620267": 42, "5209271": 42, "43946576": 42, "5861": 42, "6435085": 42, "54303294": 42, "7460731": 42, "4735044": 42, "43913406": 42, "72739": 42, "07200881": 42, "55436087": 42, "8670199": 42, "71886593": 42, "9110407": 42, "555056": 42, "3284469": 42, "72270083": 42, "84436476": 42, "8195878": 42, "5123501": 42, "6761943": 42, "39222774": 42, "2453723": 42, "26540205": 42, "532107": 42, "6674917": 42, "12903629": 42, "78137964": 42, "36030492": 42, "2759029": 42, "598225": 42, "8169377": 42, "35551432": 42, "6354972": 42, "30139905": 42, "7702066": 42, "7159862": 42, "5794634": 42, "36993578": 42, "22942673": 42, "4686075": 42, "5255757": 42, "46116158": 42, "25437534": 42, "50529456": 42, "6788846": 42, "29976118": 42, "46853146": 42, "8404826": 42, "3029947": 42, "32095715": 42, "5657457": 42, "6648414": 42, "7377707": 42, "45782346": 42, "63786435": 42, "6464489": 42, "48081": 42, "3674953": 42, "83497345": 42, "6276602": 42, "5472318": 42, "23523967": 42, "8159783": 42, "52615684": 42, "30982086": 42, "38690192": 42, "44237942": 42, "43110123": 42, "15921232": 42, "84909004": 42, "14961666": 42, "23127733": 42, "6665542": 42, "47715086": 42, "18885304": 42, "4050523": 42, "2034079": 42, "40680784": 42, "30552164": 42, "187272": 42, "47815746": 42, "35432848": 42, "33978945": 42, "2588532": 42, "76345336": 42, "72176397": 42, "19500253": 42, "7186791": 42, "48291487": 42, "1773673": 42, "27616158": 42, "58042": 42, "65294915": 42, "5219107": 42, "39325932": 42, "30467382": 42, "5634152": 42, "49274728": 42, "43373075": 42, "5558106": 42, "6892457": 42, "6364119": 42, "2070568": 42, "62193185": 42, "5570237": 42, "3904049": 42, "6584081": 42, "46104455": 42, "5386716": 42, "5024127": 42, "77666676": 42, "5116049": 42, "33227512": 42, "9302091": 42, "76431215": 42, "46174574": 42, "8608088": 42, "45231408": 42, "5376172": 42, "66770905": 42, "3384223": 42, "67850643": 42, "64262515": 42, "5830049": 42, "16010492": 42, "7425901": 42, "69794947": 42, "43080875": 42, "31582838": 42, "7201378": 42, "70379734": 42, "7707326": 42, "43489042": 42, "1674592": 42, "30420962": 42, "64085615": 42, "5562887": 42, "48882553": 42, "72651064": 42, "6645107": 42, "09576342": 42, "5973712": 42, "51216173": 42, "66430944": 42, "49837804": 42, "8860815": 42, "7196047": 42, "6500621": 42, "48323685": 42, "5198936": 42, "41961774": 42, "4793267": 42, "5327019": 42, "50169057": 42, "39731294": 42, "46453282": 42, "6374841": 42, "20438369": 42, "31915343": 42, "43276027": 42, "40353265": 42, "19193788": 42, "49602816": 42, "38916475": 42, "3553547": 42, "4695943": 42, "31296828": 42, "40816274": 42, "50160116": 42, "73214316": 42, "16340554": 42, "3155364": 42, "3054855": 42, "6878571": 42, "66533625": 42, "6297885": 42, "42204636": 42, "62815017": 42, "28406966": 42, "46879068": 42, "71870494": 42, "30653143": 42, "3309901": 42, "5741293": 42, "26462665": 42, "25825614": 42, "47126928": 42, "66076976": 42, "50600374": 42, "28697857": 42, "38552547": 42, "6514376": 42, "74130857": 42, "7184323": 42, "6693372": 42, "770887": 42, "4992302": 42, "7718851": 42, "3916285": 42, "3516099": 42, "33137748": 42, "45611387": 42, "44159424": 42, "5586176": 42, "4695295": 42, "76106656": 42, "52622896": 42, "3806168": 42, "83740973": 42, "30983514": 42, "5512657": 42, "5674867": 42, "44561777": 42, "24020231": 42, "7653066": 42, "7046461": 42, "31364638": 42, "59066314": 42, "57550037": 42, "6942578": 42, "20950222": 42, "81518644": 42, "39220342": 42, "7984339": 42, "20109056": 42, "55548745": 42, "34951282": 42, "46904862": 42, "23029406": 42, "4211571": 42, "32920533": 42, "6031544": 42, "860837": 42, "53341055": 42, "23700455": 42, "6015269": 42, "49808854": 42, "6447939": 42, "6604945": 42, "42902747": 42, "42047936": 42, "20613474": 42, "42102173": 42, "82564986": 42, "30528295": 42, "4714049": 42, "5492011": 42, "28521618": 42, "88891816": 42, "11472917": 42, "26778728": 42, "48746774": 42, "19233656": 42, "3556826": 42, "5215195": 42, "6820254": 42, "16108279": 42, "6925031": 42, "552746": 42, "66557044": 42, "75153124": 42, "1934661": 42, "7330578": 42, "6626441": 42, "76607925": 42, "38522887": 42, "17734797": 42, "44826382": 42, "6780246": 42, "27378416": 42, "7493787": 42, "5452368": 42, "42360693": 42, "5951244": 42, "5365505": 42, "2681636": 42, "6623356": 42, "33533204": 42, "43890804": 42, "6343641": 42, "12702148": 42, "6168841": 42, "85134834": 42, "64549434": 42, "38682976": 42, "49264285": 42, "5104517": 42, "18002039": 42, "88599735": 42, "34265348": 42, "5849319": 42, "6292272": 42, "4080159": 42, "6458118": 42, "45335168": 42, "46115267": 42, "72040766": 42, "4368204": 42, "41363248": 42, "4124769": 42, "5162779": 42, "5182378": 42, "76471037": 42, "53513986": 42, "73397994": 42, "6491305": 42, "45874202": 42, "46488976": 42, "60448766": 42, "63621926": 42, "6425189": 42, "28838447": 42, "63368446": 42, "5947221": 42, "5782955": 42, "36294326": 42, "48188877": 42, "52637": 42, "18949348": 42, "5689725": 42, "41363242": 42, "71333516": 42, "7084434": 42, "5964619": 42, "5581088": 42, "42732418": 42, "29512846": 42, "51097643": 42, "57651883": 42, "81257486": 42, "17240909": 42, "7350769": 42, "6440831": 42, "7716154": 42, "7696945": 42, "42528978": 42, "5479724": 42, "81761336": 42, "25962776": 42, "7824863": 42, "6940273": 42, "11094152": 42, "47357208": 42, "45543537": 42, "27674046": 42, "6603243": 42, "26991653": 42, "20988956": 42, "36109203": 42, "22456712": 42, "7642828": 42, "74795896": 42, "8624945": 42, "8977016": 42, "52269655": 42, "5808172": 42, "30616492": 42, "658983": 42, "58873963": 42, "3143775": 42, "41260308": 42, "20255119": 42, "32344916": 42, "7811551": 42, "7413846": 42, "70024586": 42, "45004362": 42, "26675087": 42, "6367631": 42, "36855108": 42, "33443588": 42, "36071956": 42, "7146904": 42, "55997235": 42, "537416": 42, "8246956": 42, "3575454": 42, "48347342": 42, "4314622": 42, "62127906": 42, "37857515": 42, "5016419": 42, "61000717": 42, "68972874": 42, "41715318": 42, "4661981": 42, "6399835": 42, "3393832": 42, "27402696": 42, "732831": 42, "63776344": 42, "36250553": 42, "20105354": 42, "34666434": 42, "47403473": 42, "5376881": 42, "23853485": 42, "23298672": 42, "6009976": 42, "731824": 42, "22896147": 42, "7476525": 42, "69204986": 42, "48640496": 42, "8111195": 42, "74533314": 42, "35637805": 42, "2277823": 42, "41439864": 42, "3882094": 42, "34607103": 42, "5740501": 42, "45712376": 42, "36859727": 42, "38998622": 42, "18217316": 42, "30438387": 42, "7317879": 42, "4312286": 42, "69588417": 42, "3016262": 42, "73031735": 42, "7620005": 42, "20053042": 42, "3871917": 42, "38995925": 42, "2710407": 42, "6272299": 42, "5048422": 42, "7078004": 42, "60675156": 42, "3457363": 42, "2646299": 42, "5620334": 42, "47565135": 42, "8230689": 42, "44504172": 42, "54050905": 42, "31101573": 42, "24286434": 42, "4821655": 42, "6120316": 42, "55031794": 42, "29379642": 42, "3952177": 42, "51321733": 42, "6849346": 42, "36655322": 42, "56821465": 42, "28197667": 42, "27508613": 42, "26472732": 42, "3951432": 42, "25014058": 42, "61152416": 42, "5316441": 42, "2902867": 42, "6716291": 42, "15485194": 42, "65195155": 42, "6394027": 42, "48777273": 42, "45825216": 42, "43302876": 42, "37537804": 42, "7100045": 42, "42390877": 42, "419715": 42, "26340058": 42, "5737571": 42, "3456761": 42, "3378264": 42, "22834007": 42, "71616644": 42, "62237275": 42, "41121426": 42, "5875386": 42, "6119703": 42, "24063084": 42, "52173215": 42, "7950672": 42, "45715544": 42, "3420424": 42, "8776624": 42, "31395352": 42, "35489222": 42, "7077469": 42, "34783778": 42, "49901104": 42, "368652": 42, "41553447": 42, "7516321": 42, "29636133": 42, "63707435": 42, "45460576": 42, "4504552": 42, "38551256": 42, "3776133": 42, "37716988": 42, "5808645": 42, "8186358": 42, "7452102": 42, "13270728": 42, "32439175": 42, "21365675": 42, "34269702": 42, "36575893": 42, "20755123": 42, "73255384": 42, "6269738": 42, "5145893": 42, "40890205": 42, "29832682": 42, "16856807": 42, "521924": 42, "635281": 42, "5942463": 42, "66077226": 42, "8809012": 42, "73497194": 42, "7199179": 42, "3170066": 42, "28845012": 42, "46699166": 42, "44126272": 42, "6312956": 42, "35014617": 42, "9267093": 42, "4469661": 42, "5532285": 42, "33181012": 42, "36373758": 42, "708061": 42, "39687523": 42, "22090068": 42, "23750389": 42, "56849474": 42, "25968918": 42, "46802616": 42, "2708095": 42, "23563243": 42, "4951679": 42, "49091882": 42, "69873273": 42, "46350205": 42, "7973521": 42, "5637764": 42, "48444656": 42, "56311876": 42, "4330717": 42, "34413686": 42, "57832545": 42, "3900614": 42, "6826291": 42, "70586395": 42, "55363905": 42, "72460383": 42, "3997658": 42, "42758685": 42, "13921028": 42, "42671797": 42, "60539824": 42, "61464536": 42, "48930198": 42, "7063285": 42, "6610134": 42, "1488111": 42, "52273536": 42, "33709767": 42, "27501753": 42, "4012898": 42, "28568238": 42, "76208776": 42, "6255617": 42, "54422826": 42, "6596593": 42, "21829887": 42, "42483532": 42, "22633922": 42, "6994735": 42, "39678702": 42, "6585098": 42, "5623585": 42, "26695958": 42, "27654496": 42, "6461166": 42, "37591115": 42, "39935783": 42, "22347261": 42, "68466955": [42, 649, 685], "69710433": 42, "51150954": 42, "65092474": 42, "7845727": 42, "54139376": 42, "6863614": 42, "4282503": 42, "7025439": 42, "70491654": 42, "4540074": 42, "18350555": 42, "55251014": 42, "19137311": 42, "43920127": 42, "301945": 42, "43204868": 42, "7097841": 42, "3531679": 42, "28080267": 42, "5700798": 42, "56655395": 42, "4369979": 42, "59634125": 42, "27452317": 42, "5344645": 42, "79178244": 42, "4724254": 42, "2711047": 42, "94357526": 42, "34359348": 42, "54977125": 42, "58226395": 42, "76491785": 42, "7780358": 42, "762608": 42, "591783": 42, "27497044": 42, "38095248": 42, "22212288": 42, "61650527": 42, "4088468": 42, "35023472": 42, "28026333": 42, "20044121": 42, "542197": 42, "47522944": 42, "547221": 42, "6610136": 42, "48738474": 42, "22961178": 42, "66614205": 42, "5408737": 42, "28099653": 42, "64303696": 42, "66587275": 42, "1830825": 42, "44034603": 42, "7324861": 42, "44818747": 42, "7674686": 42, "34333137": 42, "6313791": 42, "3968163": 42, "51550907": 42, "2743706": 42, "4589207": 42, "64085543": 42, "47129798": 42, "5682373": 42, "7182297": 42, "60502446": 42, "6077174": 42, "37393433": 42, "291496": 42, "41727996": 42, "2796298": 42, "77829576": 42, "460023": 42, "7404333": 42, "6846879": 42, "6370108": 42, "3651577": 42, "69297": 42, "61812246": 42, "81404895": 42, "271702": 42, "66017336": 42, "66111064": 42, "31377548": 42, "37802222": 42, "39282626": 42, "12249988": 42, "74444157": 42, "38005698": 42, "57431": 42, "31196997": 42, "6235913": 42, "49954063": 42, "76766944": 42, "2101823": 42, "77645534": 42, "9046659": 42, "14168741": 42, "4651413": 42, "769572": 42, "58584106": 42, "40810975": 42, "757797": 42, "5476642": 42, "3949979": 42, "torch_x": [42, 828], "tf_x": [42, 828], "torch_out": 42, "tf_out": 42, "checkout": [43, 58, 836, 839, 860], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 43, "theoret": 43, "aspect": [43, 44, 829, 855, 878, 880], "easiest": [43, 828, 830, 835, 868], "defer": [43, 44, 834, 840, 845, 846, 853, 856, 857, 860], "similarli": [43, 56, 151, 159, 235, 340, 347, 348, 381, 384, 641, 644, 841, 845, 857, 863, 872], "essenc": [43, 879], "becom": [43, 69, 92, 109, 358, 384, 390, 476, 651, 714, 816, 836, 837, 843, 845, 847, 849, 856, 867, 874], "slide": [43, 69, 73, 92, 96, 387, 406, 407, 408, 424, 425, 426, 427, 430, 434, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 807], "regressor": [43, 44], "input_dim": [43, 44, 58], "output_dim": [43, 44, 58], "linear0": [43, 44, 55], "linear1": [43, 44, 55], "adam": [43, 44, 55, 59, 71, 94, 548, 627, 628, 633, 646, 647, 811, 878], "n_training_exampl": [43, 44], "2000": [43, 44, 92, 326, 381], "random_norm": [43, 44, 73, 74, 78, 96, 97, 101, 557, 646, 648, 649, 655, 663, 665, 666, 667, 669, 670, 674, 699], "linspac": [43, 44, 65, 88, 138, 641, 852, 863, 865], "execute_with_gradi": [43, 44, 55, 59, 647, 867], "lambda": [43, 44, 60, 62, 92, 135, 137, 309, 319, 556, 569, 629, 630, 632, 637, 640, 646, 647, 649, 653, 685, 740, 741, 745, 834, 853, 854, 855, 858, 863, 866], "5f": [43, 44], "nonetheless": [43, 44], "gc": [43, 44, 569, 646], "decompos": [43, 44, 69, 92, 109, 112, 335, 336, 337, 338, 339, 360, 367, 381, 384, 388, 452, 457, 460, 463, 857], "said": [43, 44, 793, 861, 874], "otherwis": [43, 44, 61, 64, 65, 66, 68, 69, 70, 73, 74, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 138, 140, 141, 146, 148, 149, 150, 153, 155, 161, 164, 165, 167, 168, 170, 171, 172, 173, 174, 183, 187, 191, 192, 208, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 321, 322, 323, 325, 335, 336, 337, 338, 339, 346, 347, 348, 349, 350, 352, 353, 354, 362, 363, 369, 371, 373, 374, 375, 379, 381, 384, 387, 388, 390, 393, 406, 407, 408, 411, 412, 413, 431, 444, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 482, 484, 486, 487, 488, 495, 502, 504, 505, 506, 508, 511, 513, 515, 516, 517, 519, 521, 533, 534, 535, 536, 537, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 581, 588, 589, 603, 604, 605, 607, 609, 611, 612, 613, 625, 629, 631, 636, 640, 641, 642, 643, 644, 646, 647, 648, 649, 652, 653, 656, 657, 658, 659, 660, 662, 663, 664, 665, 671, 672, 673, 675, 678, 679, 680, 681, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 699, 703, 705, 706, 708, 709, 710, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 746, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 791, 792, 807, 809, 810, 816, 828, 836, 840, 843, 845, 846, 847, 853, 854, 856, 860, 865, 874, 875], "x0": [43, 44, 62, 93, 549, 646, 847], "normalize_trac": [43, 44], "html": [43, 44, 58, 68, 69, 91, 92, 159, 167, 255, 265, 266, 281, 340, 347, 348, 381, 384, 387, 390, 399, 431, 504, 534, 641, 642, 644, 649, 651, 659, 697, 698, 729, 779, 848], "fname": [43, 44, 60, 62, 809], "anticip": [43, 44], "addition": [43, 44, 843, 856, 857], "normalize_native_comp": [43, 44], "return_backend_compiled_fn": 43, "immedi": [43, 44, 826, 828, 834, 835, 866], "eager_graph": [43, 44, 828, 874, 875], "lazy_graph": [43, 44, 828, 874, 875], "thought": [43, 44, 835, 836, 852], "matter": [43, 44, 49, 847], "haven": [43, 44, 49, 878], "jax_out": [43, 44], "ideal": [43, 44, 844, 845, 857, 863], "worth": [43, 44], "differenti": [43, 44, 307, 377, 378, 379, 386, 871, 878], "chosen": [43, 44, 62, 112, 138, 240, 641, 644, 656, 763, 834, 844, 857], "plai": [43, 44, 389, 468, 828, 831, 835, 837, 840, 846, 850, 857, 860, 866, 878], "role": [43, 44, 828, 831, 836, 837, 846, 857, 866, 879], "dl": [43, 44], "effortlessli": [43, 44], "previous": [43, 44, 615, 646, 816, 834, 835, 841, 853, 855, 860, 865], "default_devic": [43, 44, 218, 221, 222, 223, 229, 230, 643, 846, 849, 850], "as_n": [43, 44, 66, 67, 86, 89, 90, 170, 171, 172, 173, 174, 175, 181, 208, 209, 642, 643, 845], "certainli": [43, 44], "unnecessari": [43, 44, 857], "extend": [43, 44, 69, 92, 390, 399, 496, 537, 841, 842, 845, 848, 849, 852, 857, 861, 867, 878], "infrastructur": [43, 44], "least": [43, 68, 69, 74, 91, 92, 252, 270, 285, 387, 390, 399, 415, 420, 474, 475, 476, 485, 487, 534, 644, 649, 656, 689, 762, 836, 840, 844, 845, 846, 847, 853, 856, 860, 875], "coco": 43, "seamlessli": [44, 860], "therefor": [44, 49, 65, 68, 69, 74, 91, 92, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 167, 183, 187, 191, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 340, 341, 347, 348, 350, 353, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 489, 496, 497, 499, 504, 508, 509, 534, 537, 541, 550, 558, 559, 564, 568, 570, 572, 574, 588, 603, 607, 612, 636, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 834, 836, 839, 840, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 857, 858, 860, 861, 863, 865, 866, 867, 878], "wide": [44, 828, 836, 860, 878], "plenti": 44, "resourc": [44, 829, 834, 835, 844], "visit": [44, 834, 835, 836, 844], "page": [44, 828, 834, 835, 836, 842, 844, 850, 868, 876], "newli": [45, 46, 58, 60, 66, 89, 164, 551, 642, 646, 836, 844, 856, 860], "randon": [45, 46, 48, 49, 50], "mean_": 45, "std_": 45, "detect": [45, 49, 68, 86, 91, 267, 644, 653, 733, 744, 834, 835, 841, 843, 844, 851, 860], "inspect": [45, 49, 547, 646], "__": [45, 46, 47, 48, 49, 50, 86, 847], "script": [46, 828, 835, 836, 839, 844, 847, 866, 867, 878], "comp": 46, "low_level": 46, "chain": [46, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 153, 155, 161, 165, 167, 180, 184, 185, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 411, 412, 413, 431, 464, 465, 466, 467, 468, 469, 470, 471, 480, 481, 502, 504, 506, 508, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 652, 653, 662, 663, 664, 665, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 730, 731, 735, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 812, 840, 843, 855, 857, 865, 867, 878], "un": [46, 182, 642, 845, 865], "partial_comp": 46, "time_funct": 46, "express": [46, 68, 69, 91, 92, 110, 233, 237, 239, 240, 249, 251, 291, 297, 302, 371, 384, 644, 813, 822, 848, 857, 865, 866, 878, 879], "maxim": [46, 853, 856, 866], "conclud": [47, 861], "norm_comp": [48, 49], "global": [48, 49, 59, 70, 86, 93, 115, 170, 171, 172, 173, 174, 223, 224, 225, 594, 595, 598, 604, 605, 617, 618, 621, 642, 643, 646, 799, 810, 816, 835, 840, 841, 844, 845, 846, 849, 853, 857, 865, 878], "b": [49, 63, 68, 69, 70, 73, 74, 82, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 141, 146, 147, 148, 150, 153, 155, 161, 164, 165, 166, 167, 175, 185, 187, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 379, 381, 384, 387, 388, 389, 390, 394, 397, 399, 406, 407, 408, 409, 411, 412, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 437, 440, 442, 444, 448, 451, 455, 458, 463, 464, 465, 467, 468, 469, 470, 474, 475, 476, 477, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 495, 496, 502, 504, 505, 506, 507, 508, 511, 512, 517, 519, 521, 522, 524, 525, 527, 534, 535, 536, 537, 539, 541, 544, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 581, 588, 589, 603, 604, 605, 607, 611, 612, 625, 627, 628, 629, 631, 633, 634, 635, 636, 638, 641, 642, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 736, 739, 740, 741, 742, 744, 745, 750, 751, 752, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 821, 822, 826, 828, 829, 832, 836, 838, 839, 841, 843, 844, 847, 850, 853, 855, 858, 864, 865, 866, 870, 874, 877], "prioriti": [49, 86, 816, 831, 834, 836, 837, 846, 856], "normalize_via_oper": 49, "determin": [49, 68, 69, 74, 76, 80, 83, 86, 91, 92, 93, 97, 104, 106, 109, 112, 114, 115, 144, 167, 169, 176, 182, 183, 184, 185, 187, 188, 189, 204, 214, 216, 217, 228, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 252, 255, 257, 259, 265, 266, 267, 268, 269, 273, 274, 275, 276, 277, 282, 285, 290, 294, 297, 298, 299, 300, 301, 302, 303, 306, 316, 320, 366, 371, 379, 384, 387, 388, 389, 390, 399, 423, 431, 442, 464, 465, 504, 508, 534, 546, 549, 570, 571, 575, 576, 577, 578, 579, 580, 607, 625, 641, 642, 643, 644, 646, 649, 651, 652, 657, 660, 679, 680, 681, 683, 687, 688, 689, 691, 692, 694, 695, 697, 698, 703, 705, 706, 715, 730, 731, 732, 764, 765, 766, 767, 768, 782, 783, 793, 799, 806, 810, 843, 845, 846, 848, 853, 857, 860, 862, 863], "think": [49, 834, 836, 844, 847, 863, 879], "uniqu": [49, 59, 69, 70, 80, 92, 93, 103, 387, 388, 390, 435, 458, 495, 496, 510, 581, 646, 652, 653, 657, 730, 731, 732, 735, 739, 764, 765, 766, 767, 793, 828, 839, 843, 853, 857, 858, 859, 863, 867, 871], "rule": [49, 66, 68, 69, 74, 89, 91, 92, 97, 164, 167, 190, 191, 192, 241, 252, 285, 287, 294, 296, 304, 306, 387, 390, 399, 431, 484, 534, 642, 644, 649, 651, 679, 680, 687, 691, 694, 698, 715, 793, 821, 839, 840, 843, 844, 845, 847, 851, 852, 853, 855, 860, 863, 879], "broadcast": [49, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 341, 347, 348, 349, 350, 351, 352, 355, 356, 358, 360, 362, 364, 365, 366, 367, 371, 379, 381, 384, 387, 388, 389, 390, 393, 394, 399, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 429, 431, 436, 438, 439, 447, 448, 453, 454, 456, 465, 466, 467, 468, 470, 471, 477, 481, 484, 489, 497, 498, 499, 500, 502, 504, 506, 508, 509, 513, 516, 517, 519, 520, 521, 523, 524, 534, 535, 536, 537, 540, 541, 542, 543, 544, 552, 553, 557, 558, 559, 564, 565, 574, 588, 589, 627, 628, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 763, 767, 768, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 793, 821, 843, 845, 847, 848, 849, 860, 861, 865], "elementwis": [49, 69, 77, 92, 100, 312, 314, 374, 379, 649, 654, 704, 752, 853, 861, 865], "fact": [49, 109, 836, 839, 844, 857, 860, 866], "consum": [49, 788, 843, 844, 852, 858, 860], "thrown": [49, 574, 646, 835, 840, 846, 849, 851, 867], "doesn": [49, 574, 592, 646, 786, 807, 834, 835, 841, 843, 844, 845, 846, 847, 850, 851, 853, 855, 860, 863, 865, 867, 874], "consider": [49, 834, 847, 852, 863], "standalon": [50, 834, 840, 860, 869, 877, 879], "static": [50, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 118, 119, 141, 331, 387, 408, 421, 426, 435, 457, 463, 502, 514, 607, 641, 648, 675, 694, 804, 809, 857, 862, 867, 871, 878, 879, 880], "flow": [51, 843, 874, 878, 879], "statement": [51, 56, 844, 856, 860, 863, 867, 874, 875], "opposit": 51, "exclud": [51, 82, 92, 105, 138, 159, 340, 381, 535, 536, 641, 655, 756, 772, 791, 794, 816, 847, 866, 874], "todo": [52, 53, 54, 59, 62, 92, 536, 834, 845, 857], "aim": [55, 832, 836, 839, 850, 854, 857, 860, 864, 878, 880], "interfac": [55, 88, 146, 641, 867, 869, 871, 878], "set_framework": [55, 62], "underneath": [55, 844], "sai": [55, 834, 835, 850, 854], "a_min": 55, "a_max": 55, "tensforflow": 55, "clip_by_valu": [55, 865], "clip_value_min": 55, "clip_value_max": 55, "clamp": [55, 69, 92, 312, 379, 865], "devicearrai": [55, 840, 857, 865], "accept": [55, 64, 65, 68, 69, 74, 87, 91, 92, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 340, 341, 347, 348, 350, 353, 354, 376, 381, 384, 386, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 496, 504, 508, 534, 537, 541, 550, 558, 559, 564, 568, 570, 572, 574, 588, 603, 607, 612, 636, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 834, 835, 836, 840, 843, 845, 846, 847, 848, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 869], "jax_concat": 55, "tf_concat": 55, "np_concat": 55, "torch_concat": 55, "85": [55, 63, 69, 78, 85, 91, 92, 94, 96, 101, 115, 124, 237, 246, 247, 291, 307, 308, 311, 379, 399, 535, 604, 631, 638, 644, 646, 647, 648, 655, 672, 754, 755, 756], "mymodel": 55, "x_in": 55, "reduce_mean": [55, 828], "49040043354034424": 55, "48975786566734314": 55, "4892795979976654": 55, "48886892199516296": 55, "4884953498840332": 55, "4881443977355957": 55, "4878086447715759": 55, "48748287558555603": 55, "48716384172439575": 55, "48684927821159363": 55, "48653748631477356": 55, "48622724413871765": 55, "4859171509742737": 55, "48560672998428345": 55, "48529526591300964": 55, "4849821627140045": 55, "48466697335243225": 55, "4843493402004242": 55, "4840289056301117": 55, "4837053418159485": 55, "4833785891532898": 55, "4830484390258789": 55, "48271444439888": 55, "48237672448158264": 55, "48203518986701965": 55, "48168954253196716": 55, "4813397228717804": 55, "4809857904911041": 55, "48062753677368164": 55, "48026490211486816": 55, "479898065328598": 55, "47952669858932495": 55, "4791509211063385": 55, "4787706732749939": 55, "47838595509529114": 55, "4779967665672302": 55, "47760307788848877": 55, "4772048890590668": 55, "47680220007896423": 55, "47639501094818115": 55, "47598329186439514": 55, "4755673110485077": 55, "4751465618610382": 55, "4747215211391449": 55, "4742920398712158": 55, "47385817766189575": 55, "47341999411582947": 55, "47297725081443787": 55, "4725303053855896": 55, "47207894921302795": 55, "47162333130836487": 55, "47116345167160034": 55, "470699280500412": 55, "47023090720176697": 55, "4697583019733429": 55, "55": [55, 63, 92, 101, 130, 246, 305, 399, 535, 572, 644, 646, 649, 655, 659, 688, 694, 755, 756, 774, 839], "46928152441978455": 55, "46880054473876953": 55, "4683155119419098": 55, "4678264260292053": 55, "46733325719833374": 55, "46683603525161743": 55, "4663347601890564": 55, "4658295214176178": 55, "465320348739624": 55, "4648073613643646": 55, "46429020166397095": 55, "4637692868709564": 55, "46324464678764343": 55, "4627160429954529": 55, "4621836841106415": 55, "4616474211215973": 55, "46110764145851135": 55, "72": [55, 69, 78, 92, 94, 257, 361, 384, 387, 409, 419, 631, 644, 647, 649, 659, 694, 755, 774], "460563987493515": 55, "4600166976451874": 55, "74": [55, 57, 68, 101, 247, 277, 644, 649, 691], "45946577191352844": 55, "45891112089157104": 55, "45835286378860474": 55, "4577910006046295": 55, "78": [55, 71, 296, 633, 644, 647, 649, 655, 659, 694, 755, 774], "45722562074661255": 55, "45665669441223145": 55, "80": [55, 69, 92, 361, 384, 388, 399, 455, 535, 649, 653, 659, 694, 744, 774], "4560841917991638": 55, "81": [55, 59, 68, 74, 89, 91, 97, 101, 180, 250, 275, 276, 300, 399, 535, 642, 644, 649, 653, 655, 659, 687, 691, 704, 741, 756, 774, 860], "4555082619190216": 55, "45492875576019287": 55, "45434585213661194": 55, "45375964045524597": 55, "4531698524951935": 55, "4525766670703888": 55, "45198020339012146": 55, "4513803720474243": 55, "4507772624492645": 55, "4501707851886749": 55, "4495610296726227": 55, "4489481747150421": 55, "44833192229270935": 55, "4477125108242035": 55, "44708991050720215": 55, "44646409153938293": 55, "44583529233932495": 55, "4452032148838043": 55, "44456806778907776": 55, "4439": 55, "selectbackward0": 55, "ivy_compil": 56, "ic": 56, "numer": [56, 65, 66, 68, 69, 70, 74, 78, 79, 82, 89, 91, 92, 93, 97, 101, 102, 104, 114, 115, 151, 164, 232, 235, 248, 252, 257, 258, 259, 266, 267, 268, 271, 280, 281, 285, 287, 288, 289, 290, 294, 295, 296, 300, 301, 305, 306, 387, 389, 394, 399, 431, 466, 521, 534, 594, 595, 604, 605, 617, 618, 641, 642, 644, 646, 649, 655, 656, 659, 680, 687, 689, 694, 697, 699, 701, 703, 705, 754, 755, 756, 758, 759, 760, 762, 763, 768, 775, 778, 780, 791, 792, 793, 794, 806, 832, 845, 850, 855, 857, 858, 860, 861, 862, 863, 865, 878], "anyth": [56, 69, 92, 399, 540, 541, 836, 849, 860, 861, 878, 879], "affect": [56, 62, 69, 389, 469, 844, 857], "variabl": [56, 58, 59, 61, 69, 70, 71, 77, 86, 92, 93, 94, 100, 134, 135, 137, 334, 381, 387, 388, 394, 399, 433, 459, 522, 533, 534, 550, 574, 575, 576, 577, 580, 607, 628, 629, 631, 633, 634, 635, 640, 646, 647, 649, 652, 654, 698, 730, 731, 732, 752, 788, 799, 804, 806, 807, 808, 809, 810, 811, 812, 836, 841, 845, 848, 852, 855, 856, 860, 861, 865, 867, 868, 874, 879], "original_fn": 56, "100000": 56, "co": [56, 57, 68, 70, 91, 250, 255, 257, 298, 561, 644, 646, 833, 845, 866], "sin": [56, 68, 70, 91, 250, 255, 257, 298, 561, 644, 646, 840, 866], "tan": [56, 68, 91, 548, 644, 646, 848, 852, 853, 856, 857, 866], "comp_fn": 56, "compile_graph": [56, 62], "expected_result": 56, "compiled_result": 56, "irrelev": [56, 844, 845, 847], "opeat": 56, "_layer": [56, 866], "net": [56, 61, 62, 866], "compiled_net": 56, "latest": [57, 59, 68, 69, 91, 92, 167, 255, 265, 266, 281, 347, 348, 384, 387, 390, 399, 431, 433, 504, 534, 642, 644, 649, 651, 659, 697, 698, 729, 779, 807, 828, 834, 835, 836, 839, 841, 844, 848, 850, 861, 867, 868, 875], "pypi": [57, 59, 62, 834, 835, 861, 867], "pkg": [57, 59, 62], "public": [57, 59, 62, 554, 646, 844, 855], "revis": [57, 59, 836], "req": [57, 59], "tabqrujw": 57, "quiet": [57, 59], "commit": [57, 59, 831, 832, 834, 837, 839, 847, 859, 860], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 57, "cp39": [57, 59], "manylinux_2_12_x86_64": [57, 59], "manylinux2010_x86_64": [57, 59], "manylinux_2_17_x86_64": [57, 59, 835], "manylinux2014_x86_64": [57, 58, 59], "495": [57, 59], "nvidia_ml_pi": [57, 59], "pypars": [57, 59, 62], "ivy_cor": [57, 59, 62, 835], "1338326": 57, "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 57, "njrc_e6b": 57, "07": [57, 59, 71, 75, 91, 94, 98, 101, 240, 273, 276, 277, 296, 387, 419, 617, 627, 628, 630, 631, 632, 633, 644, 646, 647, 650, 709, 710, 755, 808, 811], "2e": [57, 59], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [57, 59], "4845": [57, 59], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 57, "b6": [57, 59], "0d": [57, 59], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [57, 59], "uninstal": [57, 59, 62], "vnd": [57, 59, 62], "json": [57, 59, 62, 86, 835, 850], "psst": 57, "pickl": [57, 58, 86, 809, 843], "imageio": 57, "urllib": [57, 62], "_src": 57, "back": [57, 69, 76, 92, 99, 390, 486, 507, 590, 614, 646, 648, 651, 675, 721, 806, 811, 822, 835, 840, 845, 846, 849, 854, 855, 862, 867, 868], "tf_cpp_min_log_level": 57, "mkdir": [57, 58, 59, 835, 844], "perceiv": [57, 58], "touch": 57, "io_processor": 57, "position_encod": 57, "jmp": 57, "tabul": 57, "29359": 57, "29k": 57, "67k": 57, "002": 57, "30179": 57, "47k": 57, "8107": 57, "9k": 57, "92k": 57, "itertool": 57, "preprocessor": 57, "vector": [57, 65, 69, 70, 73, 74, 92, 93, 96, 97, 109, 110, 112, 151, 377, 378, 386, 387, 388, 390, 393, 394, 399, 410, 441, 446, 454, 456, 461, 496, 498, 500, 518, 522, 534, 553, 557, 574, 626, 641, 646, 648, 649, 672, 675, 680, 684, 685, 687, 689, 694, 699, 700, 704, 705, 706, 707, 791, 807, 878], "perceiverbackbon": 57, "input_preprocessor": 57, "_input_preprocessor": 57, "_encod": 57, "__call__": [57, 788, 807, 808, 809, 828, 875], "is_train": 57, "po": [57, 822], "input_mask": 57, "network_input_is_1d": 57, "_input_is_1d": 57, "queri": [57, 58, 73, 86, 96, 210, 224, 567, 593, 643, 646, 648, 675, 678, 807, 843, 845, 850, 878], "decod": 57, "cross": [57, 59, 74, 75, 97, 98, 110, 649, 650, 708, 709, 710, 844, 845], "attend": [57, 648, 675], "encoder_queri": 57, "latent": [57, 652, 731, 732], "imagepreprocessor": 57, "deal": [57, 809, 832, 846, 853, 855, 857, 860, 867], "image_s": 57, "fourier_pos_config": 57, "position_encoding_typ": 57, "fourier": [57, 69, 92, 387, 410, 415, 416, 420, 421, 431, 432, 435, 561, 646], "fourier_position_encoding_kwarg": 57, "concat_po": 57, "max_resolut": 57, "num_band": [57, 70, 93, 561, 646], "sine_onli": 57, "prep_typ": 57, "spatial_downsampl": 57, "cross_attend_widening_factor": 57, "cross_attention_shape_for_attn": 57, "kv": 57, "dropout_prob": 57, "num_block": 57, "num_cross_attend_head": 57, "num_self_attend_head": 57, "num_self_attends_per_block": 57, "num_z_channel": 57, "self_attend_widening_factor": 57, "use_query_residu": 57, "z_index_dim": 57, "z_pos_enc_init_scal": 57, "perceiver_backbon": [57, 828], "perceiverencod": 57, "At": [57, 834, 835, 836, 839, 850, 860, 861, 878], "publish": [57, 828, 867, 875], "thankfulli": [57, 860], "perceiver_io": [57, 58], "imagenet_fourier_position_encod": 57, "pystat": 57, "imagenet_checkpoint": 57, "rb": 57, "ckpt": 57, "09": [57, 63, 68, 94, 101, 130, 290, 300, 627, 638, 644, 647, 755], "173": [57, 74, 649, 687], "194": 57, "125": [57, 69, 74, 97, 246, 358, 384, 389, 465, 644, 649, 704], "177": [57, 59], "193776248": 57, "185m": 57, "octet": 57, "184": 57, "80m": 57, "144mb": 57, "144": 57, "mean_rgb": 57, "stddev_rgb": 57, "im": 57, "denorm": 57, "resize_and_center_crop": 57, "crop": [57, 69, 92, 387, 416, 421, 432], "center": [57, 806], "image_height": [57, 59], "image_width": 57, "padded_center_crop_s": 57, "offset_height": 57, "offset_width": 57, "crop_window": 57, "inter_cub": 57, "ye": [57, 867], "dummy_input": [57, 828], "transpili": 57, "torch_perceiver_backbon": 57, "quicker": 57, "params_v": [57, 828, 875], "perceiverioclassifi": [57, 828], "max_pool": [57, 828], "Of": [57, 840, 856, 857], "cours": [57, 835, 836, 839, 840, 847, 856, 857, 863, 867], "468": 57, "huggingface_hub": 57, "multiprocess": [57, 86, 115, 646, 867], "py39": 57, "132": [57, 92], "pyarrow": 57, "xxhash": 57, "pyyaml": 57, "2021": [57, 69, 92, 374, 384, 828], "aiohttp": 57, "async": 57, "timeout": [57, 86, 115, 598, 621, 646, 862], "0a3": 57, "async_timeout": 57, "frozenlist": 57, "manylinux_2_5_x86_64": [57, 62], "manylinux1_x86_64": [57, 62], "158": 57, "attr": [57, 845], "aiosign": 57, "multidict": 57, "114": [57, 387, 409, 419], "yarl": 57, "264": [57, 653, 733], "2022": [57, 58], "pytz": 57, "2020": [57, 839, 878], "dateutil": [57, 62], "wikiart": 57, "paint": [57, 828, 865, 871], "load_dataset": [57, 874, 875], "n_sampl": [57, 69, 92, 388, 390, 437, 445, 499], "10000": [57, 59, 65, 88, 150, 641], "huggan": 57, "split": [57, 58, 59, 63, 68, 69, 76, 85, 86, 91, 92, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 223, 224, 225, 303, 307, 312, 313, 315, 360, 367, 379, 390, 482, 491, 511, 557, 584, 638, 643, 644, 646, 648, 651, 661, 668, 669, 726, 788, 803, 807, 828, 829, 836, 844, 865, 867], "wiki_art": 57, "gib": 57, "unknown": [57, 791], "huggan___parquet": 57, "36ee951979f9b56c": 57, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 57, "parquet": 57, "subsequ": [57, 816, 835, 840, 844, 845, 847, 852, 853, 856, 860, 879], "curl": [57, 835], "2fwikiart": 57, "xferd": 57, "dload": 57, "upload": [57, 860], "spent": 57, "25936": 57, "278k": 57, "abstract_expression": 57, "action_paint": 57, "analytical_cub": 57, "art_nouveau": 57, "baroqu": 57, "color_field_paint": 57, "contemporary_r": 57, "cubism": 57, "early_renaiss": 57, "expression": 57, "fauvism": 57, "high_renaiss": 57, "impression": 57, "mannerism_late_renaiss": 57, "minim": [57, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 381, 387, 389, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 699, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 822, 848, 856, 858, 863, 865, 874], "naive_art_primitiv": 57, "new_real": 57, "northern_renaiss": 57, "pointil": 57, "pop_art": 57, "post_impression": 57, "realism": 57, "rococo": 57, "romantic": 57, "symbol": [57, 821, 834, 835, 878, 879], "synthetic_cub": 57, "ukiyo_": 57, "custom": [57, 69, 92, 311, 323, 376, 379, 386, 791, 821, 830, 838, 844, 849, 854, 858, 860, 863, 878], "hugginfac": 57, "customdataset": 57, "__len__": [57, 843], "__getitem__": [57, 86, 843], "idx": [57, 58, 59, 547, 646, 846], "random_split": 57, "224x224": 57, "val_siz": 57, "dataset_train": 57, "dataset_v": 57, "dataset_test": 57, "dataloader_train": 57, "dataloader_v": 57, "dataloader_test": 57, "train_featur": 57, "train_label": 57, "train_step": 57, "running_loss": [57, 59], "last_loss": 57, "training_load": 57, "intra": 57, "report": [57, 831, 834, 860], "zero_grad": 57, "999": [57, 71, 91, 94, 303, 627, 628, 633, 635, 644, 647, 811], "epoch_numb": 57, "best_vloss": 57, "1_000_000": 57, "running_vloss": 57, "vdata": 57, "vinput": 57, "vlabel": 57, "voutput": 57, "vloss": 57, "avg_vloss": 57, "model_path": 57, "model_": 57, "state_dict": [57, 808, 809], "highest": [57, 69, 78, 92, 101, 331, 334, 381, 655, 754, 845], "energi": 57, "mayb": [57, 58, 64, 828, 835, 844, 865], "deploi": [57, 828, 844, 869, 875, 878, 880], "percieverio": 58, "ai": [58, 844], "contribut": [58, 69, 92, 399, 537, 831, 833, 835, 836, 837, 842, 850, 851, 857, 858, 866, 868, 874], "invit": [58, 834, 837, 857, 863], "g4ar9q7dtn": 58, "step1": 58, "printf": 58, "8packag": 58, "share": [58, 86, 198, 642, 791, 792, 828, 841, 843, 847, 853, 855, 857, 858, 860, 863, 865, 872], "googledr": 58, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 58, "file_id": 58, "drive": [58, 59], "uc": 58, "tee": [58, 835], "file_id_wget_cmd": 58, "perl": 58, "pe": 58, "g": [58, 60, 61, 69, 78, 80, 82, 84, 92, 101, 107, 109, 163, 192, 205, 252, 265, 285, 292, 295, 347, 348, 384, 387, 388, 390, 394, 399, 424, 426, 463, 504, 520, 521, 522, 523, 524, 535, 536, 642, 643, 644, 649, 653, 655, 657, 659, 685, 686, 690, 697, 699, 700, 706, 736, 740, 742, 745, 750, 754, 755, 756, 764, 765, 766, 767, 772, 773, 775, 777, 778, 780, 806, 826, 829, 834, 835, 838, 839, 841, 842, 843, 855, 857, 860, 865, 867, 869], "uuid": 58, "anywai": [58, 840, 854, 857], "bin": [58, 69, 92, 399, 532, 537, 835, 836, 839, 843], "bash": [58, 835, 836, 839], "step2": 58, "interpret": [58, 65, 69, 88, 92, 139, 140, 146, 152, 389, 399, 466, 534, 641, 844, 879], "sudo": [58, 835], "apt": [58, 835], "yf": 58, "step3": 58, "xvzf": 58, "rm": [58, 60, 830, 836], "step4": 58, "symlink": 58, "unzip": [58, 59], "fr": 58, "l": [58, 69, 74, 91, 97, 279, 388, 389, 441, 464, 648, 649, 675, 679, 684, 685, 686, 689, 703, 836, 838], "ln": 58, "sf": 58, "la": 58, "step5": 58, "step6": 58, "ipkykernel": 58, "step7": 58, "engbjapanpython3": 58, "ipykernel": 58, "reconnect": 58, "sy": 58, "oct": 58, "gcc": 58, "lf": 58, "upgrad": 58, "cuda11": 58, "cudnn805": 58, "cp38": [58, 62, 835], "helper": [58, 786, 788, 789, 795, 797, 798, 832, 842, 845, 849, 850, 859, 869], "feedforward": 58, "prenorm": 58, "perceiveriospec": 58, "fetch": [58, 569, 646, 835, 836, 839, 844], "ogbanugot": 58, "xmartlab": 58, "caffeflow": 58, "fetch_class": 58, "class_label": 58, "ground_truth": 58, "127": [58, 66, 69, 74, 89, 92, 180, 371, 384, 642, 649, 687], "path_to_imag": 58, "get_imag": 58, "spine": 58, "set_vis": 58, "bottom": [58, 557, 646, 834, 835, 844, 850], "tick_param": 58, "set_xticklabel": 58, "set_yticklabel": 58, "show_result": 58, "listdir": [58, 59], "endswith": 58, "this_dir": 58, "dirnam": 58, "add_subplot": 58, "xtick": 58, "ytick": 58, "green": [58, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 827, 834, 835, 836], "red": 58, "perceiver_io_img_classif": 58, "normalize_imag": 58, "batch_shap": [58, 73, 78, 88, 96, 101, 144, 153, 641, 648, 649, 655, 674, 678, 707, 753, 807, 863, 865], "img_dim": 58, "queries_dim": 58, "learn_queri": 58, "load_weight": 58, "num_input_ax": 58, "network_depth": 58, "num_lat_att_per_lay": 58, "query_shap": 58, "num_fourier_freq_band": 58, "weight_fpath": 58, "pretrained_weight": 58, "isfil": 58, "noinspect": 58, "pybroadexcept": 58, "from_disk_as_pickl": 58, "action": [58, 826, 833, 844, 847, 851, 860], "placehold": [58, 653, 740, 745, 750, 807, 836, 840, 852, 869], "pyunboundlocalvari": 58, "max_fourier_freq": 58, "random_uniform": [58, 62, 78, 101, 655, 846, 849, 860, 866], "817437": 58, "gpu_bfc_alloc": 58, "orig_valu": 58, "tf_force_gpu_allow_growth": 58, "autograd": [58, 867], "declar": [58, 836, 859], "_3r2_73j": 59, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 59, "1297564": 59, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 59, "le3bu3_v": 59, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 59, "third": [59, 109, 110, 390, 483, 510, 649, 657, 699, 764, 842, 845, 856, 867, 878, 880], "parti": [59, 842, 845, 867, 878, 880], "mount": [59, 830, 836], "mydriv": 59, "chdir": 59, "kaggl": 59, "medium": 59, "articl": [59, 828, 851], "insert": [59, 69, 79, 92, 102, 390, 471, 481, 651, 653, 656, 658, 717, 737, 738, 759, 770, 844, 851], "www": [59, 347, 348, 384], "your_kaggle_usernam": 59, "competit": 59, "digit": 59, "readabl": [59, 840, 843, 849, 851, 852, 860, 861], "chmod": [59, 835, 844], "forc": [59, 842, 844, 846], "archiv": [59, 835], "inflat": [59, 845], "sample_submiss": 59, "later": [59, 86, 551, 646, 834, 851, 856, 860, 861, 878], "my": [59, 844], "label_df": 59, "mod_train": 59, "data_valu": 59, "test_data_valu": 59, "correct_label": 59, "train_path": 59, "str": [59, 61, 64, 65, 69, 70, 73, 74, 75, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 137, 146, 148, 151, 153, 155, 161, 162, 165, 167, 169, 170, 171, 172, 176, 177, 180, 181, 182, 183, 184, 185, 187, 189, 192, 193, 194, 195, 196, 197, 204, 205, 225, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 387, 388, 389, 390, 393, 399, 402, 406, 407, 408, 410, 411, 412, 413, 415, 416, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 438, 442, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 479, 480, 481, 486, 502, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 519, 521, 523, 534, 535, 536, 537, 544, 546, 547, 549, 550, 552, 553, 555, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 585, 588, 589, 591, 592, 601, 603, 604, 605, 607, 609, 611, 612, 625, 629, 636, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 700, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 739, 740, 745, 750, 753, 754, 755, 756, 758, 761, 764, 765, 766, 768, 772, 773, 774, 776, 778, 779, 781, 782, 783, 788, 789, 791, 792, 797, 799, 807, 809, 810, 821, 822, 826, 845, 846, 849, 853, 856, 857, 861, 865, 874, 875, 876], "makedir": 59, "valid_path": 59, "28x28": 59, "pic": 59, "int8": [59, 66, 78, 88, 89, 101, 146, 173, 178, 180, 181, 185, 641, 642, 754, 791, 792, 845, 860], "new_img": [59, 61], "builder": [59, 830], "batchwis": 59, "goe": [59, 390, 479, 838, 851, 856, 863], "seed_valu": [59, 86, 655, 757], "randomize_dataset": 59, "create_dataset": 59, "num_examples_per_class": 59, "img_arrai": 59, "dir": 59, "img_path": 59, "imread": [59, 61], "imread_grayscal": 59, "generate_batch": 59, "ivyerror": [59, 823, 849], "smaller": [59, 69, 76, 82, 92, 99, 314, 346, 363, 379, 384, 387, 389, 399, 416, 421, 432, 464, 534, 535, 536, 557, 646, 651, 659, 714, 722, 772, 773, 778, 780, 836, 849, 865], "yield": [59, 79, 332, 333, 381, 390, 496, 656, 763, 844], "x_batch_inst": 59, "form": [59, 61, 64, 65, 69, 74, 86, 88, 97, 108, 109, 110, 139, 140, 152, 157, 158, 324, 327, 341, 350, 381, 384, 388, 390, 441, 452, 483, 492, 496, 512, 547, 608, 610, 641, 646, 648, 649, 653, 679, 681, 683, 684, 685, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 703, 734, 745, 791, 806, 829, 834, 835, 853, 860, 863, 878, 879], "intialis": 59, "num_epoch": 59, "inherit": [59, 840, 843, 849, 867, 869], "creation": [59, 69, 86, 92, 115, 842, 845, 846, 852, 854, 857, 858, 860, 861, 865, 874, 878], "inform": [59, 61, 66, 69, 71, 89, 94, 177, 180, 331, 381, 547, 636, 642, 646, 647, 652, 732, 826, 828, 833, 834, 835, 836, 837, 839, 843, 844, 849, 853, 854, 856, 858, 860], "insid": [59, 74, 97, 115, 390, 506, 649, 692, 789, 835, 836, 840, 843, 845, 846, 850, 853, 854, 860, 861, 874], "ivynet": 59, "h_w": 59, "input_channel": [59, 807, 865], "output_channel": [59, 807], "gelu": [59, 60, 63, 85, 638, 803], "image_widht": 59, "start_dim": [59, 69, 92, 390, 486], "end_dim": [59, 69, 92, 390, 486], "gpu_is_avail": [59, 643], "__name__": [59, 60, 62, 613, 646, 849], "heavi": [59, 793, 835, 857, 858, 863, 879], "lift": [59, 858, 879], "num_correct": 59, "y_pred": 59, "epoch_loss": 59, "field": [59, 74, 80, 97, 103, 388, 390, 441, 510, 649, 657, 684, 685, 696, 697, 699, 764, 765, 766, 844], "training_accuraci": 59, "train_loss": 59, "train_correct": 59, "train_loop": 59, "leav": [59, 64, 69, 87, 89, 91, 92, 93, 96, 97, 99, 105, 115, 177, 180, 252, 309, 312, 313, 319, 390, 480, 481, 486, 498, 499, 500, 516, 517, 519, 535, 536, 541, 561, 609, 651, 653, 667, 678, 683, 699, 716, 720, 725, 727, 728, 733, 734, 743, 744, 745, 746, 772, 773, 821, 834, 843, 844, 845, 847, 848, 852, 853, 856, 857, 860], "xbatch": 59, "ybatch": 59, "to_devic": [59, 67, 90, 208, 643, 809], "entropi": [59, 75, 98, 650, 708, 709, 710], "hot": [59, 65, 88, 153, 641], "ybatch_encod": 59, "one_hot": [59, 65, 88, 641, 865], "loss_prob": 59, "ret_grad_idx": [59, 629, 647, 788, 855], "xs_grad_idx": [59, 629, 647, 788, 855], "batch_loss": 59, "set_descript": 59, "set_postfix": 59, "accuracy_percentag": 59, "naverag": 59, "6f": 59, "_train_summari": 59, "writer": 59, "writerow": 59, "157it": 59, "06it": 59, "475401": 59, "11it": 59, "081436": 59, "13it": 59, "0187": 59, "029279": 59, "008382": 59, "07it": 59, "00456": 59, "003816": 59, "82it": 59, "00277": 59, "002179": 59, "05it": 59, "00175": 59, "001569": 59, "00147": 59, "09it": 59, "00128": 59, "001005": 59, "10it": 59, "00112": 59, "000837": 59, "129": [59, 648, 667, 669], "12it": 59, "000989": 59, "000709": 59, "145": 59, "000873": 59, "000606": 59, "08it": 59, "000774": 59, "000524": 59, "000688": 59, "000455": 59, "000613": 59, "000398": 59, "000547": 59, "000350": 59, "000488": 59, "000308": 59, "000437": 59, "000273": 59, "000391": 59, "000243": 59, "238": [59, 259, 644], "98it": 59, "000351": 59, "000216": 59, "260": 59, "plot_summari": 59, "whitegrid": 59, "nrow": 59, "ncol": 59, "fontweight": 59, "bold": 59, "set_xlabel": 59, "set_ylabel": 59, "savefig": 59, "summary_plot": 59, "png": [59, 61, 62], "save_weight": [59, 809], "model_param": 59, "ivynet_weight": 59, "hdf5": [59, 86, 809], "deitimageprocessor": 60, "tfdeitforimageclassif": 60, "tfdeitforimageclassificationwithteach": 60, "distillation_classifi": 60, "cls_classifi": 60, "randomli": [60, 387, 411, 412, 413, 648, 671, 791, 792, 793, 794, 799, 807], "henc": [60, 80, 235, 350, 384, 644, 651, 657, 717, 764, 765, 766, 767, 816, 835, 843, 844, 845, 856, 860], "image_processor": [60, 874, 875], "distil": [60, 879], "patch16": 60, "outputs_from_original_model": 60, "bertforsequenceclassif": 60, "bertforpretrain": 60, "NOT": [60, 280, 644, 821, 834], "probabl": [60, 69, 73, 75, 78, 92, 96, 98, 101, 387, 389, 394, 399, 411, 412, 413, 466, 520, 534, 537, 541, 648, 650, 655, 671, 675, 678, 708, 753, 793, 806, 807, 828, 860, 868], "ptarmigan": 60, "rf": [60, 836], "branch": [60, 240, 252, 255, 257, 285, 297, 298, 299, 302, 644, 835, 836, 839, 844, 851, 867, 874, 878], "moduleconvert": [60, 804, 809], "mc": 60, "from_keras_modul": [60, 804], "compiled_func": 60, "return_graph": [60, 62], "compiled_output": 60, "diverg": [60, 69, 92, 259, 389, 466, 644], "_all_funct": [60, 62], "convert_to_tensor_v2_with_dispatch": 60, "transpose_v2": 60, "convolution_v2": 60, "bias_add": 60, "binary_op_wrapp": 60, "cast": [60, 66, 68, 69, 74, 82, 89, 91, 97, 105, 164, 167, 192, 286, 399, 535, 536, 642, 644, 649, 659, 690, 706, 772, 773, 776, 778, 780, 792, 853, 858, 865], "moments_v2": 60, "batch_norm": [60, 62, 69, 92, 393], "tensordot": [60, 74, 97, 649, 822, 845], "softmax_v2": 60, "_slice_help": 60, "save_to_disk": [60, 62, 809], "12265048989200113": 60, "11038777417100028": 60, "1167045795539998": 60, "ivy_api_kei": 61, "obj": [61, 139, 140, 569, 641, 646, 819, 874, 875, 876], "combo": 61, "permit": [61, 840, 852, 857, 860, 863], "usabl": [61, 852, 861], "neither": [61, 235, 252, 259, 285, 644, 649, 701, 844, 857, 863], "nor": [61, 235, 252, 259, 285, 644, 844, 857], "specifc": 61, "invoc": 61, "externally_link": 61, "logo": 61, "patch": [61, 303, 644, 845, 878], "cv2_imshow": 61, "envrion": 61, "canni": 61, "original_img": 61, "fn_arg": 61, "dilate_edg": 61, "morphologi": 61, "hk_model": 61, "keras_model": 61, "odsc": 61, "talk": 61, "352": [62, 96, 648, 672, 849], "nvidia_ml_py3": 62, "19190": 62, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 62, "b9": 62, "b1": [62, 649, 698], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 62, "cycler": 62, "fonttool": 62, "965": 62, "kiwisolv": 62, "show_graph": [62, 809], "to_ivy_modul": [62, 804], "image_dim": 62, "v0": 62, "urlerror": 62, "dev_str": 62, "comp_network": 62, "time_chronolog": 62, "ret0_nc": 62, "ret1_nc": 62, "ret0_c": 62, "ret1_c": 62, "pytorch_vision_v0": 62, "distributed_c10d": 62, "262": 62, "reduce_op": 62, "reduceop": 62, "004645566477999864": 62, "0044566806820000695": 62, "attribut": [62, 86, 177, 178, 179, 180, 211, 212, 220, 562, 563, 642, 643, 646, 789, 841, 842, 843, 848, 849, 853, 854, 856, 857, 863], "definit": [62, 68, 74, 91, 97, 304, 644, 649, 679, 828, 832, 836, 840, 845, 850, 853, 875], "max_pool2d": [62, 69, 92, 387, 407], "__iadd__": 62, "adaptive_avg_pool2d": [62, 69, 92, 387], "_arraywithactiv": [63, 114], "abc": [63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 118, 560, 646, 653, 751, 806, 811, 821, 822], "_abc_impl": [63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119], "_abc": [63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119], "_abc_data": [63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119], "approxim": [63, 68, 69, 74, 85, 91, 92, 97, 109, 112, 122, 233, 234, 237, 238, 239, 240, 249, 250, 255, 257, 259, 273, 274, 275, 276, 290, 297, 298, 302, 303, 304, 361, 371, 384, 389, 468, 469, 638, 644, 649, 692, 695, 803, 848, 857], "complex_mod": [63, 68, 69, 85, 91, 92, 122, 123, 124, 125, 126, 127, 128, 129, 130, 303, 307, 312, 313, 315, 379, 638, 644, 803, 854], "variant": [63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 161, 165, 166, 167, 177, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 627, 628, 631, 633, 634, 635, 636, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 703, 704, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 840, 847, 848, 863], "docstr": [63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 165, 166, 167, 177, 180, 184, 185, 192, 209, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 387, 390, 399, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 424, 425, 426, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 556, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 578, 580, 581, 583, 588, 589, 603, 604, 605, 606, 607, 609, 611, 612, 625, 626, 627, 628, 631, 633, 634, 635, 636, 641, 642, 644, 646, 649, 651, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 833, 834, 838, 842, 851, 852, 853, 854, 857, 859, 861], "liter": [63, 68, 69, 74, 85, 91, 92, 97, 122, 123, 124, 125, 126, 127, 128, 129, 130, 303, 307, 312, 313, 315, 379, 387, 388, 390, 393, 409, 419, 423, 431, 446, 452, 457, 460, 463, 496, 518, 638, 644, 649, 658, 690, 706, 770, 803, 863], "magnitud": [63, 68, 69, 85, 91, 92, 122, 123, 124, 125, 126, 127, 128, 129, 130, 232, 235, 252, 259, 285, 303, 307, 312, 313, 315, 379, 638, 644, 649, 699, 700, 803, 845], "handle_complex_input": [63, 68, 69, 85, 91, 92, 122, 123, 124, 125, 126, 127, 128, 129, 130, 303, 307, 312, 313, 315, 379, 638, 644, 803, 854], "element": [63, 65, 68, 69, 70, 73, 74, 76, 78, 79, 80, 82, 85, 86, 88, 89, 91, 92, 93, 96, 97, 99, 101, 102, 103, 105, 110, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 141, 147, 148, 157, 158, 159, 175, 177, 180, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 317, 318, 319, 321, 322, 323, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 354, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 384, 387, 388, 389, 390, 399, 400, 411, 412, 413, 416, 421, 424, 425, 426, 430, 432, 433, 434, 440, 441, 442, 464, 474, 475, 476, 486, 487, 488, 490, 493, 503, 504, 506, 508, 510, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 545, 549, 552, 553, 564, 565, 581, 583, 603, 604, 605, 607, 611, 612, 638, 641, 644, 646, 648, 649, 651, 653, 655, 656, 657, 658, 659, 660, 671, 680, 682, 684, 685, 689, 694, 696, 697, 699, 703, 714, 717, 718, 719, 720, 721, 722, 723, 724, 733, 736, 742, 753, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 791, 793, 807, 822, 848, 858, 860, 863, 865], "138": [63, 122, 638], "165": [63, 122, 638, 648, 672], "hardswish": [63, 69, 85, 92, 310, 379, 638, 803], "leaky_relu": [63, 85, 92, 307, 638, 792], "alpha": [63, 68, 69, 85, 91, 92, 119, 124, 235, 301, 307, 308, 316, 320, 326, 379, 381, 388, 393, 394, 442, 518, 521, 522, 523, 638, 644, 803, 852, 857, 858], "slope": [63, 69, 85, 92, 124, 307, 308, 314, 316, 320, 379, 638, 803], "leaki": [63, 85, 124, 638, 803], "log_softmax": [63, 85, 638, 803], "0719": [63, 85, 125], "mish": [63, 85, 638, 803], "30340147": [63, 126, 638], "86509842": [63, 85, 126, 638], "269": [63, 128], "881": [63, 68, 91, 128, 238, 251, 291, 644], "422": [63, 129, 638], "155": [63, 96, 129, 638, 648, 672], "softplu": [63, 85, 638, 803, 863], "beta": [63, 69, 77, 85, 92, 100, 130, 316, 320, 326, 329, 330, 379, 381, 388, 389, 393, 394, 442, 470, 518, 522, 523, 638, 654, 752, 803, 863], "threshold": [63, 68, 69, 85, 91, 92, 130, 283, 284, 323, 349, 379, 384, 389, 390, 465, 470, 503, 638, 644, 803, 863], "union": [63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 570, 572, 573, 574, 576, 577, 580, 581, 583, 584, 588, 589, 593, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 791, 806, 811, 812, 840, 843, 845, 846, 847, 849, 852, 853, 856, 861, 863, 865, 874, 875, 876], "3461": [63, 85, 130, 638], "6491": [63, 85, 130, 638], "hopefulli": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 871, 872], "_array_to_new_backend": 64, "_data_to_new_backend": 64, "native_x": 64, "native_x_backend": 64, "_to_ivi": 64, "_to_n": 64, "to_ignor": [64, 84, 107, 653, 744, 745], "_to_new_backend": 64, "args_to_ivi": 64, "include_deriv": [64, 87, 653, 734, 745, 788], "nest": [64, 86, 87, 115, 118, 255, 579, 609, 626, 629, 644, 646, 647, 652, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 811, 840, 842, 843, 853, 855, 861, 867, 869, 878], "unchang": [64, 68, 387, 390, 432, 486, 648, 671], "deriv": [64, 65, 69, 71, 87, 88, 92, 94, 143, 148, 155, 161, 325, 329, 354, 381, 384, 627, 628, 631, 632, 633, 634, 635, 641, 647, 652, 653, 732, 734, 745, 809, 811, 812, 845, 846], "word": [64, 138, 390, 489, 641, 655, 756, 804, 807, 843, 856, 857, 869], "args_to_n": [64, 856], "cont_inplac": 64, "decid": [64, 86, 653, 744, 745, 834, 835, 845, 863], "args_to_new_backend": 64, "shallow": [64, 653, 740, 741, 745, 750, 751], "nativevari": 64, "mutabl": [64, 653, 734, 740, 741, 745, 750, 751, 841], "to_ivi": [64, 87, 653, 746, 856], "leaf": [64, 86, 93, 105, 115, 560, 653, 743, 744, 746, 773, 843, 853], "travers": [64, 87, 653, 737, 745, 843, 845, 849, 866], "lowest": [64, 69, 78, 87, 92, 101, 399, 537, 653, 655, 745, 754, 822, 853, 867, 869, 879], "search": [64, 69, 87, 92, 759, 760, 799, 833, 835, 843, 847, 850, 860, 861], "to_new_backend": 64, "_arraywithcr": [65, 114], "boolean": [65, 66, 68, 69, 70, 76, 79, 82, 86, 88, 89, 91, 92, 93, 99, 102, 105, 114, 115, 135, 137, 139, 140, 141, 147, 164, 180, 182, 184, 185, 188, 204, 214, 222, 228, 242, 243, 244, 245, 246, 247, 279, 280, 281, 282, 347, 348, 363, 384, 388, 390, 446, 457, 463, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 504, 511, 546, 549, 560, 567, 570, 571, 575, 576, 577, 578, 579, 580, 581, 590, 593, 596, 597, 599, 600, 625, 640, 641, 642, 643, 644, 646, 648, 651, 652, 653, 656, 659, 675, 717, 718, 719, 721, 723, 724, 726, 728, 730, 731, 743, 761, 762, 763, 775, 777, 791, 792, 793, 794, 799, 810, 843, 845, 853, 857, 860, 863], "never": [65, 69, 76, 88, 92, 99, 140, 390, 474, 475, 476, 482, 484, 486, 487, 488, 491, 495, 502, 511, 567, 646, 651, 717, 718, 719, 721, 723, 724, 726, 728, 836, 845, 856, 857, 860], "buffer": [65, 88, 92, 99, 140, 146, 474, 475, 482, 484, 486, 487, 488, 495, 511, 641, 717, 718, 719, 721, 723, 724, 726, 728, 808, 809, 856, 867], "nativedtyp": [65, 66, 69, 73, 74, 78, 79, 82, 88, 92, 97, 101, 102, 105, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 160, 161, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 181, 182, 186, 188, 190, 194, 204, 324, 325, 326, 327, 328, 329, 330, 345, 352, 368, 381, 384, 394, 399, 520, 521, 522, 523, 524, 534, 535, 536, 537, 540, 543, 641, 642, 648, 649, 655, 656, 658, 659, 671, 690, 706, 754, 755, 756, 759, 760, 770, 772, 773, 776, 778, 780, 806, 845, 846, 852, 861, 865], "datatyp": [65, 69, 86, 88, 92, 140, 148, 152, 169, 190, 194, 387, 435, 641, 642, 786, 861, 874], "nativedevic": [65, 67, 69, 78, 88, 90, 92, 101, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 159, 160, 161, 206, 207, 208, 209, 210, 213, 218, 219, 220, 221, 223, 224, 225, 226, 227, 231, 324, 325, 340, 381, 394, 520, 521, 523, 524, 641, 643, 655, 753, 754, 755, 756, 806, 811, 812, 845, 846, 849, 852, 861], "39999998": [65, 139, 140, 641, 657, 765], "5999999": [65, 69, 92, 96, 139, 140, 309, 379, 388, 437, 641, 648, 671, 678], "0999999": [65, 82, 139, 140, 309, 319, 322, 365, 379, 384, 641, 776], "10000038": [65, 139, 140, 641], "90786433e": [65, 139, 140, 641], "310": [65, 139, 140, 641], "copy_arrai": [65, 88, 641], "to_ivy_arrai": [65, 88, 141, 641], "empty_lik": [65, 69, 88, 92, 276, 388, 440, 641, 644], "uniniti": [65, 142, 143, 641, 851], "from_dlpack": [65, 88, 641], "full_lik": [65, 88, 641, 861], "fill_valu": [65, 69, 79, 88, 92, 102, 147, 148, 264, 272, 390, 394, 504, 524, 641, 644, 656, 762, 845, 858, 861], "scalar": [65, 68, 69, 70, 74, 85, 88, 91, 92, 93, 97, 109, 124, 148, 153, 235, 256, 301, 307, 350, 351, 353, 358, 361, 363, 365, 370, 384, 387, 388, 389, 390, 435, 442, 464, 474, 475, 476, 485, 490, 612, 625, 641, 644, 646, 649, 706, 845, 855, 857, 867, 878], "fill": [65, 68, 69, 78, 79, 86, 88, 91, 92, 101, 102, 142, 147, 148, 150, 153, 154, 155, 160, 161, 286, 325, 381, 388, 390, 394, 446, 452, 457, 463, 485, 504, 505, 521, 523, 524, 641, 644, 655, 656, 754, 762, 806, 834, 858], "000123": [65, 148, 641], "stop": [65, 69, 71, 88, 92, 94, 138, 149, 150, 225, 388, 457, 463, 590, 628, 631, 633, 634, 635, 636, 641, 643, 646, 647, 652, 653, 730, 731, 732, 744, 811, 826, 852, 855, 863, 865, 867, 878], "num": [65, 88, 149, 150, 641, 791, 836, 852, 865], "endpoint": [65, 88, 149, 150, 641, 806, 852], "logspac": [65, 88, 641, 865], "sequenc": [65, 69, 73, 74, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 144, 146, 148, 150, 153, 155, 161, 165, 167, 180, 184, 185, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 328, 335, 336, 337, 338, 339, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 377, 378, 381, 384, 385, 386, 387, 388, 390, 394, 399, 400, 402, 403, 404, 411, 412, 413, 415, 416, 420, 421, 423, 430, 431, 432, 433, 434, 437, 445, 446, 447, 449, 455, 456, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 480, 481, 482, 483, 489, 491, 492, 494, 495, 497, 500, 502, 504, 505, 506, 508, 511, 512, 513, 515, 516, 517, 519, 521, 522, 534, 535, 536, 537, 544, 545, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 584, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 626, 629, 630, 631, 636, 641, 644, 646, 647, 648, 649, 651, 653, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 675, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 706, 708, 709, 710, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 728, 729, 733, 740, 750, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 807, 810, 812, 836, 844, 845, 846, 847, 849, 860, 861, 863, 865], "on_valu": [65, 88, 150, 153, 641], "off_valu": [65, 88, 150, 153, 641], "evenli": [65, 68, 69, 73, 76, 86, 88, 91, 92, 96, 99, 138, 149, 150, 304, 387, 430, 434, 641, 644, 648, 651, 661, 662, 663, 664, 666, 668, 670, 723], "hint": [65, 68, 69, 74, 91, 92, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 341, 347, 348, 350, 353, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 496, 504, 508, 534, 537, 564, 568, 570, 572, 603, 612, 636, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 834, 840, 848, 850, 852, 853, 856, 857, 861], "simplic": [65, 68, 69, 74, 91, 92, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 341, 347, 348, 350, 353, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 496, 504, 508, 534, 537, 564, 568, 570, 572, 603, 612, 636, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 848, 863], "nestabl": [65, 68, 69, 74, 91, 92, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 167, 183, 187, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 325, 340, 341, 347, 348, 350, 353, 381, 384, 387, 388, 390, 399, 406, 407, 408, 409, 411, 412, 413, 419, 424, 425, 426, 431, 433, 442, 496, 504, 508, 534, 537, 541, 550, 558, 559, 564, 568, 570, 572, 574, 588, 603, 607, 612, 636, 641, 642, 644, 646, 647, 648, 649, 651, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 670, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 752, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 834, 838, 847, 848, 856, 860, 869], "464": [65, 68, 101, 150, 239, 240, 644], "15888336": [65, 150], "2154": [65, 150], "43469003": [65, 150], "meshgrid": [65, 88, 641], "spars": [65, 69, 75, 88, 92, 98, 151, 328, 381, 388, 446, 457, 463, 641, 650, 710], "xy": [65, 88, 151, 641], "coordin": [65, 68, 79, 91, 92, 102, 151, 159, 240, 302, 332, 333, 340, 361, 381, 395, 525, 641, 644, 656, 762], "conserv": [65, 151, 641], "cartesian": [65, 151, 641], "matrix": [65, 69, 70, 73, 74, 92, 93, 96, 97, 109, 110, 112, 114, 151, 157, 158, 159, 340, 341, 381, 388, 390, 399, 438, 441, 442, 445, 446, 447, 449, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 494, 534, 546, 552, 641, 646, 648, 649, 672, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 707, 791, 793, 806, 807, 822, 826, 834, 845, 857, 878], "ij": [65, 82, 151, 641, 659, 774, 822], "rank": [65, 69, 74, 76, 83, 92, 97, 99, 106, 109, 110, 111, 112, 113, 118, 151, 335, 336, 337, 338, 339, 381, 388, 390, 399, 446, 447, 457, 460, 463, 496, 504, 508, 544, 641, 649, 651, 656, 660, 680, 682, 690, 692, 696, 698, 703, 705, 706, 716, 717, 725, 728, 729, 762, 782, 783, 829], "ni": [65, 151, 641], "xi": [65, 151, 641], "scatter": [65, 70, 88, 93, 153, 588, 589, 641, 646, 842, 856, 863], "unless": [65, 69, 74, 88, 92, 153, 285, 346, 363, 368, 384, 641, 644, 649, 692, 841, 846, 856, 867, 875, 876], "ones_lik": [65, 88, 641, 841, 865], "tril": [65, 88, 641], "whose": [65, 68, 69, 70, 74, 76, 80, 82, 88, 91, 92, 93, 97, 99, 103, 105, 110, 112, 114, 148, 157, 158, 234, 238, 241, 249, 250, 251, 290, 291, 297, 298, 302, 303, 304, 341, 355, 356, 360, 364, 365, 367, 371, 381, 388, 390, 441, 462, 495, 504, 510, 551, 607, 641, 644, 646, 649, 651, 657, 659, 679, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 706, 718, 722, 764, 765, 766, 773, 774, 793, 831, 848, 860], "innermost": [65, 69, 74, 97, 157, 158, 341, 381, 388, 441, 641, 649, 679, 681, 683, 684, 685, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 703], "mxn": [65, 69, 74, 97, 157, 158, 341, 381, 641, 649, 683, 690, 692, 693, 695, 696, 700, 703], "matric": [65, 69, 74, 92, 97, 109, 110, 114, 151, 157, 158, 341, 381, 388, 390, 441, 446, 447, 449, 455, 456, 461, 485, 641, 648, 649, 672, 679, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 703, 704, 793, 832, 850, 878], "diagon": [65, 69, 74, 92, 97, 110, 144, 157, 158, 159, 325, 340, 341, 381, 388, 390, 439, 442, 452, 458, 485, 641, 649, 682, 703], "triangular": [65, 69, 74, 97, 157, 158, 159, 340, 341, 381, 388, 458, 641, 649, 679, 685, 686, 692, 696], "triu": [65, 88, 641], "upper": [65, 69, 74, 78, 92, 97, 101, 144, 158, 159, 325, 341, 381, 388, 399, 458, 537, 641, 649, 655, 679, 685, 686, 696, 756, 845, 856, 860], "zeros_lik": [65, 69, 88, 164, 281, 390, 504, 627, 628, 631, 633, 634, 635, 641, 642, 644, 647, 649, 651, 696, 714, 857, 863], "data_typ": [66, 69, 89, 92, 194, 382, 642, 842, 845, 860, 861], "_arraywithdatatyp": [66, 114], "irrespect": [66, 74, 89, 97, 164, 642, 649, 699, 843, 856], "promot": [66, 68, 69, 74, 89, 91, 92, 97, 104, 114, 115, 164, 167, 190, 191, 192, 198, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 252, 255, 257, 259, 273, 274, 275, 276, 277, 282, 285, 290, 294, 297, 298, 299, 300, 301, 302, 303, 306, 358, 366, 371, 384, 387, 399, 431, 534, 597, 620, 642, 644, 646, 649, 651, 659, 679, 680, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 705, 706, 715, 725, 768, 776, 779, 791, 792, 837, 839, 848, 849, 853, 862, 872], "nan": [66, 68, 69, 70, 80, 82, 89, 91, 92, 93, 164, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 266, 267, 268, 273, 274, 275, 276, 277, 280, 285, 286, 288, 290, 291, 294, 295, 296, 297, 298, 299, 302, 303, 305, 312, 346, 347, 348, 359, 363, 368, 371, 379, 384, 390, 399, 504, 532, 533, 540, 541, 542, 543, 570, 625, 639, 642, 644, 646, 657, 659, 660, 764, 765, 766, 767, 775, 776, 777, 779, 780, 781, 782, 783, 791, 794, 839, 845, 848, 855, 861, 862], "infin": [66, 68, 70, 74, 89, 91, 97, 164, 232, 233, 234, 235, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 257, 258, 259, 266, 267, 273, 274, 275, 276, 277, 280, 285, 286, 288, 290, 294, 295, 297, 298, 299, 302, 303, 305, 347, 348, 371, 384, 570, 639, 642, 644, 646, 649, 659, 660, 697, 706, 775, 777, 782, 783, 839, 848], "desir": [66, 67, 69, 79, 82, 86, 89, 90, 92, 102, 105, 109, 164, 166, 167, 226, 331, 372, 381, 384, 390, 399, 494, 540, 543, 544, 642, 643, 649, 656, 659, 701, 761, 776, 806, 807, 836, 841, 844, 845, 846, 857, 866, 874, 878], "broadcast_arrai": [66, 89, 642], "mix": [66, 68, 89, 91, 92, 93, 98, 101, 114, 115, 165, 178, 179, 192, 211, 212, 242, 245, 246, 247, 252, 253, 259, 263, 271, 272, 282, 285, 288, 294, 389, 399, 470, 541, 560, 562, 563, 564, 565, 574, 609, 612, 642, 643, 644, 646, 648, 649, 650, 651, 654, 659, 662, 664, 667, 669, 670, 672, 678, 679, 701, 708, 710, 714, 752, 774, 776, 779, 792, 794, 834, 838, 845, 846, 847, 856, 863, 866, 869, 878], "broadcast_to": [66, 89, 642, 845], "can_cast": [66, 89, 642, 845, 853, 857], "accord": [66, 69, 70, 76, 82, 89, 99, 105, 167, 177, 235, 246, 252, 259, 285, 296, 331, 381, 387, 390, 432, 496, 564, 567, 588, 589, 642, 644, 646, 649, 651, 659, 705, 716, 729, 779, 781, 786, 793, 813, 821, 834, 835, 839, 845, 851, 853, 857, 860], "finfo": [66, 89, 642, 860], "resolut": [66, 89, 177, 642, 836], "4028235e": [66, 177, 642], "iinfo": [66, 89, 642], "integ": [66, 68, 69, 73, 74, 76, 78, 82, 83, 86, 91, 92, 93, 96, 97, 99, 101, 105, 106, 114, 115, 138, 147, 180, 181, 187, 191, 192, 196, 232, 242, 243, 244, 245, 246, 247, 248, 258, 259, 270, 282, 287, 290, 294, 295, 305, 306, 342, 343, 344, 347, 348, 352, 357, 358, 381, 384, 387, 390, 394, 397, 399, 415, 420, 430, 433, 434, 435, 482, 491, 496, 504, 508, 511, 520, 521, 522, 523, 524, 526, 527, 532, 534, 535, 536, 541, 544, 567, 583, 593, 626, 641, 642, 644, 646, 648, 649, 651, 655, 658, 659, 660, 661, 662, 663, 664, 666, 668, 670, 680, 682, 691, 705, 706, 723, 753, 754, 755, 756, 757, 758, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 799, 807, 822, 836, 843, 845, 855, 858, 860, 865], "119": [66, 180], "1220": [66, 180], "int16": [66, 69, 78, 82, 89, 101, 167, 171, 173, 178, 180, 187, 202, 399, 535, 536, 642, 659, 754, 772, 773, 778, 780, 791, 792, 845, 857, 860, 865], "32768": [66, 89, 180, 605, 646], "32767": [66, 89, 180], "is_bool_dtyp": [66, 89, 642], "is_float_dtyp": [66, 89, 642, 861], "is_int_dtyp": [66, 89, 642, 858, 861], "is_uint_dtyp": [66, 89, 642, 858, 861], "result_typ": [66, 89, 642, 845], "arrays_and_dtyp": [66, 89, 192, 642], "_arraywithdevic": [67, 114], "move": [67, 69, 90, 92, 159, 222, 226, 230, 340, 381, 390, 495, 641, 643, 809, 836, 846, 861], "addit": [67, 69, 70, 77, 90, 92, 93, 100, 135, 137, 226, 235, 295, 389, 393, 399, 464, 518, 533, 538, 557, 558, 559, 626, 640, 643, 644, 646, 648, 652, 654, 675, 732, 752, 807, 822, 834, 835, 836, 841, 845, 847, 848, 851, 853, 855, 856, 857, 860, 861, 863, 866, 874, 878, 879], "__dlpack__": [67, 90, 145, 226, 641, 643], "caveat": [67, 90, 226, 389, 468, 643], "portabl": [67, 90, 226, 643, 828], "_arraywithelementwis": [68, 114], "ab": [68, 74, 84, 91, 107, 114, 115, 290, 346, 363, 384, 390, 503, 644, 649, 653, 690, 700, 706, 741, 744, 788, 821, 822, 828, 832, 840, 845, 850, 854, 857, 860], "absolut": [68, 69, 74, 84, 86, 91, 92, 97, 114, 232, 296, 346, 363, 366, 372, 384, 388, 389, 442, 459, 465, 467, 644, 649, 690, 691, 692, 697, 786, 788, 791, 793, 794, 829, 835], "aco": [68, 91, 644], "invers": [68, 69, 74, 91, 92, 97, 233, 234, 237, 238, 239, 240, 241, 356, 384, 387, 397, 410, 419, 421, 431, 526, 644, 649, 688, 691, 695, 813, 845], "cosin": [68, 91, 233, 234, 249, 250, 324, 327, 381, 387, 409, 419, 644, 807], "acosh": [68, 91, 178, 179, 642, 644, 832, 850], "area": [68, 69, 91, 92, 96, 234, 238, 241, 387, 423, 430, 434, 644, 831, 856, 863], "hyperbol": [68, 91, 234, 238, 241, 250, 298, 302, 303, 316, 320, 379, 644], "sector": [68, 91, 234, 238, 241, 644], "multipli": [68, 69, 73, 82, 91, 92, 96, 109, 235, 301, 364, 387, 388, 423, 454, 455, 535, 536, 644, 648, 659, 671, 772, 778, 836, 840, 841, 843, 847], "angl": [68, 91, 240, 250, 298, 303, 362, 384, 644], "deg": [68, 91, 236, 644], "radian": [68, 69, 91, 92, 233, 236, 237, 239, 240, 249, 251, 291, 297, 302, 371, 384, 644, 848], "degre": [68, 69, 82, 91, 92, 105, 236, 251, 291, 334, 381, 390, 502, 644, 659, 779, 781, 880], "1j": [68, 91, 92, 236, 237, 249, 250, 255, 257, 269, 292, 297, 298, 302, 350, 604, 644, 646], "2j": [68, 69, 91, 92, 236, 265, 350, 387, 415, 420, 605, 644, 646], "3j": [68, 69, 91, 92, 236, 269, 292, 350, 384, 644], "35619449": [68, 236, 644], "78539816": [68, 236, 644], "135": [68, 236, 552, 644, 646], "asin": [68, 91, 644], "sine": [68, 91, 237, 238, 297, 298, 644], "927": [68, 91, 237], "asinh": [68, 91, 237, 644], "atan": [68, 91, 644], "tangent": [68, 91, 239, 240, 241, 302, 303, 316, 320, 377, 379, 386, 644, 848], "785": [68, 91, 239, 240, 644], "atan2": [68, 91, 644], "quotient": [68, 91, 240, 252, 259, 644], "588": [68, 240, 644], "inf": [68, 69, 70, 74, 91, 92, 93, 97, 240, 257, 266, 267, 268, 269, 273, 274, 276, 286, 312, 356, 366, 379, 384, 388, 399, 438, 537, 570, 625, 639, 644, 646, 648, 649, 676, 690, 706, 791, 794, 832, 845, 850, 855], "719": [68, 240, 644], "atanh": [68, 91, 644], "549": [68, 91, 96, 241, 644, 648, 672], "bitwise_and": [68, 91, 644], "bitwise_invert": [68, 91, 644], "bitiwse_invert": [68, 243], "bitwise_left_shift": [68, 91, 644], "bitwise_or": [68, 91, 644], "bitwise_right_shift": [68, 91, 114, 644], "bitwise_xor": [68, 91, 114, 644], "ceil": [68, 69, 91, 92, 109, 112, 138, 387, 406, 407, 408, 424, 425, 426, 429, 641, 644, 807, 856], "416": [68, 249, 644], "540": [68, 249], "990": [68, 249], "cosh": [68, 91, 249, 644], "deg2rad": [68, 91, 644], "180": [68, 91, 251, 291, 644], "270": [68, 91, 251, 291, 644], "360": [68, 91, 251, 291, 644, 844], "dividend": [68, 91, 252, 259, 294, 306, 644], "divisor": [68, 69, 71, 82, 91, 92, 94, 105, 252, 259, 262, 263, 294, 306, 387, 390, 406, 407, 408, 482, 491, 511, 627, 628, 633, 644, 647, 659, 779, 781, 807, 811], "375": [68, 253, 288], "erf": [68, 91, 355, 384, 644], "exponenti": [68, 69, 91, 92, 254, 255, 257, 277, 290, 307, 317, 379, 388, 453, 644], "gauss": [68, 91, 254, 644], "328": [68, 254, 302, 644], "677": [68, 254], "842": [68, 254, 302, 644], "71828198": [68, 91, 255], "38905573": [68, 91, 255], "08553696": [68, 91, 255, 644], "exp2": [68, 91, 644], "expm1": [68, 91, 644, 845], "918": [68, 257], "147": [68, 257, 644], "floor": [68, 69, 91, 92, 109, 112, 246, 259, 387, 406, 407, 408, 410, 424, 425, 426, 429, 644, 807, 856], "floor_divid": [68, 91, 644, 799, 845], "fmin": [68, 91, 644, 845], "gcd": [68, 91, 644, 845], "greater": [68, 69, 73, 76, 78, 91, 92, 96, 101, 114, 115, 146, 233, 234, 237, 238, 240, 241, 244, 246, 252, 258, 259, 273, 275, 290, 294, 296, 298, 299, 303, 304, 305, 349, 384, 387, 410, 415, 420, 431, 641, 644, 648, 649, 651, 655, 678, 680, 691, 724, 756, 793, 807, 836, 837, 858, 871], "greater_equ": [68, 91, 114, 115, 277, 644], "isfinit": [68, 91, 644, 857], "out_i": [68, 91, 266, 267, 268, 269, 292, 644], "self_i": [68, 91, 266, 267, 268, 269, 292], "finit": [68, 91, 232, 233, 234, 235, 238, 240, 241, 250, 252, 253, 255, 257, 259, 266, 267, 273, 275, 285, 286, 288, 290, 294, 298, 299, 303, 644], "isinf": [68, 91, 644], "detect_posit": [68, 91, 267, 644], "detect_neg": [68, 91, 267, 644], "isnan": [68, 91, 644], "isreal": [68, 91, 644], "5j": [68, 91, 92, 269, 292, 350, 384, 644], "6j": [68, 69, 91, 265, 269, 350, 644], "lcm": [68, 91, 644, 845], "less": [68, 69, 74, 78, 82, 91, 92, 97, 101, 114, 115, 233, 234, 237, 240, 241, 248, 252, 259, 273, 274, 275, 276, 290, 294, 296, 299, 370, 384, 387, 388, 399, 409, 410, 419, 431, 457, 463, 534, 537, 644, 649, 655, 659, 690, 691, 692, 695, 706, 756, 779, 781, 807, 835, 836, 843, 845, 847, 849, 852, 857, 860, 863, 864, 865, 878], "less_equ": [68, 91, 114, 115, 644, 849], "log10": [68, 69, 91, 331, 381, 644], "logarithm": [68, 91, 255, 273, 274, 275, 276, 277, 354, 366, 384, 644, 649, 697], "602": [68, 274, 644], "699": [68, 274, 644], "log1p": [68, 91, 644, 855], "693": [68, 91, 129, 238, 275, 638, 644], "0953": [68, 91, 273, 275, 644], "log2": [68, 91, 278, 644], "logaddexp": [68, 91, 644], "logaddexp2": [68, 91, 644, 832, 850], "169925": [68, 91, 278, 644], "logical_and": [68, 91, 644, 857, 863], "logical_not": [68, 91, 644, 845], "logical_or": [68, 91, 644], "conform": [68, 74, 91, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 167, 177, 180, 192, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 347, 348, 350, 384, 387, 390, 399, 431, 504, 508, 534, 641, 642, 644, 649, 651, 656, 657, 658, 659, 660, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 715, 717, 718, 719, 721, 722, 724, 725, 729, 759, 760, 762, 763, 764, 765, 766, 767, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 848, 851], "api_specif": [68, 69, 91, 92, 167, 255, 265, 266, 281, 347, 348, 384, 387, 390, 431, 504, 642, 644, 651, 659, 729, 779, 848], "array_api": [68, 91, 167, 255, 265, 266, 281, 387, 390, 431, 504, 642, 644, 649, 651, 659, 697, 698, 729, 779, 848], "logical_xor": [68, 91, 644], "use_wher": [68, 91, 283, 284, 644], "formula": [68, 69, 91, 252, 274, 276, 283, 284, 285, 331, 365, 381, 384, 393, 513, 515, 644, 826], "exce": [68, 69, 92, 284, 390, 506, 644], "product": [68, 69, 73, 74, 82, 91, 92, 96, 97, 105, 109, 110, 112, 285, 377, 378, 386, 388, 390, 399, 437, 440, 444, 447, 448, 449, 454, 455, 456, 508, 535, 536, 543, 644, 648, 649, 659, 675, 678, 680, 687, 689, 694, 701, 705, 772, 773, 774, 778, 779, 822, 834, 865, 871, 872, 878], "nan_to_num": [68, 91, 644], "posinf": [68, 91, 286, 644], "neginf": [68, 91, 286, 644], "5e": [68, 71, 91, 92, 286, 369, 633, 644, 647], "not_equ": [68, 91, 114, 115, 644], "pow": [68, 91, 114, 115, 644, 839], "expon": [68, 69, 70, 92, 93, 290, 358, 360, 364, 384, 393, 518, 605, 644, 646, 649, 691], "rad2deg": [68, 91, 644], "286": [68, 92, 291], "458": [68, 291], "573": [68, 291, 644], "reciproc": [68, 91, 644], "333": [68, 91, 252, 293, 644], "remaind": [68, 69, 76, 86, 91, 92, 99, 261, 644, 651, 723, 839, 856], "modulu": [68, 91, 294, 644, 856], "x2_i": [68, 91, 235, 240, 242, 244, 245, 246, 247, 252, 253, 259, 263, 264, 271, 272, 277, 279, 281, 282, 285, 288, 290, 294, 301, 644, 839], "678": [68, 295, 296], "np_variant": [68, 91, 296, 644], "841": [68, 85, 91, 122, 297, 638, 644], "909": [68, 91, 93, 297, 644], "141": [68, 91, 164, 297, 642, 644], "sinh": [68, 91, 297, 644], "232": [68, 91, 298, 644], "sqrt": [68, 69, 91, 92, 387, 410, 415, 416, 420, 421, 431, 644, 806, 807, 828], "squar": [68, 69, 74, 91, 92, 97, 299, 388, 389, 393, 399, 441, 453, 465, 518, 534, 629, 630, 632, 637, 644, 647, 649, 653, 679, 681, 682, 684, 685, 686, 688, 691, 697, 698, 699, 704, 739, 828], "tanh": [68, 69, 91, 92, 302, 316, 320, 379, 644, 803, 865], "762": [68, 91, 303, 644], "964": [68, 91, 303, 644], "trapz": [68, 91, 644], "dx": [68, 91, 304, 644], "apart": [68, 91, 304, 644], "trapezoid": [68, 91, 304, 644], "trunc": [68, 91, 644], "025": [68, 305, 389, 470, 644, 652, 732], "trunc_divid": [68, 91, 644], "_arraywithactivationsexperiment": [69, 114], "celu": [69, 92, 379], "formul": [69, 85, 92, 110, 122, 307, 309, 379, 803], "elu": [69, 92, 311, 379, 803], "scaler": [69, 92, 308, 379, 791, 794, 860], "hardshrink": [69, 92, 379], "lambd": [69, 92, 309, 319, 379], "hardsilu": [69, 92, 379], "66666667": [69, 131, 310, 399, 534, 638], "hardtanh": [69, 92, 379], "max_val": [69, 92, 311, 379], "min_val": [69, 92, 311, 379], "region": [69, 92, 311, 319, 379, 835], "19722438": [69, 92, 312, 379], "38629448": [69, 92, 312, 379], "38629436": [69, 92, 312, 379], "logsigmoid": [69, 92, 379, 803], "31326175": [69, 85, 313, 379], "126928": [69, 92, 313], "01814993": [69, 313], "00004578": [69, 313], "57888985": [69, 313], "31326169": [69, 92, 313, 379], "69314718": [69, 74, 85, 92, 97, 313, 366, 379, 384, 649, 697], "01104775": [69, 313], "prelu": [69, 92, 379, 803], "unidirect": [69, 314, 379, 648, 673], "relu6": [69, 92, 379, 803], "rectifi": [69, 85, 92, 124, 126, 127, 315, 318, 323, 379, 638], "scaled_tanh": [69, 92, 320, 379], "7159": [69, 92, 316, 320, 379], "amplitud": [69, 92, 316, 320, 379], "65537548": [69, 92, 316], "49570239": [69, 92, 316], "77637792": [69, 316], "selu": [69, 92, 379, 803], "11133075": [69, 317, 379], "05070102": [69, 92, 317, 379], "10140204": [69, 317, 379], "15210295": [69, 317, 379], "20280409": [69, 317, 379], "25350523": [69, 317, 379], "30420589": [69, 317, 379], "35490704": [69, 317, 379], "silu": [69, 92, 379, 803], "26894143": [69, 318], "73105854": [69, 92, 318], "softshrink": [69, 92, 379], "bound": [69, 92, 319, 331, 379, 381, 390, 479, 504, 505, 791, 845, 849, 857, 860, 865], "tanhshrink": [69, 92, 379], "23840582": [69, 92, 321, 379], "condit": [69, 79, 92, 102, 135, 322, 337, 338, 381, 388, 438, 640, 653, 656, 743, 744, 763, 793, 839, 845, 847, 849, 853, 854, 856, 860, 874], "met": [69, 92, 322, 849], "hreshold": [69, 322], "thresholded_relu": [69, 92, 379], "_arraywithconversionsexperiment": [69, 114], "_arraywithcreationexperiment": [69, 114], "blackman_window": [69, 92, 381], "period": [69, 92, 298, 302, 324, 326, 327, 329, 330, 381, 387, 422, 644, 836], "window": [69, 73, 92, 96, 324, 326, 327, 329, 330, 345, 381, 387, 393, 406, 407, 408, 410, 424, 425, 426, 427, 429, 430, 434, 435, 518, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 807, 830, 836, 842, 850], "symmetr": [69, 74, 92, 97, 109, 110, 324, 326, 327, 329, 330, 381, 388, 390, 441, 496, 649, 679, 684, 685, 686, 707, 843], "38777878e": [69, 92, 324, 381], "40000000e": [69, 324, 381], "00000000e": [69, 74, 92, 93, 324, 355, 356, 381, 387, 409, 415, 419, 420, 649, 696, 832, 850], "30000000e": [69, 92, 324, 381], "eye_lik": [69, 92, 381], "elsewher": [69, 92, 144, 325, 381, 641, 656, 763, 835], "mel_weight_matrix": [69, 92, 381], "num_mel_bin": [69, 92, 331, 381], "dft_length": [69, 92, 331, 381, 387, 410], "sample_r": [69, 92, 331, 381], "lower_edge_hertz": [69, 92, 331, 381], "upper_edge_hertz": [69, 92, 331, 381], "3000": [69, 92, 331, 381], "melweightmatrix": [69, 92, 331, 381], "linearli": [69, 70, 93, 331, 381, 561, 646, 649, 698], "frequenc": [69, 70, 92, 93, 331, 381, 399, 534, 561, 646, 836], "spectra": [69, 331, 381], "dft": [69, 92, 331, 381, 387], "stft": [69, 92, 331, 381, 387], "mel": [69, 92, 331, 381], "hertz": [69, 331, 381], "2595": [69, 331, 381], "700": [69, 93, 331, 381, 565], "band": [69, 70, 92, 93, 331, 381, 561, 646], "spectrum": [69, 92, 331, 381], "n_fft": [69, 92, 331, 381, 387, 410], "8000": [69, 92, 326, 331, 381], "75694758": [69, 331, 381], "trilu": [69, 92, 381], "retain": [69, 159, 340, 341, 381, 629, 641, 647, 855, 859, 869], "unsorted_segment_mean": [69, 92, 381], "segment_id": [69, 92, 342, 343, 344, 381, 813], "num_seg": [69, 92, 342, 343, 344, 381, 813], "segment": [69, 92, 342, 343, 344, 381, 842, 847], "th": [69, 92, 110, 342, 343, 344, 353, 381, 384, 388, 389, 399, 439, 446, 464, 544], "unsorted_segment_min": [69, 92, 381], "unsorted_segment_sum": [69, 92, 381], "polyv": [69, 92, 381], "coeff": [69, 92, 334, 381], "polynomi": [69, 92, 334, 381], "coeffici": [69, 92, 326, 334, 381, 388, 458, 649, 698, 811], "indetermin": [69, 92, 334, 381], "simplifi": [69, 92, 334, 381, 821, 822, 849, 857, 865, 874, 878, 880], "substitut": [69, 92, 334, 381], "_arraywithdata_typeexperiment": [69, 114], "_arraywithdeviceexperiment": [69, 114], "_arraywithelementwiseexperiment": [69, 114], "equal_nan": [69, 92, 346, 363, 384], "1e10": [69, 346, 363, 384], "00001e10": [69, 346, 363, 384], "00001e": [69, 346, 384], "amax": [69, 92, 384], "keepdim": [69, 74, 76, 79, 82, 83, 86, 92, 97, 99, 102, 105, 106, 347, 348, 352, 368, 375, 384, 385, 390, 399, 501, 539, 540, 541, 542, 543, 544, 649, 651, 656, 659, 660, 690, 706, 728, 759, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 849, 857, 865], "singleton": [69, 74, 79, 82, 83, 92, 97, 102, 105, 106, 347, 348, 384, 649, 651, 656, 659, 660, 706, 717, 724, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 865], "amin": [69, 92, 384], "binar": [69, 92, 384], "conj": [69, 92, 250, 255, 257, 298, 299, 303, 384, 644], "conjug": [69, 74, 92, 97, 350, 384, 387, 388, 394, 410, 436, 442, 454, 456, 458, 522, 649, 689, 693, 701], "copysign": [69, 92, 384], "unsign": [69, 82, 92, 351, 384, 390, 399, 504, 535, 536, 659, 772, 773, 778, 780, 792, 845, 865], "count_nonzero": [69, 92, 384], "diff": [69, 86, 92, 384, 847, 856], "prepend": [69, 92, 353, 384, 649, 651, 689, 717, 835], "differenc": [69, 92, 353, 384], "prior": [69, 92, 353, 384, 394, 522, 649, 701, 849, 861], "expand": [69, 70, 76, 92, 93, 353, 384, 390, 508, 561, 646, 651, 717, 843, 859], "discret": [69, 92, 353, 384, 387, 409, 410, 415, 416, 419, 420, 421, 431, 432, 650, 709, 807], "digamma": [69, 92, 384], "7549271": [69, 354, 384], "92278427": [69, 92, 354, 384], "9988394": [69, 354, 384], "erfc": [69, 92, 384], "complementari": [69, 92, 345, 355, 381, 384], "84270084e": [69, 355, 356], "80259693e": [69, 355, 356], "erfinv": [69, 92, 384], "float_pow": [69, 92, 384], "fmax": [69, 92, 384], "fmod": [69, 92, 644], "divis": [69, 70, 71, 92, 93, 94, 246, 252, 259, 261, 294, 296, 306, 390, 482, 595, 604, 618, 627, 628, 633, 644, 646, 647, 648, 661, 668, 669, 811, 853, 862, 871], "frexp": [69, 92, 384], "edge_ord": [69, 92, 361, 384], "boundari": [69, 78, 92, 101, 112, 337, 338, 361, 381, 384, 387, 423, 655, 756, 878], "33333333": [69, 92, 293, 361, 384, 464, 644], "hypot": [69, 92, 384], "hypotenus": [69, 362, 384], "4031": [69, 362, 384], "8102": [69, 362, 384], "isclos": [69, 92, 384, 839], "ldexp": [69, 92, 384], "lerp": [69, 92, 384], "lgamma": [69, 92, 384], "45373654": [69, 366, 384], "6477685": [69, 366, 384], "modf": [69, 92, 384], "fraction": [69, 92, 367, 384, 399, 544, 648, 671], "nansum": [69, 92, 384], "accumul": [69, 92, 368, 384, 390, 501], "nextaft": [69, 92, 384], "0e": [69, 71, 92, 94, 369, 384, 633, 647], "4013e": [69, 92, 369, 384], "4028e": [69, 92, 369, 384], "signbit": [69, 92, 384], "637": [69, 92, 371, 384], "0909": [69, 92, 371, 384], "sparsify_tensor": [69, 92, 384], "sparsifi": [69, 92, 372, 384], "arang": [69, 74, 82, 92, 97, 149, 372, 384, 387, 388, 406, 407, 408, 415, 420, 424, 425, 426, 429, 438, 455, 488, 584, 626, 641, 646, 649, 652, 659, 690, 706, 731, 732, 774, 828, 845, 856], "xlogi": [69, 92, 384], "0986": [69, 92, 373, 384], "3863": [69, 92, 373, 384], "0000": [69, 92, 326, 327, 330, 356, 373, 381, 384, 388, 390, 453, 490], "zeta": [69, 92, 384], "0369": [69, 92, 374, 384], "_arraywithgeneralexperiment": [69, 114], "init_valu": [69, 92, 96, 375, 385, 387, 430], "reduct": [69, 70, 75, 83, 86, 92, 93, 96, 98, 106, 375, 385, 387, 389, 390, 430, 464, 465, 466, 467, 468, 469, 470, 471, 501, 558, 588, 589, 646, 650, 660, 708, 709, 710, 782, 783, 808, 845, 853, 856, 860], "_arraywithgradientsexperiment": [69, 114], "_arraywithimageexperiment": [69, 114], "_arraywithlayersexperiment": [69, 114], "adaptive_avg_pool1d": [69, 92, 387], "1d": [69, 92, 109, 110, 387, 388, 390, 399, 401, 409, 411, 413, 419, 454, 474, 479, 501, 505, 534, 791, 807], "adapt": [69, 92, 94, 387, 401, 402, 403, 404, 634, 647, 807, 811], "plane": [69, 92, 252, 255, 257, 285, 297, 298, 299, 302, 387, 390, 401, 402, 403, 404, 502, 644], "l_in": [69, 92, 387, 401], "spatial": [69, 73, 92, 96, 387, 393, 401, 402, 403, 404, 423, 430, 434, 513, 514, 515, 518, 648, 661, 662, 663, 664, 666, 668, 670, 810], "Will": [69, 92, 387, 401, 402, 403, 404, 816, 867], "l_out": [69, 92, 387, 401], "nhwc": [69, 73, 92, 96, 387, 393, 402, 407, 412, 425, 429, 518, 648, 661, 664, 665, 668, 669, 670, 807], "3d": [69, 74, 92, 387, 402, 404, 411, 412, 476, 649, 687, 807, 863], "4d": [69, 92, 387, 388, 393, 402, 412, 413, 462, 518, 650, 711], "s_0": [69, 92, 387, 402, 403], "s_1": [69, 92, 387, 402, 403], "adaptive_max_pool2d": [69, 92, 387], "h_in": [69, 92, 387, 403, 404], "w_in": [69, 92, 387, 403, 404], "adaptive_max_pool3d": [69, 92, 387], "avg_pool1d": [69, 92, 387], "nwc": [69, 73, 92, 96, 387, 406, 411, 424, 427, 648, 661, 662, 663, 668, 669, 807], "count_include_pad": [69, 92, 387, 406, 407, 408, 807], "d_in": [69, 73, 92, 96, 387, 404, 406, 407, 408, 410, 415, 416, 420, 424, 425, 426, 427, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670], "algorithm": [69, 73, 85, 92, 96, 122, 387, 388, 406, 407, 408, 423, 424, 425, 426, 427, 457, 459, 463, 649, 662, 664, 665, 666, 667, 670, 697, 803, 807, 822, 845, 857, 863, 867, 878], "ncw": [69, 73, 92, 96, 387, 406, 411, 412, 424, 427, 648, 661, 662, 663, 668, 669, 807], "avg_pool2d": [69, 92, 387], "divisor_overrid": [69, 92, 387, 406, 407, 408, 807], "avg_pool3d": [69, 92, 387], "ndhwc": [69, 73, 92, 96, 387, 408, 413, 426, 648, 661, 666, 667, 668, 669, 807], "volum": [69, 73, 92, 96, 387, 408, 410, 415, 416, 420, 426, 648, 666, 667], "ncdhw": [69, 73, 92, 96, 387, 408, 413, 426, 648, 661, 666, 667, 668, 669, 807], "dct": [69, 92, 387, 807], "truncat": [69, 92, 387, 388, 409, 415, 419, 420, 421, 432, 461, 591, 646, 807, 849], "larger": [69, 76, 82, 92, 99, 105, 177, 387, 409, 416, 419, 421, 432, 642, 651, 659, 714, 722, 779, 781, 807, 860, 863], "ortho": [69, 92, 387, 409, 410, 415, 416, 419, 420, 421, 431, 432, 807], "onesid": [69, 92, 387, 410], "fft": [69, 92, 387, 410, 416, 431, 432, 435, 807, 834, 878], "symmetri": [69, 387, 410], "rfft": [69, 92, 387, 410, 432], "invok": [69, 387, 410, 828, 851, 874, 875], "batch_idx": [69, 387, 410], "signal_dim1": [69, 387, 410], "signal_dim2": [69, 387, 410], "signal_dimn": [69, 387, 410], "signal_dim": [69, 387, 410], "embed": [69, 92, 387, 389, 464, 648, 675, 793, 807, 878], "max_norm": [69, 70, 92, 93, 387, 414, 552, 553, 646, 807], "ifft": [69, 92, 387, 415, 421, 807], "pi": [69, 92, 298, 302, 387, 389, 415, 420, 469, 639, 644], "44509285e": [69, 92, 387, 415], "14423775e": [69, 92, 387, 415], "17j": [69, 92, 387, 415, 420], "11483250e": [69, 92, 387, 415], "16j": [69, 92, 387, 415, 420], "33486982e": [69, 92, 387, 415], "22464680e": [69, 92, 387, 415], "95799250e": [69, 92, 387, 415], "66951701e": [69, 92, 387, 415], "fft2": [69, 387], "20477401j": [69, 387, 416], "0614962j": [69, 387, 416], "idct": [69, 92, 387, 807], "49862671": [69, 92, 387, 409, 419], "37691498": [69, 92, 387, 409, 419], "00390816": [69, 92, 387, 409, 419], "58938599": [69, 92, 387, 409, 419], "92713165": [69, 92, 387, 409, 419], "078475": [69, 92, 387, 409, 419], "19664812": [69, 92, 387, 409, 419], "95411837": [69, 92, 387, 409, 419], "30636606e": [69, 92, 387, 420], "43029718e": [69, 92, 387, 420], "18j": [69, 92, 387, 415, 420], "53080850e": [69, 92, 387, 420], "58689626e": [69, 92, 387, 420], "24474906e": [69, 92, 387, 420], "91858728e": [69, 92, 387, 420], "01435406e": [69, 92, 387, 420], "ifftn": [69, 92, 387], "24730653": [69, 92, 387, 421], "90832391j": [69, 92, 387, 421], "49495562": [69, 92, 387, 421], "9039565j": [69, 92, 387, 421], "98193269": [69, 92, 387, 421], "49560517j": [69, 92, 387, 421], "93280757": [69, 92, 387, 421], "48075343j": [69, 92, 387, 421], "28526384": [69, 92, 387, 421], "3351205j": [69, 92, 387, 421], "2343787": [69, 92, 387, 421], "83528011j": [69, 92, 387, 421], "18791352": [69, 92, 387, 421], "30690572j": [69, 92, 387, 421], "82115787": [69, 92, 387, 421], "96195183j": [69, 92, 387, 421], "44719226": [69, 92, 387, 421], "72654048j": [69, 92, 387, 421], "51476765": [69, 387, 421], "66160417j": [69, 387, 421], "04319742": [69, 387, 421], "05411636j": [69, 387, 421], "015561": [69, 387, 421], "04216015j": [69, 387, 421], "06310689": [69, 387, 421], "05347854j": [69, 387, 421], "13392983": [69, 387, 421], "16052352j": [69, 387, 421], "08371392": [69, 387, 421], "17252843j": [69, 387, 421], "0031429": [69, 387, 421], "05421245j": [69, 387, 421], "10446617": [69, 387, 421], "17747098j": [69, 387, 421], "05344324": [69, 387, 421], "07972424j": [69, 387, 421], "8344667": [69, 92, 387, 421], "98222595j": [69, 92, 387, 421], "48472244": [69, 92, 387, 421], "30233797j": [69, 92, 387, 421], "recompute_scale_factor": [69, 92, 387, 423, 863], "antialia": [69, 92, 387, 423, 863], "height": [69, 70, 73, 92, 93, 96, 387, 423, 557, 646, 648, 650, 664, 665, 666, 667, 670, 711, 837], "width": [69, 70, 73, 92, 93, 96, 387, 388, 390, 393, 399, 423, 442, 496, 518, 537, 557, 646, 648, 650, 662, 663, 664, 665, 666, 667, 670, 675, 711], "trilinear": [69, 92, 387, 423, 863], "nearest_exact": [69, 92, 387, 423, 863], "tf_area": [69, 92, 387, 423, 863], "mitchellcub": [69, 92, 387, 423, 863], "lanczos3": [69, 92, 387, 423, 863], "lanczos5": [69, 92, 387, 423, 863], "gaussian": [69, 92, 122, 387, 423, 638, 863], "overwrit": [69, 86, 92, 225, 387, 423, 643, 836, 856, 857, 865], "thu": [69, 92, 246, 259, 294, 302, 303, 387, 388, 423, 441, 644, 649, 684, 685, 834, 844, 849, 854, 857, 861, 880], "antialias": [69, 92, 423], "max_pool1d": [69, 92, 387], "dilaton": [69, 92, 424, 425, 426], "max_pool3d": [69, 92, 387], "max_unpool1d": [69, 92, 387], "unpool": [69, 92, 387, 427], "reduce_window": [69, 96, 387], "window_dimens": [69, 96, 387, 430], "window_strid": [69, 96, 387, 430], "base_dil": [69, 96, 387, 430], "window_dil": [69, 96, 387, 430], "trim": [69, 86, 92, 387, 390, 431, 507], "orthonorm": [69, 74, 92, 97, 387, 431, 649, 696, 699], "8660254j": [69, 92, 387, 431], "rfftn": [69, 92, 387], "sliding_window": [69, 92, 387], "window_s": [69, 92, 387, 434], "frame_length": [69, 92, 387, 435], "frame_step": [69, 92, 387, 435], "fft_length": [69, 92, 387, 435], "window_fn": [69, 92, 387, 435], "pad_end": [69, 92, 387, 435], "smallest": [69, 86, 92, 177, 180, 248, 387, 390, 435, 506, 642, 644, 649, 690, 791, 793, 794], "enclos": [69, 92, 387, 435, 879], "window_length": [69, 92, 324, 326, 329, 330, 345, 381, 387, 435], "li": [69, 92, 387, 388, 399, 435, 442, 544], "past": [69, 92, 387, 435, 836, 839, 858, 860, 878], "fft_unique_bin": [69, 92, 387, 435], "complex64": [69, 89, 92, 170, 184, 193, 199, 265, 292, 387, 431, 435, 642, 644, 649, 697, 699, 700, 792, 845, 850], "complex128": [69, 92, 93, 170, 171, 184, 193, 199, 387, 435, 583, 642, 646, 649, 685, 686, 690, 706, 791, 792, 832, 845, 850], "compon": [69, 92, 154, 155, 233, 234, 235, 238, 241, 250, 252, 253, 255, 257, 285, 287, 288, 295, 298, 299, 302, 303, 335, 339, 350, 381, 384, 387, 388, 393, 435, 446, 457, 518, 641, 644, 656, 762, 859, 865, 872, 879], "linear_algebra": [69, 74, 92, 97, 388, 649, 861], "_arraywithlinearalgebraexperiment": [69, 114], "adjoint": [69, 74, 92, 97, 388, 458, 649, 688, 698, 699, 791], "batched_out": [69, 92, 388], "j1": [69, 92, 388, 437], "jn": [69, 92, 388, 437], "k1": [69, 92, 388, 437], "km": [69, 92, 388, 437], "outer": [69, 74, 92, 97, 109, 388, 437, 649, 652, 730, 731, 732, 822, 834], "30000001": [69, 92, 388, 437, 557, 646, 657, 765], "40000001": [69, 73, 85, 92, 114, 115, 124, 127, 308, 379, 388, 437, 638, 648, 657, 678, 765], "60000002": [69, 92, 105, 115, 388, 393, 437, 517, 519, 553, 646, 776], "80000001": [69, 92, 388, 393, 437, 517, 519], "60000001": [69, 92, 388, 437], "90000004": [69, 92, 388, 437, 659, 776], "20000002": [69, 92, 388, 437, 553, 646], "20000005": [69, 71, 92, 308, 316, 319, 320, 379, 388, 437, 627], "00000012": [69, 92, 388, 437], "49999994": [69, 92, 388, 437], "00000006": [69, 92, 388, 437], "60000014": [69, 92, 388, 437], "19999993": [69, 92, 388, 437], "80000007": [69, 92, 388, 437, 553, 646], "20000017": [69, 92, 388, 437], "89999992": [69, 92, 388, 437], "60000008": [69, 92, 388, 437], "80000019": [69, 92, 365, 384, 388, 437], "4000001": [69, 92, 96, 388, 437, 648, 671, 678], "cond": [69, 92, 135, 388, 640, 867], "933034373659268": [69, 438], "diagflat": [69, 92, 388, 448, 453], "offset": [69, 74, 77, 88, 92, 97, 100, 146, 388, 393, 439, 513, 514, 515, 641, 649, 654, 683, 703, 752, 798], "padding_valu": [69, 92, 388, 439], "right_left": [69, 92, 388, 439], "num_row": [69, 92, 388, 439], "num_col": [69, 92, 388, 439], "dot": [69, 73, 92, 96, 109, 388, 389, 455, 464, 648, 649, 675, 678, 705, 822, 835, 844], "eig": [69, 74, 92, 388, 649, 685, 686], "37228132": [69, 92, 388, 441, 443, 684], "82456484": [69, 441, 684], "41597356": [69, 441, 684], "56576746": [69, 441, 684], "90937671": [69, 441, 684], "eigh_tridiagon": [69, 92, 388], "eigvals_onli": [69, 92, 388, 442], "select_rang": [69, 92, 388, 442], "tol": [69, 92, 113, 388, 442, 457, 463], "eigenvalu": [69, 74, 92, 97, 109, 110, 388, 441, 442, 443, 649, 684, 685, 686, 692], "eigenvector": [69, 92, 388, 441, 442, 649, 684, 685], "interv": [69, 78, 83, 92, 101, 106, 138, 149, 150, 157, 388, 399, 442, 537, 641, 649, 651, 655, 660, 680, 705, 714, 717, 725, 754, 756, 782, 783], "converg": [69, 92, 388, 442], "_2": [69, 92, 388, 442], "eig_val": [69, 92, 388, 442], "decreas": [69, 92, 388, 442, 793], "eig_vector": [69, 92, 388, 442], "38196": [69, 442], "61803": [69, 442], "eigval": [69, 92, 388], "general_inner_product": [69, 97, 388], "n_mode": [69, 97, 388, 444], "tradit": [69, 97, 388, 444], "inner": [69, 74, 88, 97, 118, 153, 388, 441, 444, 641, 649, 652, 684, 685, 689, 730, 731, 732, 822, 834, 856], "higher_order_mo": [69, 92, 388], "n_featur": [69, 92, 388, 445], "d1": [69, 92, 388, 445], "dn": [69, 92, 388, 445], "initialize_tuck": [69, 92, 388], "svd": [69, 74, 92, 97, 112, 388, 446, 452, 457, 459, 460, 461, 463, 649, 700], "truncated_svd": [69, 92, 388, 446, 457, 460, 463], "non_neg": [69, 92, 339, 381, 388, 446], "mask": [69, 73, 92, 96, 109, 387, 388, 390, 433, 446, 447, 457, 463, 503, 567, 646, 648, 671, 675, 678, 863], "svd_mask_repeat": [69, 92, 388, 446, 457, 463], "tuckertensor": [69, 92, 113, 339, 381, 388, 446, 457, 463], "scheme": [69, 92, 388, 446, 457, 839, 878], "tucker": [69, 92, 339, 381, 388, 446, 457], "decomposit": [69, 74, 92, 97, 109, 110, 112, 335, 336, 337, 338, 339, 381, 388, 446, 450, 457, 460, 462, 463, 649, 679, 685, 696, 699, 834], "miss": [69, 92, 388, 390, 446, 457, 463, 503, 811, 834, 835, 840, 843, 844, 847, 857, 860, 863], "everywher": [69, 92, 388, 446, 457, 463], "kron": [69, 92, 388, 453], "make_svd_non_neg": [69, 92, 388, 461], "nntype": [69, 92, 388, 452], "nndsvd": [69, 92, 388, 452], "singular": [69, 74, 92, 97, 388, 446, 452, 459, 461, 649, 690, 692, 695, 699, 700, 791, 793, 845], "nndsvda": [69, 92, 388, 452], "boutsidi": [69, 92, 388, 452], "gallopoulo": [69, 92, 388, 452], "recognit": [69, 92, 388, 452, 831], "1350": [69, 92, 388, 452], "1362": [69, 92, 388, 452], "2008": [69, 92, 388, 452, 878], "matrix_exp": [69, 92, 388], "7183": [69, 92, 388, 453], "3891": [69, 92, 388, 453], "mode_dot": [69, 92, 108, 109, 113, 388], "matrix_or_vector": [69, 92, 109, 113, 388, 454], "i_1": [69, 92, 109, 110, 388, 454], "i_k": [69, 92, 109, 388, 454], "i_n": [69, 92, 109, 388, 454], "i_": [69, 92, 109, 388, 399, 454, 537], "multi_dot": [69, 92, 388], "148": [69, 91, 92, 255, 388, 455], "multi_mode_dot": [69, 92, 388], "mat_or_vec_list": [69, 92, 388, 456], "times_0": [69, 388, 456], "vec": [69, 388, 456], "times_1": [69, 388, 456], "cdot": [69, 285, 388, 456, 644], "times_n": [69, 388, 456], "partial_tuck": [69, 92, 388], "n_iter_max": [69, 92, 388, 457, 463], "verbos": [69, 92, 388, 457, 460, 463, 826, 860, 865], "return_error": [69, 92, 388, 457, 463], "variat": [69, 92, 388, 457, 463, 847, 857, 860], "reconstruct": [69, 74, 80, 92, 103, 112, 388, 390, 457, 463, 510, 649, 657, 699, 764, 766, 858], "return_erro": [69, 388, 457, 463], "svd_flip": [69, 92, 388], "u_based_decis": [69, 92, 388, 459], "basi": [69, 92, 388, 459, 836, 839], "flip": [69, 76, 92, 99, 109, 243, 388, 390, 459, 487, 488, 644, 651, 856, 865], "decis": [69, 92, 388, 459, 828, 839, 845, 863, 865, 878], "u_adjust": [69, 92, 388, 459], "v_adjust": [69, 92, 388, 459], "tensor_train": [69, 92, 388], "tt": [69, 92, 338, 381, 388, 460, 462], "kth": [69, 388, 460], "tttensor": [69, 112, 338, 381, 388, 460], "compute_uv": [69, 74, 92, 97, 388, 461, 649, 699], "n_eigenvec": [69, 92, 388, 461], "returnedv": [69, 461], "vh": [69, 74, 92, 97, 388, 461, 649, 699], "eigen": [69, 92, 388, 461], "namedtupl": [69, 74, 80, 92, 97, 103, 388, 390, 441, 461, 510, 649, 657, 684, 685, 696, 697, 699, 764, 765, 766], "tt_matrix_to_tensor": [69, 92, 388], "rank_k": [69, 92, 388, 462], "left_dim_k": [69, 92, 388, 462], "right_dim_k": [69, 92, 388, 462], "rank_": [69, 92, 388, 462], "49671414": [69, 92, 388, 462, 655, 755], "1382643": [69, 92, 388, 462, 655, 755], "64768857": [69, 92, 388, 462, 655, 755], "5230298": [69, 92, 388, 462, 655, 755], "23415337": [69, 92, 388, 462, 655, 755], "23413695": [69, 92, 388, 462, 655, 755], "57921278": [69, 92, 388, 462], "76743472": [69, 92, 388, 462], "1163073": [69, 92, 388, 462], "11629914": [69, 92, 388, 462], "03237505": [69, 92, 388, 462], "03237278": [69, 92, 388, 462], "78441733": [69, 92, 388, 462], "38119566": [69, 92, 388, 462], "21834874": [69, 92, 388, 462], "10610882": [69, 92, 388, 462], "15165846": [69, 92, 388, 462], "15164782": [69, 92, 388, 462], "35662258": [69, 92, 388, 462], "35659757": [69, 92, 388, 462], "02283812": [69, 92, 388, 462], "49705869": [69, 92, 388, 462], "40518808": [69, 92, 388, 462], "16882598": [69, 92, 388, 462], "fixed_factor": [69, 92, 388, 463], "tl": [69, 92, 388, 463], "kolda": [69, 92, 388, 463], "bader": [69, 92, 388, 463], "siam": [69, 92, 388, 460, 463], "vol": [69, 92, 388, 463], "pp": [69, 92, 388, 463], "455": [69, 92, 388, 463], "2009": [69, 92, 388, 463], "_arraywithlossesexperiment": [69, 114], "hinge_embedding_loss": [69, 92, 389], "margin": [69, 92, 389, 464, 471, 857], "measur": [69, 389, 464, 648, 650, 675, 711, 807], "semi": [69, 389, 464], "l_n": [69, 389, 464], "x_n": [69, 389, 464], "y_n": [69, 389, 464], "ell": [69, 389, 464], "operatornam": [69, 296, 298, 389, 464, 644, 649, 685], "l_1": [69, 389, 464], "hyperparamet": [69, 92, 389, 464], "aggreg": [69, 92, 389, 464, 657, 764, 844], "unreduc": [69, 92, 389, 464], "hing": [69, 92, 389, 464, 471], "target_tensor": [69, 389, 464, 469], "huber_loss": [69, 92, 389], "transit": [69, 92, 389, 465, 878], "huber": [69, 92, 389, 465], "kl_div": [69, 92, 389], "log_target": [69, 92, 389, 466], "contai": [69, 466], "batchmean": [69, 389, 466], "kullback": [69, 92, 389, 466], "leibler": [69, 92, 389, 466], "0916": [69, 466], "l1_loss": [69, 92, 389, 468], "l1": [69, 74, 92, 97, 389, 393, 465, 467, 468, 470, 516, 649, 706, 843], "targetict": [69, 92, 389, 467, 468, 470, 471], "20000000000000004": [69, 467], "log_poisson_loss": [69, 92, 389], "compute_full_loss": [69, 92, 389, 468, 808], "favor": [69, 92, 389, 468], "likelihood": [69, 92, 389, 468, 469], "28402555": [69, 389, 468], "03402555": [69, 389, 468], "1573164": [69, 389, 468], "poisson_nll_loss": [69, 92, 389], "log_input": [69, 92, 389, 469], "poisson": [69, 92, 389, 394, 468, 469], "assumpt": [69, 389, 468, 469], "minu": [69, 389, 468, 469], "omiss": [69, 389, 469], "stirl": [69, 92, 389, 468, 469], "1977562": [69, 469], "smooth_l1_loss": [69, 92, 389], "smooth": [69, 75, 92, 98, 389, 465, 470, 650, 708, 709, 710, 855], "8125": [69, 470], "soft_margin_loss": [69, 92, 389], "soft": [69, 92, 319, 389, 390, 471, 503, 846], "35667497": [69, 471], "22314353": [69, 471], "60943791": [69, 471], "_arraywithmanipulationexperiment": [69, 114], "as_strid": [69, 92, 390], "nativeshap": [69, 73, 76, 78, 92, 99, 101, 139, 140, 142, 147, 154, 160, 390, 394, 472, 484, 489, 497, 500, 520, 521, 522, 523, 524, 589, 602, 608, 610, 641, 646, 648, 651, 655, 661, 663, 665, 667, 669, 721, 754, 755, 756, 852, 854], "byte": [69, 70, 88, 92, 93, 114, 146, 390, 472, 583, 641, 646], "associative_scan": [69, 92, 390], "revers": [69, 70, 74, 82, 92, 97, 105, 114, 115, 378, 386, 387, 388, 390, 399, 433, 449, 473, 487, 488, 535, 536, 556, 646, 649, 651, 659, 704, 718, 772, 773, 834, 843, 844, 845, 847, 848, 856, 857, 863, 865, 867], "scan": [69, 92, 390, 473, 867], "atleast_1d": [69, 92, 390], "ari": [69, 92, 390, 474, 475, 476, 482, 491, 511], "a1": [69, 93, 390, 474, 475, 476, 480, 549], "a2": [69, 93, 390, 474, 475, 476, 480, 549], "atleast_2d": [69, 92, 390], "atleast_3d": [69, 92, 390], "column_stack": [69, 92, 390], "concat_from_sequ": [69, 92, 390], "input_sequ": [69, 92, 390, 481], "new_axi": [69, 92, 390, 481, 865], "dsplit": [69, 92, 390], "indices_or_sect": [69, 92, 390, 482, 491, 511], "3rd": [69, 92, 390, 482], "dstack": [69, 92, 390], "fill_diagon": [69, 92, 390], "fill_diag": [69, 485], "fortran": [69, 76, 92, 99, 390, 486, 651, 721, 878], "layout": [69, 76, 92, 99, 390, 486, 651, 721, 841, 856, 857, 863], "fliplr": [69, 92, 390, 856], "diag": [69, 74, 92, 97, 110, 390, 487, 488, 649, 685, 866], "flipud": [69, 92, 390, 856], "fold": [69, 92, 390, 497, 498, 844], "unfold": [69, 92, 109, 110, 112, 388, 390, 446, 489, 497, 499], "folded_tensor": [69, 390, 489], "heavisid": [69, 92, 390], "5000": [69, 390, 490, 649, 688, 822], "hsplit": [69, 92, 390], "horizont": [69, 92, 390, 480, 491, 557, 646], "hstack": [69, 92, 390, 480], "i0": [69, 92, 390, 399, 537], "bessel": [69, 82, 92, 105, 329, 381, 390, 493, 659, 779, 781], "kind": [69, 82, 92, 177, 180, 181, 399, 493, 535, 536, 541, 642, 659, 772, 773, 778, 780, 791, 792, 833, 857, 860, 863, 865, 867], "26606588": [69, 92, 390, 493], "2795853": [69, 92, 390, 493], "88079259": [69, 92, 390, 493], "row_mod": [69, 92, 390, 494], "column_mod": [69, 92, 390, 494], "ascend": [69, 81, 92, 104, 390, 397, 494, 527, 658, 768, 770, 837], "prod": [69, 70, 82, 93, 105, 388, 390, 447, 449, 494, 543, 558, 646, 659, 791, 822, 845, 847, 865], "moveaxi": [69, 92, 390], "destin": [69, 92, 390, 495], "unstack": [69, 76, 86, 99, 495, 651, 843, 865], "reorder": [69, 76, 92, 99, 390, 495, 557, 646, 651, 718, 859], "stat_length": [69, 92, 390, 496], "constant_valu": [69, 92, 390, 496], "end_valu": [69, 92, 390, 496], "reflect_typ": [69, 92, 390, 496], "partial_fold": [69, 92, 390], "skip_begin": [69, 92, 390, 497, 498, 499, 500], "untouch": [69, 92, 390, 497, 498, 499, 500], "partial_tensor_to_vec": [69, 92, 390], "skip_end": [69, 92, 390, 498, 499], "vectoris": [69, 92, 109, 390, 498, 500], "partial_unfold": [69, 92, 390], "ravel_tensor": [69, 92, 390, 499], "n_1": [69, 92, 390, 499], "n_2": [69, 92, 390, 499], "n_i": [69, 92, 388, 390, 447, 499], "partial_vec_to_tensor": [69, 92, 390], "put_along_axi": [69, 92, 390], "rot90": [69, 92, 390, 856], "rotat": [69, 92, 390, 502], "soft_threshold": [69, 92, 390], "behav": [69, 92, 347, 348, 384, 388, 390, 441, 504, 649, 684, 839, 849, 854, 856, 857, 858, 879], "slice": [69, 82, 86, 92, 93, 105, 110, 159, 340, 381, 390, 479, 501, 504, 505, 564, 565, 567, 593, 641, 646, 653, 659, 742, 777, 860, 878], "inexact": [69, 92, 358, 384, 390, 504], "largest": [69, 86, 92, 177, 180, 388, 390, 459, 504, 506, 642, 649, 690, 699], "take_along_axi": [69, 92, 390], "arr": [69, 70, 89, 92, 185, 390, 479, 501, 505, 589, 642, 845, 846], "top_k": [69, 92, 390], "sort": [69, 80, 86, 92, 103, 115, 211, 304, 388, 390, 399, 441, 506, 527, 541, 643, 644, 649, 657, 684, 685, 699, 700, 764, 768, 769, 770, 793, 833, 844, 859, 861], "trim_zero": [69, 92, 390], "fb": [69, 92, 390, 507], "front": [69, 92, 390, 507, 857, 865, 878], "unflatten": [69, 92, 390], "unfolded_tensor": [69, 390, 509], "unique_consecut": [69, 92, 390], "vsplit": [69, 92, 390], "vertic": [69, 92, 390, 511, 512, 557, 646, 836], "_arraywithnormsexperiment": [69, 114], "varianc": [69, 82, 92, 105, 393, 513, 515, 659, 781, 806, 810], "nsc": [69, 92, 393, 513, 514, 515, 810], "braodcast": [69, 92, 393, 513], "running_mean": [69, 92, 393, 513, 515, 810], "running_var": [69, 92, 393, 513, 515, 810], "nc": [69, 92, 393, 513, 514, 515, 810], "group_norm": [69, 92, 393], "num_group": [69, 92, 393, 514], "instance_norm": [69, 92, 393], "l1_normal": [69, 92, 393], "33333334": [69, 92, 310, 379, 393, 516, 519, 553, 629, 646, 647, 648, 649, 670, 706], "33333337": [69, 149, 393, 516, 629, 641, 647], "28571439": [69, 393, 516], "l2_normal": [69, 92, 393, 519], "l2": [69, 74, 97, 108, 109, 393, 517, 519, 649, 706, 807, 843], "44721359": [69, 92, 393, 517, 519], "89442718": [69, 92, 393, 517, 519, 553, 646], "lp_normal": [69, 92, 393], "lp": [69, 393, 519], "_arraywithrandomexperiment": [69, 114], "bernoulli": [69, 92, 387, 394, 411, 412, 413], "event": [69, 92, 394, 520, 860], "parameter": [69, 78, 92, 101, 394, 520, 521, 523, 524, 655, 753, 755, 756], "odd": [69, 92, 290, 390, 394, 496, 520, 644, 822, 833, 839], "drawn": [69, 78, 92, 101, 394, 520, 521, 522, 523, 524, 655, 753, 754, 755, 756, 791, 792, 793, 806, 860], "dirichlet": [69, 92, 394], "10598304": [69, 394, 522], "21537054": [69, 394, 522], "67864642": [69, 394, 522], "48006698": [69, 394, 522], "07472073": [69, 394, 522], "44521229": [69, 394, 522], "55479872": [69, 394, 522], "05426367": [69, 394, 522], "39093761": [69, 394, 522], "19531053": [69, 394, 522], "51675832": [69, 394, 522], "28793114": [69, 394, 522], "12315625": [69, 394, 522], "29823365": [69, 394, 522], "5786101": [69, 394, 522], "15564976": [69, 394, 522], "50542368": [69, 394, 522], "33892656": [69, 394, 522], "1325352": [69, 394, 522], "44439589": [69, 394, 522], "42306891": [69, 394, 522], "gamma": [69, 77, 92, 100, 354, 366, 384, 394, 399, 538, 654, 752], "lam": [69, 92, 394, 524], "_arraywithsearchingexperiment": [69, 114], "unravel_index": [69, 92, 395], "unravel": [69, 92, 395, 525], "_arraywithsetexperiment": [69, 114], "_arraywithsortingexperiment": [69, 114], "lexsort": [69, 92, 397], "indirectli": [69, 92, 397, 527], "statist": [69, 92, 107, 390, 496, 810, 826, 834, 845, 860, 861, 878], "_arraywithstatisticalexperiment": [69, 114], "bincount": [69, 92, 399], "minlength": [69, 92, 399, 532], "corrcoef": [69, 92, 399], "rowvar": [69, 92, 399, 533, 534], "relationship": [69, 92, 533, 806, 859], "cov": [69, 92, 399], "ddof": [69, 92, 399, 534], "fweight": [69, 92, 399, 534], "aweight": [69, 92, 399, 534], "overridden": [69, 92, 399, 534, 811, 840], "assign": [69, 92, 109, 399, 534, 834, 836, 841, 845, 856, 859], "covari": [69, 92, 399, 534], "cummax": [69, 92, 399], "exclus": [69, 70, 82, 86, 92, 93, 105, 138, 388, 399, 457, 535, 536, 576, 577, 580, 641, 646, 655, 659, 754, 772, 773, 831, 843, 845, 853, 865], "cumul": [69, 82, 92, 105, 399, 535, 536, 659, 772, 773], "uint64": [69, 82, 174, 179, 181, 182, 192, 194, 197, 399, 535, 536, 642, 659, 772, 773, 778, 780, 791, 792, 845, 860, 865], "uint16": [69, 82, 169, 174, 179, 180, 189, 399, 535, 536, 642, 659, 772, 773, 778, 780, 791, 792, 845, 857, 860, 865], "uint32": [69, 82, 174, 179, 180, 181, 203, 399, 535, 536, 642, 659, 772, 773, 778, 780, 791, 792, 845, 860, 865], "cummin": [69, 92, 399], "histogram": [69, 92, 399], "extend_lower_interv": [69, 92, 399, 537], "extend_upper_interv": [69, 92, 399, 537], "densiti": [69, 92, 399, 537], "monoton": [69, 92, 399, 537], "rightmost": [69, 92, 399, 537], "c1": [69, 92, 399, 537, 843], "ff": [69, 92, 399, 537], "c_": [69, 92, 110, 399, 537], "igamma": [69, 92, 399], "incomplet": [69, 92, 399, 538, 836], "3614": [69, 92, 399, 538], "2085": [69, 92, 399, 538], "median": [69, 92, 390, 399, 496, 541], "nanmean": [69, 92, 399], "6666666666666665": [69, 92, 399, 540], "nanmedian": [69, 92, 399], "overwrite_input": [69, 92, 399, 541], "treat": [69, 86, 92, 115, 290, 368, 384, 390, 393, 399, 505, 518, 541, 543, 644, 788, 855, 860], "undefin": [69, 92, 390, 399, 400, 496, 541, 545, 845, 849, 855], "nanmin": [69, 92, 399], "nanprod": [69, 92, 399], "Not": [69, 92, 368, 384, 388, 399, 443, 543, 639, 841, 849, 858, 867], "quantil": [69, 92, 399], "inclus": [69, 92, 138, 399, 544, 641, 655, 754, 829, 841, 856, 863], "midpoint": [69, 92, 399, 544], "surround": [69, 92, 399, 544, 863], "whichev": [69, 92, 399, 544], "_arraywithutilityexperiment": [69, 114], "optional_get_el": [69, 92, 400], "empti": [69, 70, 82, 86, 93, 105, 138, 390, 400, 496, 545, 552, 589, 641, 646, 649, 653, 659, 660, 703, 706, 747, 777, 778, 780, 782, 783, 834, 835, 840, 842, 845, 846, 856], "_arraywithgener": [70, 114], "all_equ": [70, 93, 646], "equality_matrix": [70, 93, 546, 646], "array_equ": [70, 93, 646], "assert_supports_inplac": [70, 93, 646], "ivybackendexcept": [70, 93, 550, 574, 646, 823, 840, 846, 849, 850], "clip_matrix_norm": [70, 93, 646], "894": [70, 93, 552, 553, 646, 654, 752], "clip_vector_norm": [70, 93, 646], "default_v": [70, 556, 646], "catch_except": [70, 556, 646], "rev": [70, 556, 646], "with_cal": [70, 556, 646], "catch": [70, 556, 646, 854, 860], "einops_rearrang": [70, 93, 646], "axes_length": [70, 93, 557, 558, 559, 646], "arrang": [70, 557, 646], "rearrang": [70, 93, 557, 559, 646, 859], "einops_reduc": [70, 93, 646, 845], "einops_repeat": [70, 93, 646], "fourier_encod": [70, 93, 646], "max_freq": [70, 93, 561, 646], "oppos": [70, 93, 561, 646, 845], "geometr": [70, 93, 561, 646, 649, 704], "0000000e": [70, 93, 561, 646], "2246468e": [70, 93, 561, 646], "4492936e": [70, 561, 646], "6739404e": [70, 93, 561, 646], "batch_dim": [70, 93, 564, 565, 646, 813], "gather_nd": [70, 93, 646], "get_num_dim": [70, 93, 646], "as_arrai": [70, 93, 568, 602, 646, 813], "has_nan": [70, 93, 646], "include_inf": [70, 93, 570, 625, 646], "inplace_decr": [70, 93, 646], "decrement": [70, 93, 572, 646], "inplace_incr": [70, 93, 646], "increment": [70, 93, 573, 646, 836, 878], "inplace_upd": [70, 93, 592, 646, 804, 856], "ensure_in_backend": [70, 93, 574, 646, 819, 856], "keep_input_dtyp": [70, 93, 574, 646, 819, 856], "is_arrai": [70, 93, 646, 856, 857], "is_ivy_arrai": [70, 93, 646, 856], "is_ivy_contain": [70, 646], "is_native_arrai": [70, 93, 188, 577, 642, 646], "isin": [70, 93, 646], "test_el": [70, 93, 581, 646], "assume_uniqu": [70, 93, 581, 646], "invert": [70, 93, 243, 581, 644, 646, 649, 691], "scatter_flat": [70, 93, 646], "occupi": [70, 177, 180, 588, 589, 642, 646], "scatter_nd": [70, 93, 646, 863], "stable_divid": [70, 93, 646, 853], "denomin": [70, 77, 93, 100, 595, 604, 618, 646, 654, 752, 810, 853, 862, 867], "min_denomin": [70, 93, 595, 604, 618, 646, 862], "_min_denomin": [70, 604, 646], "stable_pow": [70, 93, 646], "min_bas": [70, 93, 594, 605, 617, 646, 810, 862], "stabl": [70, 81, 93, 104, 159, 340, 347, 348, 381, 384, 397, 527, 594, 595, 604, 605, 617, 618, 641, 646, 658, 768, 771, 793, 835, 841, 845, 857, 862, 865, 867], "00004": [70, 93, 605, 646], "00008": [70, 93, 605, 646], "00004000e": [70, 605], "56002560e": [70, 605], "60001200e": [70, 605], "09602048e": [70, 605], "supports_inplace_upd": [70, 93, 646], "to_fil": 70, "fid": 70, "sep": 70, "format_": 70, "recov": [70, 849, 857], "to_scalar": [70, 93, 646], "value_is_nan": [70, 93, 646], "_arraywithgradi": [71, 114], "adam_step": [71, 94, 647], "mw": [71, 94, 627, 628, 647], "vw": [71, 94, 627, 628, 647], "beta1": [71, 94, 548, 627, 628, 633, 646, 647, 811], "beta2": [71, 94, 548, 627, 628, 633, 646, 647, 811], "epsilon": [71, 74, 75, 94, 97, 98, 548, 627, 628, 633, 646, 647, 649, 650, 692, 695, 708, 709, 710, 803, 808, 810, 811, 843, 853, 856], "dc": [71, 94, 627, 628, 631, 633, 634, 635, 647], "dw": [71, 94, 627, 628, 631, 633, 634, 635, 647], "forget": [71, 94, 627, 628, 633, 647, 811, 828, 845], "dcdw": [71, 94, 627, 628, 631, 633, 634, 647], "adam_step_delta": [71, 94, 627, 647], "2020105": [71, 627, 647], "22187898": [71, 627, 647], "24144873": [71, 627, 647], "10000002": [71, 105, 308, 379, 627, 776], "00300002": [71, 627], "00800002": [71, 627], "adam_upd": [71, 94, 647], "mw_tm1": [71, 94, 628, 633, 647], "vw_tm1": [71, 94, 628, 633, 647], "ws_new": [71, 94, 628, 633, 634, 635, 647], "updated_weight": [71, 94, 628, 647], "92558753": [71, 628], "92558873": [71, 628, 647], "92558718": [71, 628, 647], "00000063e": [71, 94, 628, 647], "00000016e": [71, 94, 628, 647], "00000086e": [71, 94, 628, 647], "gradient_descent_upd": [71, 94, 647, 652, 730, 731, 732], "descent": [71, 94, 631, 647, 811, 878], "new_weight": [71, 94, 631, 633, 634, 647], "lamb_upd": [71, 94, 647], "max_trust_ratio": [71, 94, 633, 647, 811], "decay_lambda": [71, 94, 633, 634, 647, 811], "trust": [71, 94, 633, 647, 811], "ratio": [71, 94, 633, 647, 811], "decai": [71, 94, 633, 634, 647, 811], "lamb": [71, 94, 633, 647, 811], "784": [71, 633, 647], "lars_upd": [71, 94, 647], "lar": [71, 94, 634, 647, 811], "34077978": [71, 634, 647], "78025991": [71, 634, 647], "56051969": [71, 634, 647], "78026009": [71, 634, 647], "56051981": [71, 634, 647], "12103939": [71, 634, 647], "optimizer_upd": [71, 94, 647], "effective_grad": [71, 94, 635, 647], "3e": [71, 94, 635, 647], "preserve_typ": [71, 94, 636, 647], "_arraywithimag": [72, 114], "_arraywithlay": [73, 114], "conv1d": [73, 96, 648, 807, 819], "filter_format": [73, 96, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669], "channel_last": [73, 96, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669, 791], "x_dilat": [73, 96, 648, 661, 662, 664, 665, 666, 668], "d_out": [73, 96, 387, 404, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669], "channel_first": [73, 96, 648, 661, 662, 663, 664, 665, 666, 667, 668, 669], "wio": [73, 648, 661, 662, 663, 668], "conv1d_transpos": [73, 96, 648], "output_shap": [73, 96, 648, 661, 663, 665, 667, 669, 807], "iow": [73, 96, 648, 663], "woi": [73, 96, 648, 663], "fh": [73, 96, 648, 653, 661, 664, 665, 666, 667, 668, 669, 670, 745], "hwio": [73, 648, 661, 662, 664, 668], "conv2d_transpos": [73, 96, 648], "iohw": [73, 96, 648, 665], "hwoi": [73, 96, 648, 665], "conv3d": [73, 96, 648, 667, 807, 819], "conv3d_transpos": [73, 96, 648, 669], "iodhw": [73, 96, 648, 667, 669], "dhwoi": [73, 96, 648, 667, 669], "depthwise_conv2d": [73, 96, 648], "randint": [73, 78, 80, 96, 101, 655, 657, 670, 674, 764, 845, 874], "noise_shap": [73, 96, 648, 671], "42857146": [73, 648, 671], "85714293": [73, 648, 671], "28571415": [73, 96, 648, 671], "71428585": [73, 96, 648, 671], "14285755": [73, 96, 648, 671], "5714283": [73, 648, 671], "4285717": [73, 96, 648, 671], "8571434": [73, 96, 648, 671], "2857151": [73, 648, 671], "dropout1d": [73, 96, 387, 412], "dropout2d": [73, 96, 387], "dropout3d": [73, 96, 387], "outer_batch_shap": [73, 96, 648, 672], "inner_batch_shap": [73, 96, 648, 672], "lstm_updat": [73, 96, 648, 865], "init_h": [73, 96, 648, 674, 865], "init_c": [73, 96, 648, 674, 865], "recurrent_kernel": [73, 96, 648, 674, 865], "recurrent_bia": [73, 96, 648, 674, 865], "hidden": [73, 96, 648, 673, 674, 807, 842, 849, 865], "recurr": [73, 92, 96, 387, 433, 648, 674, 865, 878], "timestep": [73, 92, 96, 387, 433, 648, 673, 674, 675, 807, 865], "h_i": [73, 96, 674], "c_i": [73, 96, 674], "rc": [73, 96, 674], "multi_head_attent": [73, 96, 648, 856], "num_head": [73, 96, 648, 675, 807], "in_proj_weight": [73, 96, 648, 675], "q_proj_weight": [73, 96, 648, 675], "k_proj_weight": [73, 96, 648, 675], "v_proj_weight": [73, 96, 648, 675], "out_proj_weight": [73, 96, 648, 675], "in_proj_bia": [73, 96, 648, 675], "out_proj_bia": [73, 96, 648, 675], "is_caus": [73, 96, 648, 675, 678], "key_padding_mask": [73, 96, 648, 675], "bias_k": [73, 96, 648, 675], "bias_v": [73, 96, 648, 675], "static_k": [73, 96, 648, 675], "static_v": [73, 96, 648, 675], "add_zero_attn": [73, 96, 648, 675], "return_attention_weight": [73, 96, 648, 675], "average_attention_weight": [73, 96, 648, 675], "scaled_dot_product_attent": [73, 96, 648], "dropout_p": [73, 96, 648, 678], "num_queri": [73, 96, 648, 678], "feat_dim": [73, 96, 648, 678], "num_kei": [73, 96, 648, 678], "causal": [73, 96, 648, 675, 678], "attent": [73, 96, 648, 675, 678, 807, 836, 840], "29999995": [73, 308, 309, 319, 379, 387, 431, 648, 657, 678, 765], "19994521": [73, 648, 678], "09994531": [73, 648, 678], "30000019": [73, 390, 480, 648, 678], "_arraywithlinearalgebra": [74, 114], "choleski": [74, 97, 649, 856], "625": [74, 92, 360, 649, 679], "vif": [74, 97, 680], "det": [74, 97, 649, 697, 844], "axis1": [74, 76, 97, 99, 649, 651, 683, 703, 726], "axis2": [74, 97, 649, 683, 703], "eigh": [74, 97, 388, 441, 649, 684], "uplo": [74, 97, 649, 685, 686], "eigvalsh": [74, 97, 649], "array_lik": [74, 97, 387, 389, 390, 432, 465, 466, 470, 471, 501, 649, 687, 694, 822], "203": [74, 91, 241, 649, 654, 687, 752], "233": [74, 649, 687], "inv": [74, 97, 649], "transpose_a": [74, 97, 649, 689], "transpose_b": [74, 97, 649, 689], "adjoint_a": [74, 97, 649, 689], "adjoint_b": [74, 97, 649, 689], "matrix_norm": [74, 97, 649], "ord": [74, 97, 649, 690, 706], "fro": [74, 97, 389, 465, 649, 690], "nuc": [74, 97, 649, 690], "performingth": [74, 690], "matrix_pow": [74, 97, 649], "matrix_rank": [74, 97, 649], "hermitian": [74, 97, 388, 441, 442, 649, 684, 685, 686, 692, 699], "largest_singular_valu": [74, 97, 649, 692, 695], "defici": [74, 649, 692], "matrix_transpos": [74, 97, 649], "pinv": [74, 97, 649], "pseudo": [74, 97, 649, 695, 855], "99999988": [74, 97, 649, 695], "qr": [74, 97, 649, 858], "12309149": [74, 649, 696], "90453403": [74, 649, 696], "40824829": [74, 649, 696], "49236596": [74, 649, 696], "30151134": [74, 649, 696], "81649658": [74, 649, 696], "86164044": [74, 649, 696], "12403841e": [74, 649, 696], "60113630e": [74, 649, 696], "10782342e": [74, 649, 696], "04534034e": [74, 649, 696], "80906807e": [74, 649, 696], "88178420e": [74, 97, 649, 686, 696], "slogdet": [74, 97, 649], "logabsdet": [74, 97, 649, 697], "natur": [74, 97, 255, 273, 274, 275, 276, 295, 366, 384, 644, 649, 697, 840, 847, 849, 858], "098611": [74, 649, 697], "full_matric": [74, 97, 649, 699], "svf": [74, 699], "reconstructed_x": [74, 649, 699], "svdval": [74, 97, 649], "tensorsolv": [74, 97, 649], "vander": [74, 97, 649], "vandermond": [74, 97, 649, 704], "vecdot": [74, 97, 649], "vector_norm": [74, 97, 649], "manhattan": [74, 97, 649, 706], "euclidean": [74, 97, 109, 110, 649, 706], "7416575": [74, 97, 649, 706], "vector_to_skew_symmetric_matrix": [74, 97, 649], "_arraywithloss": [75, 114], "binary_cross_entropi": [75, 98, 650, 844], "pos_weight": [75, 98, 650, 708], "crossentropi": [75, 98, 650, 708], "26765382": [75, 650, 708], "34657359": [75, 650, 709], "sparse_cross_entropi": [75, 98, 650], "07438118": [75, 98, 710], "11889165": [75, 710], "_arraywithmanipul": [76, 114], "x_min": [76, 99, 651, 714, 865], "x_max": [76, 99, 651, 714, 865], "before_1": [76, 99, 390, 496, 651, 716, 729], "after_1": [76, 99, 390, 496, 651, 716, 729], "before_n": [76, 99, 390, 496, 651, 716, 729], "after_n": [76, 99, 390, 496, 651, 716, 729], "repetit": [76, 99, 651, 720, 727, 863], "flat": [76, 86, 99, 395, 525, 588, 646, 651, 720], "allowzero": [76, 99, 651, 721], "remain": [76, 79, 92, 99, 102, 235, 252, 253, 259, 267, 268, 285, 288, 294, 296, 387, 411, 412, 413, 432, 644, 651, 653, 656, 721, 739, 762, 822, 835, 836, 844, 847, 849, 853, 861, 863, 867], "roll": [76, 99, 651, 852], "shift": [76, 88, 99, 115, 148, 159, 244, 246, 340, 381, 641, 644, 651, 722, 835, 836, 846, 847, 852, 859], "restor": [76, 99, 651, 722, 851], "num_or_size_split": [76, 86, 99, 651, 723, 865], "with_remaind": [76, 86, 99, 651, 723], "squeezabl": [76, 651, 724], "swapax": [76, 99, 651], "axis0": [76, 99, 651, 726], "swap_ax": [76, 726], "swap": [76, 99, 651, 726, 816, 875], "tile": [76, 93, 99, 559, 651], "unpack": [76, 99, 651, 728, 858, 860], "zero_pad": [76, 99, 651], "_arraywithnorm": [77, 114], "layer_norm": [77, 100, 654], "normalized_idx": [77, 100, 654, 752], "new_std": [77, 100, 654, 752, 810], "learnabl": [77, 100, 648, 652, 654, 673, 732, 752, 807, 810], "0976": [77, 654, 752], "3452": [77, 654, 752], "2740": [77, 654, 752], "1047": [77, 654, 752], "5886": [77, 654, 752], "2732": [77, 654, 752], "7696": [77, 654, 752, 791], "7024": [77, 654, 752], "2518": [77, 654, 752], "826": [77, 654, 752], "178": [77, 654, 752], "981": [77, 654, 752], "831": [77, 654, 752], "421": [77, 654, 752], "_arraywithrandom": [78, 114], "multinomi": [78, 101, 394, 522, 655], "population_s": [78, 101, 655, 753], "num_sampl": [78, 101, 655, 753], "unnorm": [78, 101, 655, 753, 860], "popul": [78, 82, 86, 101, 105, 655, 659, 753, 779, 781, 845, 846, 856, 860, 865], "draw": [78, 101, 394, 520, 522, 524, 655, 753, 755, 756, 791, 792, 793, 794, 799, 806, 834, 839, 858, 860], "half": [78, 101, 138, 299, 641, 644, 655, 754, 756, 832, 850, 863], "235": [78, 755], "float16": [78, 89, 101, 146, 169, 171, 172, 177, 179, 358, 384, 641, 642, 649, 706, 755, 756, 791, 792, 832, 845, 850, 857, 860], "807": [78, 755], "_arraywithsearch": [79, 114], "select_last_index": [79, 102, 656, 759, 760], "occurr": [79, 390, 399, 510, 532, 656, 657, 759, 760, 764], "argmin": [79, 102, 656], "output_dtyp": [79, 102, 656, 760], "argwher": [79, 102, 656], "nonzero": [79, 102, 110, 233, 234, 235, 238, 241, 250, 252, 255, 257, 259, 285, 298, 303, 644, 656], "as_tupl": [79, 102, 656, 762], "fewer": [79, 102, 656, 762], "_arraywithset": [80, 114], "unique_al": [80, 103, 657], "by_valu": [80, 103, 657, 764], "inverse_indic": [80, 103, 390, 510, 657, 764, 766], "unique_count": [80, 103, 657], "unique_invers": [80, 103, 657], "unique_valu": [80, 103, 657], "admonit": [80, 767], "dask": [80, 657, 764, 765, 766, 767], "difficult": [80, 657, 764, 765, 766, 767, 836, 839, 845, 860, 867], "omit": [80, 295, 644, 657, 764, 765, 766, 767, 852, 856, 857], "x_i": [80, 82, 91, 110, 232, 233, 234, 237, 238, 239, 241, 243, 248, 249, 250, 255, 257, 258, 265, 266, 267, 268, 269, 273, 274, 275, 276, 280, 287, 292, 295, 296, 297, 298, 299, 300, 302, 303, 305, 347, 348, 350, 371, 384, 644, 657, 659, 764, 765, 766, 767, 775, 776, 777, 779, 780, 781, 806, 848], "x_j": [80, 657, 764, 765, 766, 767], "typeerror": [80, 103, 657, 767], "_arraywithsort": [81, 114], "stabil": [81, 104, 604, 605, 646, 658, 768, 771, 845, 855, 861, 863], "msort": [81, 104, 658], "searchsort": [81, 104, 658, 792], "sorter": [81, 104, 658, 770], "ret_dtyp": [81, 104, 658, 770], "_arraywithstatist": [82, 114], "cumprod": [82, 105, 659, 857, 865], "cumsum": [82, 105, 659, 845], "einsum": [82, 105, 659], "equat": [82, 92, 105, 326, 381, 388, 458, 649, 659, 698, 774, 791, 821, 844, 878], "operand": [82, 92, 96, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 257, 258, 259, 266, 267, 268, 273, 274, 275, 276, 277, 285, 288, 290, 294, 295, 296, 297, 298, 299, 302, 303, 305, 347, 348, 371, 375, 384, 385, 387, 430, 644, 649, 659, 697, 703, 774, 775, 777, 778, 780, 821, 822, 840, 843, 848, 857], "contract": [82, 649, 659, 701, 774, 822], "seq": [82, 659, 774, 791], "ii": [82, 105, 659, 774, 836], "jk": [82, 659, 774, 822], "ik": [82, 659, 774, 822], "126": [82, 122, 291, 638, 644, 649, 659, 691, 774], "510": [82, 659, 774], "special": [82, 97, 109, 110, 114, 115, 232, 233, 234, 235, 237, 238, 239, 240, 241, 248, 249, 250, 252, 253, 255, 257, 258, 259, 266, 267, 268, 273, 274, 275, 276, 277, 280, 285, 288, 290, 294, 295, 296, 297, 298, 299, 302, 303, 305, 347, 348, 371, 384, 644, 649, 659, 697, 703, 775, 776, 777, 778, 779, 780, 781, 791, 792, 793, 794, 799, 806, 834, 837, 839, 840, 842, 844, 847, 848, 849, 852, 856, 858, 859, 860, 861, 863, 878, 879], "arithmet": [82, 105, 246, 252, 285, 644, 659, 776, 857], "propag": [82, 246, 347, 348, 384, 644, 659, 775, 776, 777, 779, 780, 781, 855], "overflow": [82, 105, 235, 252, 259, 644, 649, 659, 697, 776, 780, 833, 845], "04999995": [82, 776], "freedom": [82, 105, 659, 779, 781, 841], "constitut": [82, 105, 659, 779, 781, 853, 865, 879], "commonli": [82, 105, 659, 779, 781, 849, 853, 855], "81649661": [82, 659, 779], "6666665": [82, 781], "667": [82, 93, 252, 553, 604, 644, 646, 781], "_arraywithutil": [83, 114], "logic": [83, 106, 216, 252, 253, 279, 280, 281, 285, 288, 643, 644, 660, 782, 783, 834, 840, 844, 845, 846, 849, 853, 854, 855, 856, 857, 859, 860, 863, 875], "AND": [83, 106, 242, 253, 279, 644, 660, 782], "OR": [83, 106, 245, 281, 288, 644, 660, 783, 835, 836, 855], "_wrap_funct": [84, 107, 842, 853, 854], "function_nam": [84, 107, 834, 861], "new_funct": [84, 107, 842], "add_ivy_array_instance_method": 84, "cl": [84, 107], "moduletyp": [84, 107, 874, 875, 876], "toi": [84, 107], "arrayexampl": 84, "hasattr": [84, 107], "_containerwithactiv": [85, 115], "dict_in": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "queue": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 598, 621, 646, 862], "queue_load_s": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "container_combine_method": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "list_join": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "queue_timeout": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 598, 621, 646, 862], "print_limit": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "key_length_limit": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "print_ind": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "print_line_spac": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "ivyh": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "default_key_color": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "keyword_color_dict": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "rebuild_child_contain": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "types_to_iteratively_nest": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "alphabetical_kei": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "dynamic_backend": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 114, 115, 808, 809, 841, 862], "build_cal": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115], "containerbas": [85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 843], "_static_gelu": 85, "key_chain": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 175, 177, 180, 183, 184, 185, 187, 189, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 329, 330, 340, 341, 345, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 372, 373, 374, 375, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 483, 492, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 519, 521, 526, 527, 534, 535, 536, 537, 544, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783], "to_appli": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 175, 177, 180, 183, 184, 185, 187, 189, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 329, 330, 340, 341, 345, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 372, 373, 374, 375, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 483, 492, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 519, 521, 526, 527, 534, 535, 536, 537, 544, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 653, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783], "prune_unappli": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 175, 177, 180, 183, 184, 185, 187, 189, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 329, 330, 340, 341, 345, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 372, 373, 374, 375, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 430, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 483, 492, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 519, 521, 526, 527, 534, 535, 536, 537, 544, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 653, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 746, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783], "map_sequ": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 167, 175, 177, 180, 183, 184, 185, 187, 189, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 329, 330, 340, 341, 345, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 372, 373, 374, 375, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 430, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 483, 492, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 519, 521, 526, 527, 534, 535, 536, 537, 544, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783], "prune": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 153, 155, 161, 165, 167, 180, 184, 185, 192, 226, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 321, 322, 323, 325, 346, 347, 348, 349, 350, 352, 354, 362, 363, 369, 371, 373, 374, 375, 411, 412, 413, 431, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 502, 504, 505, 506, 508, 513, 515, 516, 517, 519, 521, 534, 535, 536, 537, 546, 549, 550, 552, 553, 557, 558, 559, 560, 561, 564, 565, 568, 570, 572, 573, 574, 576, 577, 580, 588, 589, 603, 604, 605, 607, 609, 611, 612, 625, 631, 636, 653, 662, 663, 664, 665, 671, 672, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 694, 696, 697, 703, 708, 709, 710, 714, 718, 721, 722, 723, 724, 725, 728, 729, 746, 747, 748, 749, 753, 754, 755, 756, 758, 761, 764, 765, 766, 767, 768, 772, 773, 776, 778, 779, 781, 782, 783, 789, 792, 844], "static_gelu": 85, "046": 85, "_static_hardswish": 85, "_static_leaky_relu": 85, "static_leaky_relu": 85, "38999999": [85, 92, 124, 307, 308, 379], "_static_log_softmax": 85, "static_log_softmax": 85, "371": [85, 125], "_static_mish": 85, "static_mish": 85, "30883577": [85, 126, 638], "28903052": [85, 126, 638], "10714479": [85, 126, 638], "_static_relu": 85, "static_relu": 85, "_static_sigmoid": 85, "static_sigmoid": 85, "2689414": [85, 128, 129, 638], "7310586": [85, 128, 129, 638], "88079703": [85, 128, 638], "62245935": [85, 128], "4750208": [85, 128], "_static_softmax": 85, "static_softmax": 85, "72844321": [85, 129], "19852395": [85, 129], "07303288": [85, 129], "_static_softplu": 85, "revert": [85, 130, 638], "static_softplu": 85, "53499615": 85, "42036411": 85, "948": [85, 130, 653, 733], "dictionari": [86, 103, 115, 224, 613, 629, 643, 646, 647, 767, 786, 788, 822, 840, 844, 845, 853, 857, 858, 867], "asynchron": [86, 115, 878], "wait": [86, 115, 598, 646, 834, 836, 844, 857], "arriv": [86, 115, 598, 646, 863], "cont_list_join": [86, 115], "whitespac": [86, 115], "indent": [86, 115], "newlin": [86, 115, 848], "termin": [86, 115, 835, 836, 843, 850, 851, 865], "constructor": [86, 115, 548, 646, 788, 804, 812, 845, 846, 848], "kept": [86, 115, 652, 730, 731, 836, 856, 861], "encount": [86, 115, 807, 832, 834, 845, 849, 850, 860], "node": [86, 93, 115, 550, 560, 607, 653, 743, 744, 806, 815, 819, 842, 843, 857, 874, 875, 879], "alphabet": [86, 115], "__setitem__": [86, 390, 504, 840, 843], "_cont_at_key_chains_input_as_dict": 86, "current_chain": 86, "ignore_key_error": 86, "_cont_at_key_chains_input_as_seq": 86, "_cont_call_static_method_with_flexible_arg": 86, "static_method": 86, "kw": 86, "self_idx": 86, "_cont_concat_unifi": 86, "_cont_get_dev": 86, "_cont_get_dtyp": 86, "_cont_get_shap": 86, "_cont_ivi": 86, "_cont_mean_unifi": 86, "_1": 86, "_cont_prune_key_chains_input_as_dict": 86, "return_cont": 86, "_cont_prune_key_chains_input_as_seq": 86, "_cont_slice_kei": 86, "key_slic": 86, "_cont_sum_unifi": 86, "_get_queue_item": 86, "cont_all_fals": 86, "assert_is_bool": 86, "cont_all_key_chain": 86, "include_empti": 86, "cont_all_tru": [86, 843], "cont_as_bool": 86, "cont_assert_contains_sub_contain": 86, "sub_cont": 86, "screen": [86, 834, 835], "cont_assert_contains_sub_structur": 86, "check_shap": [86, 813], "cont_assert_ident": 86, "check_typ": 86, "same_arrai": 86, "arrays_equ": 86, "cont_assert_identical_structur": 86, "assert_and_assign": 86, "congruent": 86, "cont_at_key_chain": 86, "ignore_non": 86, "cont_at_kei": 86, "substr": 86, "cont_combin": 86, "duplic": [86, 390, 501, 569, 646, 653, 735, 841, 848, 854, 855, 858], "configur": [86, 224, 643, 653, 746, 835, 836, 842, 844, 845, 850, 851], "container_rightmost": 86, "cont_common_key_chain": 86, "cont_config": 86, "cont_contains_sub_contain": 86, "cont_contains_sub_structur": 86, "cont_copi": 86, "cont_create_if_abs": 86, "noth": [86, 863], "cont_cutoff_at_depth": 86, "depth_cutoff": 86, "cont_cutoff_at_height": 86, "height_cutoff": 86, "cont_deep_copi": [86, 874], "cont_dev": 86, "cont_dev_str": 86, "cont_diff": 86, "diff_kei": 86, "detect_key_diff": 86, "detect_value_diff": 86, "detect_shape_diff": 86, "container0": 86, "cont_dtyp": 86, "cont_duplicate_array_keychain": 86, "cont_find_sub_contain": 86, "sub_cont_to_find": 86, "cont_find_sub_structur": 86, "sub_struc_to_find": 86, "cont_flatten_key_chain": 86, "above_height": 86, "below_depth": 86, "cont_format_key_chain": 86, "format_fn": 86, "cont_from_disk_as_hdf5": 86, "h5_obj_or_filepath": 86, "slice_obj": 86, "disk": [86, 809, 880], "h5py": 86, "filepath": [86, 660, 784, 785, 836, 839], "cont_from_disk_as_json": 86, "json_filepath": 86, "cont_from_disk_as_pickl": 86, "pickle_filepath": 86, "cont_from_flat_list": 86, "flat_list": 86, "hierarchi": [86, 826, 834, 859], "cont_handle_inplac": 86, "prime": [86, 845], "overwritten": [86, 840, 841], "cont_has_kei": 86, "query_kei": 86, "somewher": [86, 844], "cont_has_key_chain": 86, "cont_ident": 86, "cont_identical_array_shap": 86, "cont_identical_config": 86, "cont_identical_structur": 86, "cont_if_exist": 86, "cont_inplace_upd": 86, "cont_ivi": 86, "cont_key_chains_contain": 86, "sub_str": 86, "cont_list_stack": 86, "cont_load": 86, "cont_map": [86, 843], "func": [86, 109, 225, 376, 377, 378, 386, 551, 626, 629, 630, 632, 637, 643, 646, 647, 653, 746, 788, 834, 839, 840, 847, 849, 855], "cont_map_sub_cont": 86, "include_self": 86, "possibli": [86, 609, 646, 791, 860, 867], "cont_max_depth": 86, "cont_multi_map": 86, "map_nest": 86, "assert_ident": 86, "leftmost": [86, 653, 746], "cont_multi_map_in_funct": 86, "cont_num_arrai": 86, "cont_overwrite_at_key_chain": 86, "target_dict": 86, "return_dict": 86, "cont_prune_empti": 86, "keep_non": 86, "cont_prune_key_chain": 86, "key1": [86, 828], "key2": [86, 828], "key3": 86, "cont_prune_key_from_key_chain": 86, "certain": [86, 138, 149, 150, 389, 466, 641, 834, 835, 836, 839, 845, 853, 859, 860, 863, 867, 874, 875, 876], "cont_prune_kei": 86, "cont_prune_keys_from_key_chain": 86, "cont_reduc": 86, "cont_remove_key_length_limit": 86, "cont_remove_print_limit": 86, "cont_reshape_lik": 86, "leading_shap": 86, "cont_restructur": 86, "keep_orig": 86, "old": [86, 835, 841, 856], "cont_restructure_key_chain": 86, "keychain_map": 86, "cont_sav": 86, "cont_set_at_key_chain": 86, "cont_set_at_kei": 86, "cont_shap": [86, 648, 666], "cont_show": 86, "cont_show_sub_contain": 86, "sub_cont_or_keychain": 86, "cont_size_ordered_arrai": 86, "keychain": [86, 92, 310, 349, 474, 475, 476, 505], "cont_slice_kei": 86, "all_depth": 86, "cont_slice_via_kei": 86, "slice_kei": 86, "cont_sort_by_kei": 86, "cont_structural_diff": 86, "cont_to_dict": 86, "cont_to_disk_as_hdf5": 86, "starting_index": 86, "max_batch_s": 86, "cont_to_disk_as_json": 86, "cont_to_disk_as_pickl": 86, "cont_to_flat_list": 86, "cont_to_iter": [86, 843], "leaf_keys_onli": 86, "cont_to_iterator_kei": 86, "cont_to_iterator_valu": 86, "cont_to_json": 86, "cont_to_nested_list": 86, "cont_to_raw": 86, "cont_trim_kei": 86, "cont_try_kc": 86, "cont_unifi": 86, "concatten": [86, 225, 643], "cont_unstack_cont": 86, "dim_siz": 86, "cont_update_config": 86, "cont_with_default_key_color": 86, "cont_with_entries_as_list": 86, "cont_with_ivy_backend": 86, "ivy_backend": [86, 858], "cont_with_key_length_limit": 86, "cont_with_print_ind": 86, "cont_with_print_limit": 86, "cont_with_print_line_spac": 86, "h5_file_s": 86, "shuffle_h5_fil": 86, "split_cont": 86, "_is_json": 86, "_repr": 86, "_containerwithconvers": [87, 115], "_static_to_ivi": 87, "_static_to_n": 87, "_containerwithcr": [88, 115], "_static_arang": 88, "_static_asarrai": 88, "_static_copy_arrai": 88, "_static_empti": 88, "_static_empty_lik": 88, "_static_ey": 88, "n_row": [88, 92, 144, 159, 340, 381, 388, 449, 641], "n_col": [88, 92, 144, 159, 340, 381, 641], "_static_from_dlpack": 88, "_static_ful": 88, "_static_full_lik": 88, "static_full_lik": 88, "2324": [88, 148, 641], "234": [88, 91, 148, 171, 254, 305, 641, 642, 644, 648, 672, 791], "_static_linspac": 88, "_static_logspac": 88, "static_logspac": 88, "15443469": [88, 150], "64158883": [88, 150], "_static_meshgrid": 88, "_static_native_arrai": 88, "_static_one_hot": 88, "static_one_hot": 88, "_static_on": 88, "_static_ones_lik": 88, "_static_tril": 88, "_static_triu": 88, "_static_zero": 88, "_static_zeros_lik": 88, "frombuff": [88, 641], "expos": [88, 146, 554, 641, 646, 828, 844, 865], "x00": [88, 146, 641], "xf0": [88, 146, 641], "x01": [88, 146, 641], "x02": [88, 146, 641], "x03": [88, 146, 641], "x04": [88, 146, 641], "x05": [88, 146], "5443469": [88, 150, 641], "static_frombuff": 88, "static_triu_indic": 88, "triu_indic": [88, 641], "_containerwithdatatyp": [89, 115], "_static_astyp": 89, "718": [89, 91, 164, 281, 642], "618": [89, 91, 164, 281, 642], "static_astyp": 89, "_static_broadcast_arrai": 89, "static_broadcast_arrai": 89, "_static_broadcast_to": 89, "static_broadcast_to": 89, "_static_can_cast": 89, "from_": [89, 167, 642], "static_can_cast": 89, "_static_default_complex_dtyp": 89, "complex_dtyp": [89, 170, 193, 642], "_static_default_float_dtyp": 89, "float_dtyp": [89, 172, 195, 642], "_static_dtyp": 89, "_static_finfo": 89, "inquir": [89, 177, 180], "static_finfo": 89, "55040e": [89, 177, 642], "7976931348623157e": [89, 177, 642], "308": [89, 177, 642, 791, 860], "_static_function_supported_dtyp": 89, "_static_function_unsupported_dtyp": 89, "_static_iinfo": 89, "1800": [89, 180, 642], "1084": 89, "40000": 89, "static_iinfo": 89, "2147483648": [89, 92, 180, 390, 504, 642], "2147483647": [89, 180, 642], "_static_is_bool_dtyp": 89, "dtype_in": [89, 162, 163, 176, 182, 183, 184, 185, 186, 187, 188, 189, 204, 642], "_static_is_complex_dtyp": 89, "is_complex_dtyp": [89, 642, 861], "roughli": [89, 835, 839], "static_is_complex_dtyp": 89, "_static_is_float_dtyp": 89, "static_is_float_dtyp": 89, "_static_is_int_dtyp": 89, "_static_is_uint_dtyp": 89, "_static_result_typ": 89, "static_result_typ": 89, "broadcats": [89, 165], "_containerwithdevic": [90, 115], "_static_dev": 90, "static_dev": 90, "_static_to_devic": 90, "static_to_devic": 90, "contaion": [90, 209], "_containerwithelementwis": [91, 115], "_static_ab": 91, "static_ab": 91, "_static_aco": 91, "static_aco": 91, "_static_acosh": 91, "static_acosh": 91, "_static_add": 91, "static_add": [91, 119], "_static_asin": 91, "static_asin": 91, "524": [91, 237, 644], "412": [91, 96, 237, 644, 653, 733], "_static_asinh": 91, "static_asinh": 91, "_static_atan": 91, "static_atan": 91, "_static_atan2": 91, "static_atan2": 91, "915": [91, 240, 644], "983": [91, 240, 644], "978": [91, 240, 644], "696": [91, 101, 240, 644, 755], "993": [91, 240, 644], "_static_atanh": 91, "static_atanh": 91, "_static_bitwise_and": 91, "static_bitwise_and": 91, "_static_bitwise_invert": 91, "static_bitwise_invert": 91, "_static_bitwise_left_shift": 91, "_static_bitwise_or": 91, "static_bitwise_or": 91, "_static_bitwise_right_shift": 91, "static_bitwise_right_shift": 91, "_static_bitwise_xor": 91, "static_bitwise_xor": 91, "_static_ceil": 91, "static_ceil": 91, "_static_co": 91, "static_co": 91, "_static_cosh": 91, "static_cosh": 91, "_static_deg2rad": 91, "static_deg2rad": 91, "0262": [91, 251, 291, 644], "873": [91, 251, 291, 644], "_static_divid": 91, "static_divid": 91, "_static_equ": 91, "static_equ": 91, "_static_erf": 91, "static_erf": 91, "27632612": [91, 254], "934008": [91, 254, 644], "99999928": [91, 254], "91903949": [91, 254], "_static_exp": 91, "static_exp": 91, "59814835": [91, 255, 644], "4131622": [91, 255], "_static_expm1": 91, "thefunct": [91, 254], "areal": 91, "static_expm1": 91, "71828175": [91, 255, 644], "38905621": [91, 255, 644], "59815216": 91, "_static_floor": 91, "static_floor": 91, "_static_floor_divid": 91, "static_floor_divid": 91, "_static_great": 91, "static_great": 91, "_static_greater_equ": 91, "static_greater_equ": 91, "_static_isfinit": 91, "999999999999": [91, 266, 644], "static_isfinit": 91, "_static_isinf": 91, "static_isinf": 91, "_static_isnan": 91, "static_isnan": 91, "_static_isr": 91, "0j": [91, 92, 154, 155, 233, 234, 235, 238, 241, 250, 255, 257, 269, 273, 275, 292, 296, 298, 299, 303, 350, 384, 641, 644, 649, 697], "23j": [91, 92], "9j": [91, 92], "static_isr": 91, "_static_lcm": 91, "1080": [91, 270], "1550": [91, 270], "130": [91, 270], "_static_less": 91, "static_less": 91, "_static_less_equ": 91, "static_less_equ": 91, "_static_log": 91, "static_log": 91, "_static_log10": 91, "static_log10": 91, "898": [91, 274, 644], "0414": [91, 274, 644], "_static_log1p": 91, "static_log1p": 91, "_static_log2": 91, "static_log2": 91, "_static_logaddexp": 91, "static_logaddexp": 91, "_static_logical_and": 91, "static_logical_and": 91, "_static_logical_not": 91, "static_logical_not": 91, "_static_logical_or": 91, "static_logical_or": 91, "_static_logical_xor": 91, "static_logical_xor": 91, "_static_maximum": 91, "static_maximum": 91, "_static_minimum": 91, "static_minimum": 91, "_static_multipli": 91, "static_multipli": 91, "_static_neg": 91, "static_neg": 91, "_static_not_equ": 91, "static_not_equ": 91, "_static_posit": 91, "static_posit": 91, "_static_pow": 91, "static_pow": 91, "_static_rad2deg": 91, "static_rad2deg": 91, "5160": 91, "10300": [91, 291, 644], "15500": 91, "20600": 91, "2860": [91, 291], "_static_reciproc": 91, "recirpoc": [91, 293], "static_reciproc": 91, "_static_remaind": 91, "static_remaind": 91, "_static_round": 91, "thevfunct": 91, "527": [91, 295, 644], "static_round": 91, "301": [91, 295, 644], "_static_sign": 91, "static_sign": 91, "_static_sin": 91, "static_sin": 91, "757": [91, 297, 644], "959": [91, 257, 297, 644], "279": [91, 297, 387, 409, 419, 552, 644, 646], "_static_sinh": 91, "static_sinh": 91, "835": [91, 298], "347": [91, 298], "721": [91, 298], "_static_sqrt": 91, "static_sqrt": 91, "_static_squar": 91, "static_squar": 91, "_static_subtract": 91, "static_subtract": 91, "_static_tan": 91, "static_tan": 91, "_static_tanh": 91, "static_tanh": 91, "995": [91, 303, 644], "9999": 91, "_static_trapz": 91, "static_trapz": 91, "_static_trunc": 91, "static_trunc": 91, "_static_trunc_divid": 91, "75j": [91, 236, 265], "01317055": [91, 236], "05634501": [91, 236], "115": [91, 236, 291, 644], "3461759": [91, 236], "524111": [91, 236], "644": [91, 237, 644], "305": [91, 96, 237, 644], "351": [91, 251, 291], "00613": [91, 251], "0154": [91, 251], "403": [91, 255], "428772": [91, 255], "649": [91, 257], "865": [91, 257], "metho": [91, 264, 276], "imaginari": [91, 114, 124, 127, 130, 154, 155, 233, 234, 235, 250, 252, 253, 255, 257, 265, 285, 287, 288, 295, 298, 299, 303, 350, 384, 387, 388, 431, 442, 638, 641, 644, 656, 762, 847], "4j": [91, 265, 387, 431, 605, 644, 646], "7j": [91, 92, 269, 292, 350, 384, 644], "956": [91, 275], "08746284": [91, 278], "32192809": [91, 278], "nuner": [91, 285], "413": [91, 291], "335": [91, 92, 292, 350], "345j": [91, 92, 292, 350], "static_angl": 91, "static_exp2": 91, "static_fmin": 91, "static_gcd": 91, "static_imag": 91, "static_logaddexp2": 91, "static_nan_to_num": 91, "static_r": 91, "_containerwithactivationexperiment": [92, 115], "_static_celu": 92, "formlat": 92, "static_celu": 92, "_static_elu": 92, "static_elu": 92, "_static_hardshrink": 92, "hard": [92, 309, 828, 836, 878], "shrinkag": [92, 309, 319, 390, 503], "_static_hardsilu": 92, "20833333": [92, 310, 379], "29166666": [92, 310, 379], "66666669": [92, 115, 310, 379, 393, 519, 629, 647], "66666663": [92, 149, 310, 379, 641], "_static_hardtanh": 92, "3899": 92, "_static_scaled_tanh": 92, "931": 92, "71587813": 92, "88367474": 92, "00376701": [92, 316], "2285642": 92, "99999881": 92, "49999905": 92, "_static_silu": 92, "static_silu": 92, "27777028": [92, 318], "23947507": [92, 318], "0900332": [92, 318], "_static_softshrink": 92, "_static_tanhshrink": 92, "36634541": [92, 321], "02005103": [92, 321], "00262468": [92, 321], "_static_threshold": 92, "389999": [92, 311], "19722462": [92, 312], "84729779": [92, 312], "31326163": [92, 313], "46328258": [92, 313], "51301527": [92, 313], "79813886": [92, 313], "simplywrap": [92, 316], "54939651": [92, 316], "09999998": [92, 316, 627, 647], "09999999": [92, 316], "08336546": [92, 316], "0379949": [92, 316], "22856998": [92, 317], "42028043": [92, 317], "31868932": [92, 317], "static_logit": 92, "static_logsigmoid": 92, "34115386": 92, "64439666": 92, "24115384": 92, "55435526": 92, "07888974": 92, "00741899": 92, "26328245": 92, "00012302": 92, "static_prelu": 92, "static_relu6": 92, "static_selu": 92, "static_thresholded_relu": 92, "_containerwithconversionexperiment": [92, 115], "_containerwithcreationexperiment": [92, 115], "_static_trilu": 92, "blackman": [92, 324, 381], "00770143e": [92, 324], "49229857e": [92, 324], "hamming_window": [92, 381], "ham": [92, 326, 381], "4180": [92, 326], "8180": [92, 326], "hann_window": [92, 381], "hann": [92, 327, 381], "7500": [92, 327], "3455": [92, 327], "9045": [92, 327], "kaiser_bessel_derived_window": [92, 381], "suitabl": [92, 329, 330, 381, 658, 770, 793, 835, 836, 843, 861, 878], "spectral": [92, 329, 330, 381], "analysi": [92, 329, 330, 381, 878, 879], "kaiser": [92, 324, 329, 330, 381], "70710677": [92, 329, 517, 519], "18493208": [92, 329, 381], "9827513": [92, 329, 381], "kaiser_window": [92, 381], "static_kaiser_window": [92, 330], "2049": [92, 330], "8712": [92, 330], "0367": [92, 330, 381], "7753": [92, 330], "static_blackman_window": 92, "static_eye_lik": 92, "static_hamming_window": 92, "static_hann_window": 92, "static_hann": 92, "static_kaiser_bessel_derived_window": 92, "static_mel_weight_matrix": 92, "static_polyv": 92, "static_tril_indic": 92, "static_unsorted_segment_mean": 92, "static_unsorted_segment_min": 92, "static_unsorted_segment_sum": 92, "static_vorbis_window": 92, "vorbis_window": [92, 381], "vorbi": [92, 345, 381], "38268343": [92, 345, 649, 685], "92387953": [92, 345], "14943586": [92, 345, 381], "51644717": [92, 345], "85631905": [92, 345], "98877142": [92, 345], "tril_indic": [92, 381], "_containerwithdata_typeexperiment": [92, 115], "_containerwithdeviceexperiment": [92, 115], "_containerwithelementwiseexperiment": [92, 115], "0003": [92, 346, 649, 688, 791, 794], "0006": [92, 346, 374], "2345j": [92, 350], "5772": [92, 354], "9635": [92, 354], "4228": [92, 354], "9228": [92, 354], "57299206e": [92, 355, 356], "67773480e": [92, 355, 356], "20904985e": [92, 355, 356], "84270084": [92, 355, 356, 384], "99532223": [92, 355, 356], "99997795": [92, 355, 356], "mantissa": [92, 360, 384, 845], "frist": [92, 361, 384], "coord": [92, 361], "6055": [92, 362], "160": [92, 364], "10240": [92, 364], "60000038": [92, 365, 384, 649, 705], "0707": [92, 371, 384], "0579": [92, 371, 384], "static_allclos": 92, "static_amax": 92, "static_amin": 92, "static_binar": 92, "static_conj": 92, "static_copysign": 92, "static_count_nonzero": 92, "static_diff": 92, "static_digamma": 92, "57721537": 92, "96351004": 92, "static_erfc": 92, "15729921": 92, "00467773": [92, 355, 384], "static_erfinv": 92, "static_fix": 92, "static_float_pow": 92, "static_fmax": 92, "static_fmod": 92, "static_frexp": 92, "static_gradi": 92, "static_hypot": 92, "static_isclos": 92, "static_ldexp": 92, "static_lerp": 92, "90000057": [92, 365, 384], "70000076": [92, 365, 384], "55000019": [92, 365, 384], "05000019": [92, 365, 384], "static_modf": 92, "static_nansum": 92, "static_nextaft": 92, "static_signbit": 92, "static_sinc": 92, "636": 92, "090": 92, "070": 92, "057": 92, "static_sparsify_tensor": 92, "static_xlogi": 92, "static_zeta": 92, "0244": [92, 374], "_containerwithgeneralexperiment": [92, 115], "_static_reduc": 92, "static_reduc": 92, "_containerwithgradientsexperiment": [92, 115], "_containerwithimageexperiment": [92, 115], "_containerwithlayersexperiment": [92, 115], "_static_fft": 92, "static_fft": 92, "_static_sliding_window": 92, "673": [92, 409], "0507": [92, 409], "79711437": [92, 387, 409, 419], "94867325": [92, 387, 409, 419], "74089146": [92, 387, 409, 419], "25980937": [92, 387, 409, 419], "64958102": [92, 387, 409, 419], "2442648": [92, 387, 409, 419], "247306": [92, 421], "908323j": [92, 421], "494955": [92, 421], "90395j": [92, 421], "static_adaptive_avg_pool1d": 92, "static_adaptive_avg_pool2d": 92, "static_adaptive_max_pool2d": 92, "static_adaptive_max_pool3d": 92, "static_avg_pool1d": 92, "static_avg_pool2d": 92, "static_avg_pool3d": 92, "static_dct": 92, "253": [92, 298, 644], "515": [92, 655, 755], "467": 92, "static_dft": 92, "static_embed": 92, "static_idct": 92, "93732834": [92, 387, 409], "75048852": [92, 387, 409], "29723358": [92, 387, 419], "6950531": 92, "93914509": 92, "88008738": 92, "18951225": 92, "06697273": [92, 387, 419], "57439804": 92, "68861485": [92, 387, 419], "41308832": [92, 387, 419], "0700836": 92, "2449036": 92, "6711426": 92, "514": 92, "501709": 92, "4924011": 92, "static_ifft": 92, "static_ifftn": 92, "static_interpol": 92, "static_max_pool1d": 92, "static_max_pool2d": 92, "max_pool2dd": 92, "static_max_pool3d": 92, "static_max_unpool1d": 92, "static_rfft": 92, "static_rfftn": 92, "static_rnn": 92, "step_funct": [92, 387, 433], "initial_st": [92, 387, 433, 648, 673], "go_backward": [92, 387, 433], "unrol": [92, 387, 433, 648, 674, 865], "input_length": [92, 387, 433], "zero_output_for_mask": [92, 387, 433], "return_all_output": [92, 387, 433], "rnn": [92, 387, 878], "tempor": [92, 387, 433], "state_s": [92, 387, 433], "while_loop": [92, 387, 433, 640], "otput": [92, 387, 433], "funciton": [92, 387, 433], "static_stft": 92, "_containerwithlinearalgebraexperiment": [92, 115], "933034": [92, 388, 438], "eigenvealu": [92, 441, 684], "xx": [92, 441, 443, 684], "37228107": [92, 441, 684], "3722816": [92, 441, 684], "8245648": [92, 441, 684], "41597357": [92, 441, 684], "56576747": [92, 441, 684], "9093767": [92, 441, 684], "56155": [92, 442], "82842": [92, 442], "450": [92, 448], "static_adjoint": 92, "static_batched_out": 92, "static_cond": 92, "static_diagflat": 92, "static_dot": 92, "static_eig": 92, "static_eigh_tridiagon": 92, "static_eigv": 92, "static_higher_order_mo": 92, "static_initialize_tuck": 92, "static_kron": 92, "kroneck": [92, 388, 447, 448], "static_make_svd_non_neg": 92, "static_matrix_exp": 92, "static_mode_dot": 92, "static_multi_dot": 92, "static_multi_mode_dot": 92, "static_partial_tuck": 92, "static_svd_flip": 92, "static_tensor_train": 92, "static_truncated_svd": 92, "static_tt_matrix_to_tensor": 92, "tt_matrix": [92, 388, 462], "output_tensor": [92, 112, 388, 462], "static_tuck": 92, "_containerwithlossesexperiment": [92, 115], "_static_hinge_embedding_loss": 92, "_static_huber_loss": 92, "static_huber_loss": 92, "0575": [92, 465], "_static_kl_div": 92, "_static_l1_loss": 92, "static_l1_loss": 92, "_static_log_poisson_loss": 92, "static_log_poisson_loss": 92, "_static_poisson_nll_loss": 92, "06446016": 92, "55611551": 92, "30244565": [92, 469], "_static_smooth_l1_loss": 92, "static_smooth_l1_loss": 92, "_static_soft_margin_loss": 92, "3890561": [92, 468], "413159": [92, 468], "06429195": [92, 469], "43333333": [92, 470], "10666666": [92, 470], "_containerwithmanipulationexperiment": [92, 115], "_static_fill_diagon": 92, "_static_put_along_axi": 92, "_static_tak": 92, "69999981": [92, 319, 379, 390, 480, 504], "_static_trim_zero": 92, "_static_unflatten": 92, "_static_unique_consecut": 92, "ary1": [92, 390, 474, 475, 476], "ary2": [92, 390, 474, 475, 476], "broadcast_shap": [92, 118, 390, 791, 793], "static_concat_from_sequ": [92, 481], "30192195": [92, 493], "static_as_strid": 92, "static_atleast_1d": 92, "static_atleast_2d": 92, "static_atleast_3d": 92, "static_broadcast_shap": 92, "static_column_stack": 92, "static_dsplit": 92, "static_dstack": 92, "static_expand": 92, "static_flatten": 92, "static_fliplr": 92, "static_flipud": 92, "static_fold": 92, "static_heavisid": 92, "static_hsplit": 92, "static_hstack": 92, "static_i0": 92, "static_matric": 92, "static_moveaxi": 92, "static_pad": 92, "static_partial_fold": 92, "static_partial_tensor_to_vec": 92, "static_partial_unfold": 92, "static_partial_vec_to_tensor": 92, "static_rot90": 92, "static_soft_threshold": 92, "static_take_along_axi": 92, "static_top_k": 92, "static_unfold": 92, "static_vsplit": 92, "static_vstack": 92, "_containerwithnormsexperiment": [92, 115], "16903085": [92, 517, 519], "50709254": [92, 517, 519], "84515423": [92, 517, 519], "44183609": [92, 517, 519], "56807494": [92, 517, 519], "69431382": [92, 517, 519], "static_batch_norm": 92, "static_group_norm": 92, "static_instance_norm": 92, "static_l1_norm": 92, "static_l2_norm": 92, "static_lp_norm": 92, "12500000": 92, "37500000": 92, "62500000": 92, "27500000": 92, "35000000": 92, "42500000": 92, "0000000": 92, "5000000": 92, "2500000": 92, "_containerwithrandomexperiment": [92, 115], "43643127": [92, 522], "32325703": [92, 522], "24031169": [92, 522], "34251311": [92, 522], "31692529": [92, 522], "3405616": [92, 522], "5319725": [92, 522], "22458365": [92, 522], "24344385": [92, 522], "26588406": [92, 522], "61075421": [92, 522], "12336174": [92, 522], "51142915": [92, 522], "25041268": [92, 522], "23815817": [92, 522], "64042903": [92, 522], "25763214": [92, 522], "10193883": [92, 522], "31624692": [92, 522], "46567987": [92, 522], "21807321": [92, 522], "37677699": [92, 522], "39914594": [92, 522], "22407707": [92, 522], "static_bernoulli": 92, "static_beta": 92, "static_dirichlet": 92, "static_gamma": 92, "static_poisson": 92, "_containerwithsearchingexperiment": [92, 115], "static_unravel_index": 92, "_containerwithsetexperiment": [92, 115], "_containerwithsortingexperiment": [92, 115], "invert_permut": [92, 397], "static_invert_permut": 92, "static_lexsort": [92, 104], "_containerwithstatisticalexperiment": [92, 115], "_static_cummax": 92, "static_cummax": 92, "_static_cummin": 92, "static_cummin": 92, "_static_nanmin": 92, "static_nanmin": 92, "func_nam": [92, 537, 834, 847, 848, 853, 857], "static_bincount": 92, "static_corrcoef": 92, "static_cov": [92, 399, 534], "static_histogram": 92, "static_igamma": 92, "static_lgamma": 92, "static_median": 92, "static_nanmean": 92, "static_nanmedian": 92, "static_nanprod": 92, "static_quantil": 92, "_containerwithutilityexperiment": [92, 115], "static_optional_get_el": 92, "_containerwithgener": [93, 115], "_static_all_equ": 93, "static_all_equ": 93, "_static_array_equ": 93, "a0": [93, 390, 480], "static_array_equ": 93, "_static_assert_supports_inplac": 93, "_static_clip_matrix_norm": 93, "static_clip_matrix_norm": 93, "849": [93, 552, 646], "_static_clip_vector_norm": 93, "static_clip_vector_norm": 93, "_static_einops_rearrang": 93, "static_einops_rearrang": 93, "_static_einops_reduc": 93, "static_einops_reduc": 93, "29333329": [93, 558, 646], "53000069": [93, 558, 646], "39666676": [93, 558, 646], "20666695": [93, 558, 646], "_static_einops_repeat": 93, "static_einops_repeat": 93, "_static_exist": 93, "_static_fourier_encod": 93, "static_fourier_encod": 93, "classivi": [93, 657, 765], "89858720e": 93, "79717439e": 93, "_static_gath": 93, "static_gath": 93, "_static_gather_nd": 93, "static_gather_nd": 93, "_static_get_num_dim": 93, "static_get_num_dim": 93, "_static_has_nan": 93, "leafwis": 93, "static_has_nan": 93, "_static_inplace_decr": 93, "_static_inplace_incr": 93, "_static_inplace_upd": 93, "_static_is_arrai": 93, "static_is_arrai": 93, "_static_is_ivy_arrai": 93, "static_is_ivy_arrai": 93, "_static_is_native_arrai": 93, "static_is_native_arrai": 93, "_static_scatter_flat": 93, "_static_scatter_nd": 93, "static_scatter_nd": 93, "_static_s": 93, "static_s": 93, "_static_stable_divid": 93, "22222222": 93, "11111111": 93, "857": [93, 604, 646], "444": 93, "_static_stable_pow": 93, "00012": [93, 605, 646], "00016": [93, 94, 605, 633, 646, 647], "00001": [93, 605, 646, 791], "00032": [93, 605], "00256": [93, 605], "1679638": [93, 605], "395": [93, 605], "16777383": [93, 605], "_static_supports_inplace_upd": 93, "_static_to_list": 93, "static_to_list": 93, "_static_to_numpi": 93, "static_to_numpi": 93, "_static_to_scalar": 93, "static_to_scalar": 93, "_static_value_is_nan": 93, "452": 93, "static_value_is_nan": 93, "833": [93, 553], "items": [93, 114, 646], "static_isin": 93, "static_items": 93, "static_strid": 93, "425": [93, 625], "_containerwithgradi": [94, 115], "_static_stop_gradi": 94, "static_stop_gradi": 94, "976": [94, 303, 627, 644, 647], "49e": [94, 627, 647], "74e": [94, 627, 647], "95e": [94, 627, 647], "024": [94, 627, 647], "096": [94, 627, 647], "626": [94, 627, 647], "en": [94, 627, 628, 647, 844], "wikipedia": [94, 627, 628, 647], "wiki": [94, 627, 628, 647], "stochastic_gradient_desc": [94, 627, 628, 647], "01099": [94, 628], "01003": [94, 628, 647], "01015": [94, 628, 647], "99936122": [94, 628, 647], "99936116": [94, 628, 647], "99936128": [94, 628, 647], "99936104": [94, 628, 647], "w_new": [94, 631, 647], "708": [94, 633, 647], "445": [94, 633, 647], "6e": [94, 633, 647], "00036": [94, 633, 647], "00049": [94, 633, 647], "layerwis": [94, 634, 647], "01132035": [94, 634, 647], "22264051": [94, 634, 647], "2056601": [94, 634, 647], "1324538": [94, 634, 647], "56490755": [94, 634, 647], "96622658": [94, 634, 647], "90848625": [94, 634, 647], "93616199": [94, 634, 647], "77232409": [94, 634, 647], "_containerwithimag": [95, 115], "_containerwithlay": [96, 115], "_static_conv1d": 96, "static_conv1d": 96, "_static_conv1d_transpos": 96, "static_conv1d_transpos": 96, "112": [96, 649, 659, 663, 694, 774], "_static_conv2d": 96, "ey": [96, 641, 648, 664, 670, 863, 865], "static_conv2d": 96, "_static_conv2d_transpos": 96, "static_conv2d_transpos": 96, "_static_conv3d": 96, "fdfh": [96, 666], "static_conv3d": 96, "_static_conv3d_transpos": 96, "static_conv3d_transpos": 96, "_static_depthwise_conv2d": 96, "static_depthwise_conv2d": 96, "_static_dropout": 96, "static_dropout": 96, "_static_dropout1d": 96, "static_dropout1d": 96, "_static_dropout2d": 96, "_static_dropout3d": 96, "_static_linear": 96, "278": [96, 648, 671, 672], "static_linear": 96, "195": 96, "_static_lstm_upd": 96, "_static_multi_head_attent": 96, "_static_reduce_window": 96, "_static_scaled_dot_product_attent": 96, "static_scaled_dot_product_attent": 96, "39999962": [96, 648, 671, 672], "19999695": [96, 672], "11600018": [96, 672], "88399887": [96, 672], "306": [96, 648, 672], "19999981": [96, 309, 322, 379, 387, 431, 648, 671, 678], "59249449": [96, 648, 678], "68226194": [96, 648, 678], "19603825": [96, 648, 678], "9960382": [96, 648, 678], "26894283": [96, 648, 678], "40236187": [96, 648, 678], "39999437": [96, 648, 678], "59999037": [96, 648, 678], "35046196": [96, 648, 678], "54282808": [96, 648, 678], "39989519": [96, 648, 678], "5998764": [96, 648, 678], "_containerwithlinearalgebra": [97, 115], "_static_choleski": 97, "static_choleski": 97, "577": [97, 649, 679], "707": [97, 649, 679], "static_rol": [97, 99], "_static_cross": 97, "static_cross": 97, "_static_det": 97, "_static_diag": 97, "_static_diagon": 97, "static_diagon": 97, "_static_eigh": 97, "_static_eigvalsh": 97, "static_eigvalsh": 97, "51572949": [97, 649, 686], "17091519": [97, 649, 686], "3448143": [97, 649, 686], "35898387e": [97, 649, 686], "46410179e": [97, 649, 686], "_static_inn": 97, "static_inn": 97, "_static_inv": 97, "static_inv": 97, "_static_matmul": 97, "matul": 97, "static_matmul": 97, "_static_matrix_norm": 97, "deimens": 97, "static_matrix_norm": 97, "_static_matrix_pow": 97, "_static_matrix_rank": 97, "static_matrix_rank": 97, "_static_matrix_transpos": 97, "static_matrix_transpos": 97, "_static_out": 97, "n1": [97, 151, 641], "n2": [97, 151, 641], "static_out": [97, 694], "_static_pinv": 97, "static_pinv": 97, "0426": 97, "0964": 97, "0605": 97, "1368": 97, "_static_qr": 97, "static_qr": 97, "31622777": [97, 649, 696], "9486833": [97, 649, 696], "4472136": [97, 649, 696], "89442719": [97, 649, 696], "16227766": [97, 649, 696], "42718872": [97, 649, 696], "63245553": [97, 649, 696], "47213595": [97, 649, 696], "81377674": [97, 649, 696], "_static_slogdet": 97, "static_slogdet": 97, "6931472": 97, "0986123": 97, "_static_solv": 97, "_static_svd": 97, "static_svd": 97, "au": 97, "aS": 97, "avh": 97, "bvh": 97, "_static_svdv": 97, "_static_tensordot": 97, "_static_tensorsolv": 97, "_static_trac": 97, "static_trac": 97, "_static_vand": 97, "static_vand": 97, "343": [97, 295, 644, 704], "729": [97, 704], "_static_vecdot": 97, "_static_vector_norm": 97, "static_vector_norm": 97, "77359247": [97, 706], "_static_vector_to_skew_symmetric_matrix": 97, "09861231": [97, 649, 697], "static_general_inner_product": 97, "3475602": [97, 699], "93765765": [97, 699], "58776021": [97, 699], "10416126": [97, 699], "80644298": [97, 699], "87024701": [97, 699], "48127627": [97, 699], "79101127": [97, 699], "98288572": [97, 699], "68917423": [97, 699], "_containerwithloss": [98, 115], "_static_binary_cross_entropi": 98, "static_binary_cross_entropi": 98, "511": 98, "357": 98, "_static_cross_entropi": 98, "static_cross_entropi": 98, "20397282": 98, "83258148": 98, "60943794": [98, 649, 697], "_static_sparse_cross_entropi": 98, "static_sparse_cross_entropi": 98, "36354783": [98, 650, 708], "14733934": [98, 650, 708], "17027519": [98, 709], "53647931": [98, 709], "53647929": [98, 710], "1702752": [98, 710], "_containerwithmanipul": [99, 115], "_static_clip": 99, "static_clip": 99, "_static_concat": 99, "_static_constant_pad": 99, "static_constant_pad": 99, "_static_expand_dim": 99, "static_expand_dim": 99, "container_axi": [99, 651, 717], "_static_flip": 99, "static_flip": 99, "_static_permute_dim": 99, "static_permute_dim": 99, "_static_repeat": 99, "static_repeat": 99, "_static_reshap": 99, "static_reshap": 99, "_static_rol": 99, "positivclip": 99, "_static_split": 99, "static_split": 99, "_static_squeez": 99, "static_squeez": 99, "_static_stack": 99, "leavv": 99, "static_stack": 99, "_static_swapax": 99, "_static_til": 99, "static_til": 99, "_static_unstack": 99, "static_unstack": 99, "_static_zero_pad": 99, "repreat": [99, 720], "_containerwithnorm": [100, 115], "34198591": [100, 654, 752], "04274819": [100, 654, 752], "29923761": [100, 654, 752], "24053511": [100, 654, 752], "62221265": [100, 752], "20277636": [100, 752], "41943574": [100, 752], "83710337": [100, 752], "_containerwithrandom": [101, 115], "_static_multinomi": 101, "_static_randint": 101, "static_randint": 101, "_static_random_norm": 101, "static_random_norm": 101, "651": 101, "_static_random_uniform": 101, "static_random_uniform": 101, "481": 101, "0999": 101, "_static_shuffl": 101, "static_shuffl": 101, "431": [101, 755], "274": [101, 755], "_containerwithsearch": [102, 115], "_static_argmax": 102, "static_argmax": 102, "_static_argmin": 102, "static_argmin": 102, "_static_argwher": 102, "static_argwher": 102, "_static_nonzero": 102, "_static_wher": 102, "static_wher": 102, "_containerwithset": [103, 115], "_static_unique_al": 103, "static_unique_al": 103, "_static_unique_count": 103, "static_unique_count": 103, "_static_unique_invers": 103, "static_unique_invers": 103, "_static_unique_valu": 103, "_containerwithsort": [104, 115], "_static_argsort": 104, "static_argsort": 104, "_static_searchsort": 104, "_static_sort": 104, "static_sort": 104, "static_msort": 104, "_containerwithstatist": [105, 115], "_static_cumprod": 105, "static_cumprod": 105, "_static_cumsum": 105, "static_cumsum": 105, "_static_min": 105, "_static_prod": 105, "static_prod": 105, "11000001": [105, 778], "23100001": [105, 778], "30800003": [105, 659, 778], "_static_sum": 105, "_static_var": 105, "static_var": 105, "12666667": [105, 659, 781], "11555555": [105, 659, 781], "rtype": [105, 774, 821], "respectv": [105, 779], "81649649": [105, 779], "94280904": [105, 779], "509902": [105, 659, 779], "2472192": [105, 779], "44948983": [105, 779], "41421354": [105, 779], "6666667": [105, 781], "_containerwithutil": [106, 115], "_static_al": 106, "static_al": 106, "_static_ani": 106, "static_ani": 106, "add_ivy_container_instance_method": 107, "containerexampl": 107, "factorized_tensor": [108, 109, 110, 111, 112, 113, 116], "factorizedtensor": [108, 109, 110, 111, 112, 113], "matrix_or_tensor": 108, "to_unfold": [108, 109, 110, 111, 112, 113], "to_vec": [108, 109, 110, 111, 112, 113], "cp_tensor": [109, 110], "cptensor": [109, 110, 335, 381], "cp_copi": 109, "cp_flip_sign": 109, "s_i": [109, 110], "normalisation_weight": [109, 110], "normalised_factor": [109, 110], "cp_lstsq_grad": 109, "return_loss": 109, "nabla": 109, "mathcal": 109, "mathbf": 109, "factor_matric": 109, "cp_gradient": 109, "quantiti": 109, "cp_mode_dot": 109, "keep_dim": [109, 113], "cp_multi_mode_dot": 109, "cp_n_param": 109, "tensor_shap": [109, 111, 112, 113], "n_param": [109, 110, 111, 112, 113], "cp_norm": 109, "cp_to_tensor": 109, "khatria": 109, "rao": [109, 388, 447], "khatri": [109, 388, 447], "cp_normal": 109, "normalis": [109, 110], "u_1": [109, 110], "u_n": [109, 110], "v_1": [109, 110], "v_n": [109, 110], "v_k": [109, 110], "u_k": [109, 110], "absorb": [109, 110], "refold": [109, 390, 489, 500], "cp_to_unfold": 109, "ie": 109, "s_u_i": 109, "exploit": 109, "khatri_rao": [109, 388], "cp_to_vec": 109, "ravel": [109, 863], "unfolding_dot_khatri_rao": 109, "mttkrp": 109, "validate_cp_rank": 109, "percent": [109, 112], "validate_cp_tensor": 109, "parafac2_tensor": 110, "parafac2tensor": [110, 336, 381], "apply_parafac2_project": 110, "evolv": [110, 878], "b_i": 110, "ijk": [110, 822], "sum_r": 110, "a_": 110, "ir": [110, 879], "jr": 110, "kr": 110, "coupl": [110, 835, 840, 878], "factoris": 110, "i1": [110, 399, 537], "classmethod": [110, 117, 118, 796], "from_cptensor": 110, "parafac2_tensor_ok": 110, "parafac2_normalis": 110, "normalised_project": 110, "parafac2_to_slic": 110, "slice_idx": 110, "frontal": 110, "a_i": 110, "j_i": 110, "b_": 110, "reformul": 110, "p_i": 110, "orthogon": [110, 335, 339, 381, 388, 441, 457, 463, 649, 684, 685], "sum_": 110, "ijr": 110, "constraint": [110, 822, 844, 845, 855], "projection_matric": 110, "parafac2_to_tensor": 110, "construct": [110, 651, 727, 807, 810, 811, 812, 859, 865, 866, 878], "uneven": 110, "parafac2_to_unfold": 110, "parafac2_to_vec": 110, "validate_parafac2_tensor": 110, "cp": [110, 335, 381, 836], "tr_tensor": 111, "trtensor": [111, 337, 381], "tr_n_param": 111, "tr_to_tensor": 111, "tr_to_unfold": 111, "tr_to_vec": 111, "validate_tr_rank": 111, "validate_tr_tensor": 111, "tt_tensor": 112, "_tt_n_param": 112, "mp": [112, 338, 381], "index_upd": 112, "pad_tt_rank": 112, "factor_list": 112, "n_pad": 112, "pad_boundari": 112, "ring": 112, "bond": 112, "padded_factor_list": 112, "tt_to_tensor": 112, "assembl": [112, 388, 462], "tt_to_unfold": 112, "reassembl": 112, "tt_to_vec": 112, "validate_tt_rank": 112, "constant_rank": 112, "allow_overparametr": 112, "proport": [112, 806], "realiz": [112, 878], "validate_tt_tensor": 112, "tucker_tensor": 113, "tucker_copi": 113, "tucker_mode_dot": 113, "tucker_n_param": 113, "tucker_norm": 113, "tucker_to_tensor": 113, "skip_factor": 113, "transpose_factor": 113, "tucker_to_unfold": 113, "tucker_to_vec": 113, "validate_tucker_rank": 113, "fixed_mod": 113, "validate_tucker_tensor": 113, "_bisection_root_find": 113, "fun": [113, 378, 386, 626, 646, 653, 744, 844], "max_it": 113, "__abs__": [114, 115], "__add__": [114, 115, 840, 843, 847, 848, 852, 857, 858], "__eq__": [114, 115], "__ge__": [114, 115], "__gt__": [114, 115, 863], "__le__": [114, 115], "__lt__": [114, 115], "__ne__": [114, 115], "__pow__": [114, 115], "69678056": 114, "59876156": 114, "82660675": 114, "__radd__": [114, 115, 847, 848, 857], "__rrshift__": [114, 115], "__rshift__": [114, 115], "__rsub__": [114, 115], "__sub__": [114, 115, 840, 843, 847, 852], "__truediv__": [114, 115, 840, 843, 847], "__xor__": [114, 115], "referenc": [114, 849, 856], "resid": [114, 118, 651, 717, 857, 865], "mt": 114, "eq": 115, "ge": 115, "le": 115, "ne": 115, "75979435": 115, "52153397": 115, "13532257": 115, "rshift": 115, "truediv": 115, "nested_arrai": [117, 118, 119, 842], "nestedarrai": 117, "nested_rank": [117, 118, 119], "inner_shap": [117, 118, 119], "nestedarraybas": [117, 118, 119], "from_row_length": 117, "row_length": 117, "from_row_split": 117, "row_split": 117, "ragged_map": 118, "ragged_multi_map": 118, "ragged_arrai": 118, "ragged_multi_map_in_funct": 118, "replace_ivy_arrai": 118, "unbind": 118, "nestedarrayelementwis": 119, "strictli": [124, 127, 130, 259, 638, 644, 852, 856], "24000001": [124, 638], "703": [125, 638], "683": [125, 638], "408": [125, 638], "313": [125, 638], "437": [125, 638], "40337825": [126, 638], "56114835": [126, 638], "20788449": [126, 638], "0768": [129, 638], "\u03b2": [130, 638], "body_fn": [134, 135, 137, 640], "bodi": [134, 137, 640, 839, 860], "lst": [134, 640], "orelse_fn": [135, 640], "body1": [136, 640], "body2": [136, 640], "test_fn": [137, 640, 789, 828, 875, 876], "repeatedli": [137, 640, 653, 742, 844, 860], "ml_framework": [138, 641], "distanc": [138, 641], "adjac": [138, 641], "nestedsequ": [139, 140, 641], "typevar": [139, 140, 641], "supportsbufferprotocol": [139, 140, 641], "static_copy_arrai": [141, 641], "intdtyp": [144, 155, 161, 173, 184, 189, 196, 202, 641, 642], "pycapsul": [145, 156, 641], "interchang": [145, 156, 641, 651, 726], "plu": [146, 641], "x00b": [146, 641], "x00d": [146, 641], "x00e": [146, 641], "41588834": [150, 641], "7827941": [150, 641], "6227766": [150, 641], "23413252": [150, 641], "n3": [151, 641], "xv": [151, 641], "yv": [151, 641], "x_nativ": [152, 641, 856], "y_nativ": [152, 641], "z_nativ": [152, 641], "d_type": [154, 641], "col": [159, 340, 381, 641], "primari": [159, 178, 179, 211, 212, 340, 381, 397, 527, 562, 563, 641, 642, 643, 646, 792, 794, 834, 838, 841, 845, 854, 856, 857, 859, 860, 863, 867, 869], "upward": [159, 340, 381, 641], "downward": [159, 340, 381, 641], "2xn": [159, 340, 381, 641], "subarrai": [159, 340, 381, 641], "closest": [169, 248, 258, 259, 295, 305, 642, 644, 860, 863], "xtype": [169, 642], "ytype": [169, 642], "native_uint16": [169, 642], "complexdtyp": [170, 184, 193, 642], "set_default_complex_dtyp": [170, 199, 642], "4294": [170, 172, 642], "967346": [170, 172, 642], "set_default_dtyp": [171, 200, 642, 845, 853], "floatdtyp": [172, 195, 642], "set_default_float_dtyp": [172, 181, 193, 201, 642, 845], "int_dtyp": [173, 196, 642], "set_default_int_dtyp": [173, 181, 202, 642, 845], "4294967346": [173, 174, 642], "uint_dtyp": [174, 197, 642], "uint": [174, 189, 197, 203, 642, 845, 858], "uintdtyp": [174, 189, 197, 203, 642], "set_default_uint_dtyp": [174, 181, 203, 642], "native_bool": [176, 642], "ieee": [177, 235, 252, 257, 275, 285, 294, 299, 302, 639, 642, 644], "754": [177, 235, 252, 257, 275, 285, 294, 299, 302, 639, 642, 644], "smallest_norm": [177, 642], "bfloat16": [178, 642, 791, 792, 845, 857, 860, 861], "unsupport": [179, 212, 563, 642, 643, 646, 786, 789, 832, 835, 850, 857], "encapsul": [180, 642, 844], "314": [180, 292, 350, 384, 642, 644], "9223372036854775808": [180, 642], "9223372036854775807": [180, 642], "65535": [180, 642], "4294967295": [180, 642], "native_uint8": [182, 642], "hashabl": [186, 642], "type1": [190, 642], "type2": [190, 642], "array_api_promot": [190, 191, 642, 791, 792], "unexpect": [191, 259, 642, 644, 845], "default_complex_dtyp": [193, 642], "default_dtype_stack": [194, 200, 642], "unset_default_dtyp": [194, 642], "native_uint64": [194, 642], "default_float_dtyp": [195, 642, 845], "default_int_dtyp": [196, 202, 642, 845], "default_uint_dtyp": [197, 203, 642], "ret1": [198, 642], "ret2": [198, 642], "default_complex_dtype_stack": [199, 642], "default_float_dtype_stack": [201, 642], "native_float16": [204, 642], "unmodifi": [206, 643, 841, 845], "aliv": [213, 218, 220, 566, 586, 587, 643, 646, 846], "139740789224448": [213, 643], "process_specif": [219, 231, 643], "percentag": [219, 643], "ram": [219, 227, 231, 643], "alon": [219, 231, 643, 851, 860], "036902561555": [219, 643], "7024003467681645": [219, 643], "as_native_dev": [219, 643], "7095597456708771": [219, 643], "attr_onli": [220, 643], "soft_device_mod": [222, 230, 643], "chunk": [223, 224, 225, 643], "split_factor": [223, 643, 849], "max_chunk_s": [225, 643], "chunk_siz": [225, 643], "input_ax": [225, 643], "output_ax": [225, 643], "fed": [225, 643], "fist": [225, 643], "gb": [227, 231, 643, 835, 850], "66700032": [227, 643], "589934592": [227, 643], "219563008": [231, 643], "902400346": [231, 643], "525205504": [231, 643], "na": [232, 644, 860], "noqa": [232, 299, 644, 807, 816, 858], "princip": [233, 237, 239, 371, 384, 644], "codomain": [233, 234, 237, 238, 239, 240, 249, 250, 255, 257, 273, 274, 276, 297, 298, 299, 302, 303, 371, 384, 644, 848], "\u03c0": [233, 237, 239, 240, 639, 644], "3\u03c0": [233, 240, 644], "unspecifi": [233, 234, 238, 241, 250, 255, 257, 259, 294, 298, 299, 303, 388, 441, 644, 649, 651, 684, 685, 725, 856], "\u03c0j": [234, 238, 241, 273, 275, 644], "3\u03c0j": [234, 273, 275, 644], "x1_i": [235, 240, 242, 244, 245, 246, 247, 252, 253, 259, 263, 264, 271, 272, 277, 279, 281, 282, 285, 288, 290, 294, 301, 644, 839], "2019": [235, 252, 257, 275, 285, 644, 878], "commut": [235, 644], "dj": [235, 252, 285, 644], "z1": [235, 644], "z2": [235, 644], "yj": [236, 644], "nanj": [238, 644], "809": [238, 644], "569": [238, 644], "733": [238, 644], "notat": [240, 644, 659, 774, 844], "denot": [240, 644, 809], "quadrant": [240, 644], "rai": [240, 644], "bitwis": [242, 245, 247, 282, 644], "170": [246, 644], "243": [246, 644], "xor": [247, 282, 644], "654": [249, 644], "ci": [250, 255, 257, 298, 644, 839, 845, 851, 858, 860, 867], "368": [250, 644], "670": [250, 644], "202": [250, 644, 839], "548": [250, 644], "1490": [250, 644], "57079633": [251, 644], "14159265": [251, 644], "71238898": [251, 644], "28318531": [251, 644], "02617994": [251, 644], "87266463": [251, 644], "01919862": [251, 644], "03839725": [251, 644], "05759586": [251, 644], "07679449": [251, 644], "09599311": [251, 644], "11519173": [251, 644], "35081118": [251, 644], "88139129": [251, 644], "underflow": [252, 259, 644, 649, 697, 845], "textbook": [252, 285, 644], "frac": [252, 274, 276, 296, 298, 302, 387, 393, 415, 416, 420, 421, 513, 515, 644], "ac": [252, 285, 644, 821, 822], "bd": [252, 285, 644], "bc": [252, 285, 644, 821, 822], "versu": [252, 285, 644], "riemann": [252, 285, 644], "sphere": [252, 285, 644], "c99": [252, 285, 644], "infinit": [252, 285, 299, 644], "unlik": [252, 285, 644, 839, 844, 847], "698": [252, 644], "truth": [253, 263, 264, 271, 272, 288, 389, 465, 644, 786, 788, 799, 832, 850, 857, 860], "32862675": [254, 644], "67780113": [254, 644], "11246294": [254, 644], "42839241": [254, 644], "52050018": [254, 644], "16799599": [254, 644], "30787992": [254, 644], "43796915": [254, 644], "98667163": [254, 644], "79690808": [254, 644], "88020504": [254, 644], "91031402": [254, 644], "95228523": [254, 644], "96610528": [254, 644], "cut": [255, 257, 297, 298, 299, 302, 644, 871], "08553692": [255, 644], "567": [255, 644], "00344786": [255, 644], "76297021": [255, 644], "197948": [255, 644], "53253174": [255, 644], "fdlibm": [257, 275, 644], "compliant": [257, 275, 280, 281, 347, 348, 384, 644, 659, 775, 776, 777, 779], "potenti": [257, 275, 644, 828, 834, 835, 844, 845, 857, 864], "632": [257, 644], "20e": [257, 644], "72e": [257, 644, 791], "greatest": [258, 259, 262, 644], "pep": [259, 644, 852], "disambigu": [259, 644, 855], "former": [259, 644, 835, 845, 848, 857], "latter": [259, 644, 835, 839, 841, 845, 848, 857], "overload": [259, 644, 860], "led": [259, 644, 839], "subtl": [259, 644, 845], "bug": [259, 644, 828, 834, 836, 842, 850, 851, 857, 860, 868], "ambigu": [259, 644], "semant": [259, 294, 390, 504, 644, 845, 865, 879], "ill": [259, 644, 793], "surpris": [259, 644, 867], "arrau": [265, 644], "log_": [274, 276, 644], "742": [275, 644], "negat": [287, 350, 384, 644], "52095687": [290, 644], "92457771": [290, 644], "49372482": [290, 644], "22738838": [290, 644], "5877228": [290, 644], "189": [291, 644, 653, 733], "252": [291, 644], "2890": [291, 644], "344": [291, 644], "355j": [292, 350, 384, 644], "55j": [292, 350, 384, 644], "primarili": [294, 644, 834, 843, 878, 880], "counterpart": [295, 644, 843, 854], "deliber": [295, 644, 863], "imprecis": [295, 644], "5654": [295, 644], "034": [295, 644], "433": [295, 630, 632, 644, 647], "signum": [296, 644], "textrm": [296, 644], "932": [297, 644], "746": [297, 644], "657": [297, 644], "indistinguish": [299, 644], "infti": [299, 644], "32455532": [299, 644], "89897949": [299, 644], "169": [299, 644], "analyt": [302, 644, 878], "pole": [302, 644], "546": [302, 644, 648, 672], "916": [302, 644], "996": [302, 644], "histor": [303, 644], "stem": [303, 644, 856], "older": [303, 644], "advis": [303, 644, 857], "462": [303, 644], "604": [303, 644], "997": [303, 644], "0375": [305, 644], "032": [305, 644], "57258511": [308, 379], "69999999": [308, 379, 637, 647], "90928203": [308, 379], "98772264": [308, 379], "99591321": [308, 379], "99863964": [308, 379], "69880581": [308, 379], "18126924": [308, 379], "79999995": [309, 319, 322, 379], "70000005": [309, 322, 379], "1241": [310, 379], "4897": [310, 379], "4090": [310, 379], "31008321": [310, 379], "1147176": [310, 379], "40899992": [310, 379], "20141329": [313, 379], "40318608": [313, 379], "48683619": [313, 379], "46328247": [313, 379], "59813893": [313, 379], "43748799": [313, 379], "parametr": [314, 379, 839, 860, 878], "71589994": [316, 320, 379], "14324772": [316, 320, 379], "70648694": [316, 320, 379], "54488957": [316, 320, 379], "10740992": [316, 320, 379], "19514863": [316, 320, 379], "6705687": [317, 379], "52016652": [317, 379], "40560818": [317, 379], "45630932": [317, 379], "2689": [318, 379], "7310": [318, 379], "7615": [318, 379], "2784": [318, 379], "7168": [318, 379], "8708": [318, 379], "4374": [318, 379], "1379": [318, 379], "0089": [318, 379], "59999991": [319, 379], "03597236": [321, 379], "43827677": [321, 379], "80100036": [321, 379], "12954807": [321, 379], "76459098": [321, 379], "20044947": [321, 379], "60000372": [321, 379], "taper": [324, 327, 381], "summat": [324, 381, 659, 774, 821, 822], "leakag": [324, 381], "wors": [324, 381], "y1": [325, 381], "0800": [326, 381], "3979": [326, 381], "9121": [326, 381], "5400": [326, 381], "han": [327, 381], "ith": [328, 381], "00726415": [329, 381], "9999736": [329, 381], "2773e": [330, 381], "0172e": [330, 381], "9294e": [330, 381], "4149": [330, 381], "9138": [330, 381], "5529": [330, 381], "multidimension": [332, 333, 381, 878], "normalise_factor": [335, 336, 381], "parafac2": [336, 381], "tr": [337, 381], "38268346": [345, 381], "38268352": [345, 381], "8563191": [345, 381], "14943568": [345, 381], "paddlepaddl": [347, 348, 384, 835], "cn": [347, 348, 384], "zh": [347, 348, 384], "amax_cn": [347, 384], "sentinel": [347, 348, 384, 659, 775, 777], "amin_cn": [348, 384], "4769": [356, 384], "position": [358, 384], "triangl": [362, 384], "999999e": [363, 384], "65999985": [365, 384], "52000046": [365, 384], "1500001": [365, 384, 558, 646], "11259177": [366, 384], "3574118": [366, 384], "20097363": [366, 384], "suppli": [370, 384, 390, 496, 821, 840, 842, 860], "217234": [371, 384], "hurwitz": [374, 384], "custom_grad_func": [376, 386], "bind": [376, 386, 834, 855, 878, 880], "upstream": [376, 386, 835, 836, 839, 850, 855], "primal": [377, 378, 386], "jacobian": [377, 378, 386, 632, 647, 867, 878], "cotang": [378, 386], "stanh": 379, "ndenumer": 381, "ndindex": 381, "random_cp": 381, "random_parafac2": 381, "random_tr": 381, "random_tt": 381, "random_tuck": 381, "bind_custom_gradient_funct": [386, 855], "jvp": 386, "vjp": 386, "h_out": [387, 404, 648, 673], "w_out": [387, 404], "area_interpol": 387, "01823380e": [387, 409, 419], "15385818e": [387, 409, 419], "36371466e": [387, 409, 419], "38763905e": [387, 409, 419], "60722279e": [387, 409, 419], "80319249e": [387, 409, 419], "05617893e": [387, 409, 419], "21500000e": [387, 409, 419], "24000015e": [387, 409, 419], "90734863e": [387, 409, 419], "10000420e": [387, 409, 419], "15899994e": [387, 409, 419], "24000053e": [387, 409, 419], "81469727e": [387, 409, 419], "09999847e": [387, 409, 419], "4135742": [387, 409, 419], "6779785": [387, 409, 419], "3770599": [387, 409, 419], "8719864": [387, 409, 419], "72109985": [387, 409, 419], "52869415": [387, 409, 419], "79182434": [387, 409, 419], "72489166": [387, 409, 419], "container_n": [387, 409, 419], "container_typ": [387, 409, 419, 646], "container_norm": [387, 409, 419], "1580677": [387, 409], "89422607": [387, 409], "86190414": [387, 409], "00041008": [387, 409], "75149155": [387, 409], "97056389": [387, 409], "87819386": [387, 409], "89381361": [387, 409], "50000000e": [387, 409, 419, 791], "22044605e": [387, 409, 419], "ed": [387, 411, 412, 413], "rest": [387, 390, 411, 412, 413, 482, 835, 842, 844, 860, 866], "5d": [387, 413, 807], "emb": [387, 414], "51285338": [387, 414], "87183261": [387, 414], "2308116": [387, 414], "02733949e": [387, 415], "00j": [387, 415], "49660576e": [387, 415], "68178638e": [387, 415], "01j": [387, 415, 420], "98912367e": [387, 415], "21802426e": [387, 415, 420], "04549134e": [387, 415, 420], "82842712e": [387, 415, 420], "86902654e": [387, 415, 420], "25501143e": [387, 415, 420], "32978028e": [387, 415, 420], "52068201e": [387, 415, 420], "71158374e": [387, 415, 420], "generate_einsum_equ": 387, "get_interpolate_kernel": 387, "27279224e": [387, 419], "44232273e": [387, 419], "70464332e": [387, 419], "73454881e": [387, 419], "00902849e": [387, 419], "10039906e": [387, 419], "07022366e": [387, 419], "69506073": [387, 419], "93914604": [387, 419], "88008881": [387, 419], "18951607": [387, 419], "57439613": [387, 419], "15318303e": [387, 420], "15148591e": [387, 420], "19j": [387, 420], "25000000e": [387, 420], "35378602e": [387, 420], "02j": [387, 420], "65404249e": [387, 420], "17611649e": [387, 420], "24320230e": [387, 420], "79344813e": [387, 420], "22374531e": [387, 420], "45929364e": [387, 420], "14208718e": [387, 420], "07177031e": [387, 420], "indexerror": [387, 421, 432, 651, 717, 823, 849], "interp": [387, 863], "xp": [387, 422, 839], "fp": [387, 422], "nd": [387, 423], "tf_bicub": [387, 423, 863], "nearest_interpol": 387, "window_shap": [387, 429], "pool_typ": [387, 429], "irfft": [387, 431], "silent": [387, 431], "discard": [387, 431, 844], "1400001": [387, 431], "3999999": [387, 431], "3999996": [387, 431], "99038106j": [387, 432], "33012702": [387, 432], "23205081j": [387, 432], "33012702j": [387, 432], "superdiagon": [388, 439, 649, 682], "subdiagon": [388, 439, 649, 682], "eigendecomposit": [388, 441, 649, 684, 685], "qlq\u1d40": [388, 441, 649, 684, 685], "tridiagon": [388, 442], "38196602": [388, 442], "61803389": [388, 442], "35048741": [388, 442], "56710052": [388, 442], "06693714": [388, 442], "74234426": [388, 442], "56155282": [388, 442], "56155276": [388, 442], "82842714": [388, 442], "82842731": [388, 442, 649, 685], "necessarili": [388, 443, 840, 843], "generalis": [388, 444], "skip_matrix": [388, 447, 449], "khatri_rao_product": [388, 447], "kronecker_product": [388, 449], "n_column": [388, 449], "lu_factor": 388, "pivot": [388, 450], "lu": [388, 450, 451], "lu_solv": 388, "nnmf": [388, 452], "hoi": [388, 457, 463], "solve_triangular": 388, "unit_diagon": [388, 458], "solut": [388, 458, 649, 698, 791, 828, 832, 834, 835, 836, 843, 845, 850, 858, 860, 863, 880], "determinist": [388, 459, 860], "borrow": [388, 459, 838], "extmath": [388, 459], "ivan": [388, 460], "oseledet": [388, 460], "scientif": [388, 460, 878], "2295": [388, 460], "2317": [388, 460], "2011": [388, 460], "convention": [389, 466], "explicit": [389, 390, 466, 504, 835, 843, 845, 855, 856, 857, 865, 867, 878], "555969": [389, 466], "223876": [389, 466], "111938": [389, 466], "42649534": [389, 466], "68651628": [389, 466], "51119184": [389, 466], "59967244": [389, 466], "mae": [389, 467], "666": [389, 467, 648, 649, 672, 690], "91097307": [389, 469], "3467": [389, 470], "0133": [389, 470], "0250": [389, 470], "0056": [389, 470], "0025": [389, 470], "0675": [389, 470], "6987": [389, 471], "1606": [389, 471], "4032": [389, 471], "6931": [389, 471], "whilst": [390, 474, 475, 476, 869, 878], "ary3": [390, 476], "check_scalar": 390, "force_integ": [390, 478], "force_posit": [390, 478], "mod": [390, 479, 839], "tall": [390, 485], "horizot": [390, 492], "shortcut": [390, 496, 835], "linear_ramp": [390, 496], "reflect": [390, 496, 836, 840, 856, 860], "ramp": [390, 496], "mirror": [390, 496, 831, 834, 878], "padding_func": [390, 496], "iaxis_pad_width": [390, 496], "iaxi": [390, 496], "unalt": [390, 496], "put": [390, 501, 834, 860, 867], "mul": [390, 501, 828, 856], "conceptu": [390, 504, 879], "concern": [390, 504, 836, 838, 843, 845, 847, 856, 863, 864], "regard": [390, 504, 833, 843, 857, 858, 863], "mutat": [390, 504], "elimin": [390, 510, 835], "consecut": [390, 510], "batch_mean": [393, 513, 515], "batch_var": [393, 513, 515], "running_vari": [393, 513, 515], "local_response_norm": 393, "neighbour": [393, 518], "42857143": [393, 519], "5714286": [393, 519], "multivari": [394, 522], "bayesian": [394, 522], "supposedli": [397, 526], "indirect": [397, 527], "secondari": [397, 527], "is_ivy_sparse_arrai": 398, "is_native_sparse_arrai": 398, "native_sparse_arrai": 398, "coo_indic": [398, 530], "crow_indic": [398, 530], "col_indic": [398, 530], "ccol_indic": [398, 530], "row_indic": [398, 530], "dense_shap": [398, 530], "native_sparse_array_to_indices_values_and_shap": 398, "nativesparsearrai": 398, "sparsearrai": 398, "sparse_arrai": 398, "linalg": [399, 534, 649, 697, 698, 834, 856, 858], "aw": [399, 534], "48447205": [399, 534], "c0": [399, 537], "ck": [399, 537], "c2": [399, 537], "nearest_jax": [399, 544], "trace_on_next_step": [548, 646, 811], "recalcul": [551, 646], "my_sum": [551, 646], "val1": [551, 646], "val2": [551, 646], "cached_sum": [551, 646], "line_eq": [551, 646], "slp": [551, 646], "itc": [551, 646], "cached_line_eq": [551, 646], "0353": [552, 646], "424": [552, 646], "339": [552, 646], "271": [552, 646], "391": [552, 646], "78885436": [553, 646], "41666666": [553, 646], "58333331": [553, 646], "06666667": [553, 646], "13333334": [553, 646], "40000004": [553, 646], "26666668": [553, 646], "13137734": [553, 646], "26275468": [553, 646], "39413199": [553, 646], "52550936": [553, 646], "6568867": [553, 646], "78826398": [553, 646], "84852815": [553, 646], "1313709": [553, 646], "41421366": [553, 646], "27279221": [553, 646], "69705628": [553, 646], "12132034": [553, 646], "default_str": [556, 646], "46999979": [557, 646], "66000009": [557, 646], "93000001": [557, 646], "29000092": [557, 646], "33999991": [557, 646], "6400001": [557, 646], "96000004": [557, 646], "36000013": [557, 646], "51999998": [557, 646], "67000008": [557, 646], "suppos": [557, 646, 845, 860], "960": [557, 646], "3600": [557, 646], "h1": [557, 646], "w1": [557, 646], "40499985": [558, 646], "61000061": [558, 646], "max_depth": [569, 646], "seen_set": [569, 646], "local_set": [569, 646], "referr": [569, 646], "redund": [569, 646, 828, 845, 849, 857, 874], "example_funct": [569, 646], "repr": [569, 646], "allow_dupl": [584, 646], "fork": [585, 646, 829, 839, 844, 850], "forkserv": [585, 646], "mp_default": [585, 646], "defaultcontext": [585, 646], "0x7f4e3193e520": [585, 646], "mp_fork": [585, 646], "forkcontext": [585, 646], "0x7f4e3193e580": [585, 646], "mp_spawn": [585, 646], "spawncontext": [585, 646], "0x7f4e3193e5e0": [585, 646], "mp_forkserv": [585, 646], "forkservercontext": [585, 646], "0x7f4e3193e640": [585, 646], "garbag": [587, 646], "collector": [587, 646], "get_all_arrays_in_memori": [587, 646], "exception_trace_mod": [591, 615, 646, 862], "lenient": [592, 616, 646], "inplace_mod": [592, 616, 646], "break": [592, 646, 841, 845, 852, 861, 867], "infus": [593, 646], "unset": [594, 601, 646, 649, 697, 816, 841, 865], "unset_min_bas": [594, 646], "nestable_mod": [596, 619, 646, 862], "precise_mod": [597, 620, 646, 862], "shape_array_mod": [599, 622, 646, 862], "show_func_wrapper_trace_mod": [600, 623, 646, 862], "tmp_dr": [601, 646], "tmp_dir": [601, 624, 646, 862], "my_tmp": [601, 646], "unset_tmp_dir": [601, 646], "49999999999975": [604, 646], "5015015015010504": [604, 646], "000444502911705e": [604, 646], "9999999999995j": [604, 646], "00000262": [605, 646], "15605032": [605, 646], "01208451j": [605, 646], "00048": [605, 646], "1296": [605, 646], "00864": [605, 646], "isn": [607, 646, 831, 836, 854, 856, 860, 867], "100000023841858": [609, 646], "200000047683716": [609, 646], "299999952316284": [609, 646], "400000095367432": [609, 646], "599999904632568": [609, 646], "hemant": [613, 646], "unset_shape_array_mod": [614, 646], "set_exception_trace_mod": [615, 646, 849], "set_min_bas": [617, 646], "set_min_denomin": [618, 646], "set_nestable_mod": [619, 646], "set_precise_mod": [620, 646], "set_queue_timeout": [621, 646], "set_shape_array_mod": [622, 646], "set_show_func_wrapper_trace_mod": [623, 646, 849], "set_tmp_dir": [624, 646], "my_dir": [624, 646], "451": [625, 646], "in_ax": [626, 646], "out_ax": [626, 646], "thereof": [626, 646], "summaris": [626, 646], "99999998": [627, 647], "19999998": [627, 647], "00000001": [627, 647], "00300001": [627, 647], "00800001": [627, 647], "0125": [627, 647], "17294501": [627, 647], "15770318": [627, 647], "20863818": [627, 647], "90000075": [628, 647], "90000164": [628, 647], "9000032": [628, 647], "50000012e": [628, 647], "92558754": [628, 647], "92558694": [628, 647], "92558682": [628, 647], "92558861": [628, 647], "60000025e": [628, 647], "01024": [628, 647], "retain_grad": [629, 647], "func_ret": [629, 647, 855], "666666": [629, 647], "333332": [629, 647], "66666675": [629, 637, 647], "argnum": [630, 647], "933": [630, 632, 647], "jac_fn": [632, 647], "639": [633, 647], "361": [633, 647], "52565837": [634, 647], "8418861": [634, 647], "68377209": [634, 647], "value_grad": [637, 647], "42333412": [637, 647], "5333333": [637, 647], "93333334": [637, 647], "43333334": [637, 647], "0666666": [637, 647], "softsign": 638, "718281828459045": 639, "euler": 639, "141592653589793": 639, "cmp_i": 640, "cmp_isnot": 640, "for_loop": 640, "if_els": 640, "try_except": 640, "control_flow_op": 640, "to_dlpack": 641, "as_ivy_dtyp": [642, 857], "as_native_dtyp": 642, "check_float": 642, "closest_valid_dtyp": 642, "default_dtyp": [642, 845, 853], "dtype_bit": 642, "function_supported_dtyp": [642, 845, 860], "function_unsupported_dtyp": [642, 845], "infer_default_dtyp": 642, "invalid_dtyp": [642, 845], "is_hashable_dtyp": 642, "is_native_dtyp": 642, "promote_typ": [642, 845], "promote_types_of_input": [642, 845, 856], "type_promote_arrai": [642, 845], "unset_default_complex_dtyp": 642, "unset_default_float_dtyp": 642, "unset_default_int_dtyp": 642, "unset_default_uint_dtyp": 642, "valid_dtyp": 642, "defaultcomplexdtyp": 642, "defaultdtyp": 642, "defaultfloatdtyp": 642, "defaultintdtyp": 642, "defaultuintdtyp": 642, "as_ivy_dev": 643, "clear_cached_mem_on_dev": 643, "dev_util": [643, 846], "function_supported_devic": 643, "function_unsupported_devic": 643, "get_all_ivy_arrays_on_dev": [643, 846], "handle_soft_device_vari": [643, 846], "num_cpu_cor": [643, 846], "num_gpu": [643, 846, 860], "num_ivy_arrays_on_dev": 643, "percent_used_mem_on_dev": 643, "print_all_ivy_arrays_on_dev": 643, "set_split_factor": [643, 849], "split_func_cal": 643, "total_mem_on_dev": [643, 846], "tpu_is_avail": 643, "unset_default_devic": [643, 846], "unset_soft_device_mod": [643, 846], "used_mem_on_dev": 643, "defaultdevic": [643, 846], "save_dir": 643, "arg_info": 646, "arg_nam": 646, "cache_fn": [646, 853], "current_backend_str": [646, 860, 865], "function_supported_devices_and_dtyp": 646, "function_unsupported_devices_and_dtyp": 646, "get_item": [646, 856], "get_referrers_recurs": 646, "inplace_arrays_support": 646, "inplace_variables_support": 646, "is_ivy_nested_arrai": 646, "isscalar": 646, "match_kwarg": 646, "num_arrays_in_memori": 646, "print_all_arrays_in_memori": 646, "set_item": [646, 860], "to_ivy_shap": 646, "to_native_shap": 646, "try_else_non": 646, "unset_array_mod": [646, 862], "unset_exception_trace_mod": 646, "unset_inplace_mod": 646, "unset_min_denomin": 646, "unset_nestable_mod": 646, "unset_precise_mod": 646, "unset_queue_timeout": 646, "unset_show_func_wrapper_trace_mod": 646, "vmap": [646, 867, 878], "arraymod": 646, "precisemod": [646, 845], "jac": 647, "value_and_grad": [647, 855], "feature_group_count": [648, 661, 668, 669], "oiw": [648, 661, 662, 668], "oihw": [648, 661, 664, 668], "oidhw": [648, 661, 666, 668], "dhwio": [648, 661, 662, 666, 668], "conv_general_dil": [648, 857], "conv_general_transpos": 648, "depthwis": [648, 670, 793, 807], "1428566": [648, 671], "49000001": [648, 671], "55599999": [648, 671], "21000004": [648, 671], "incom": [648, 672], "4269": [648, 672], "911": [648, 672, 849], "157": [648, 672], "753": [648, 672], "545": [648, 655, 672, 756], "547": [648, 672, 846], "963": [648, 672], "98495483": [648, 672], "0293808": [648, 672], "0159359": [648, 672], "74752808": [648, 672], "20942307": [648, 672], "3205719": [648, 672], "all_weight": [648, 673], "num_lay": [648, 673, 807], "batch_first": [648, 673, 675], "weights_transpos": [648, 673], "has_ih_bia": [648, 673], "has_hh_bia": [648, 673], "multi": [648, 649, 673, 675, 680, 793, 807, 847, 867, 878], "long": [648, 673, 674, 835, 836, 844, 845, 847, 849, 850, 857, 865, 878], "seq_len": [648, 673], "input_s": [648, 673], "h_0": [648, 673], "c_0": [648, 673], "num_direct": [648, 673], "hidden_s": [648, 673], "four": [648, 673, 831, 840, 845, 847, 852, 853, 860, 863], "w_ih": [648, 673], "w_hh": [648, 673], "b_ih": [648, 673], "b_hh": [648, 673], "c_out": [648, 673], "vaswani": [648, 675], "al": [648, 675], "num_attention_head": [648, 675], "key_dim": [648, 675, 807], "value_dim": [648, 675, 807], "attention_weight": [648, 675], "unbatch": [648, 675], "nm": 648, "box": [648, 676, 677, 835], "iou_threshold": [648, 676], "max_output_s": [648, 676], "score_threshold": [648, 676], "roi_align": 648, "spatial_scal": [648, 677], "sampling_ratio": [648, 677], "23333359": [648, 678], "03946018": [648, 678], "0280633": [648, 678], "29981947": [648, 678], "29981089": [648, 678], "06345534": [648, 678], "9634552": [648, 678], "19336844": [648, 678], "09336829": [648, 678], "axisa": [649, 680], "axisb": [649, 680], "axisc": [649, 680], "293": [649, 681], "46997": [649, 681], "17157288": [649, 685], "9238795": [649, 685], "78930789": [649, 685], "59803128": [649, 685], "19127655": [649, 685], "31213903": [649, 685], "63418275": [649, 685], "84632206": [649, 685], "70548367": [649, 685], "70223427": [649, 685], "09570674": [649, 685], "63116378": [649, 685], "56109613": [649, 685], "53554028": [649, 685], "32237405": [649, 685], "43822157": [649, 685], "83906901": [649, 685], "50766778": [649, 685], "71475857": [649, 685], "48103389": [649, 685], "3676433": [649, 685], "62933773": [649, 685], "77917379": [649, 685], "14264561": [649, 685], "61036086": [649, 685], "45033181e": [649, 686], "02829754e": [649, 686], "54220343e": [649, 686], "12647155e": [649, 686], "38447177e": [649, 686], "56155300e": [649, 686], "26794919": [649, 686], "7320509": [649, 686], "0012": [649, 688], "00342": [649, 688], "000565": [649, 688], "0104": [649, 688], "000981": [649, 688], "00282": [649, 688], "000766": [649, 688], "0322": [649, 688], "00237": [649, 688], "000151": [649, 688], "00101": [649, 688], "00019": [649, 688], "0214": [649, 688], "00171": [649, 688], "0107": [649, 688], "0167": [649, 688], "0472": [649, 688], "0536": [649, 688], "0177": [649, 688], "000429": [649, 688], "00762": [649, 688], "frobeniu": [649, 690], "nuclear": [649, 690], "induc": [649, 690], "ranl": [649, 690], "47722558": [649, 690], "776": [649, 690], "6000004": [649, 690], "118": [649, 691], "moor": [649, 695], "penros": [649, 695], "31622776": [649, 696], "94868332": [649, 696], "1622777": [649, 696], "42718887": [649, 696], "deteremin": [649, 697], "logsabsdet": [649, 697], "subject": [649, 697], "unset_backend": [649, 697, 816, 841], "ordin": [649, 698], "b2": [649, 698], "usvh": [649, 699], "cetera": [649, 699], "driver": [649, 700, 867], "gesvd": [649, 700], "gesvdj": [649, 700], "gesvda": [649, 700], "86217213": [649, 700], "31816804": [649, 700], "615": [649, 700], "ss": [649, 700], "25994301": [649, 700], "16403675": [649, 700], "61529762": [649, 700], "51231241": [649, 700], "39777088": [649, 700], "15413129": [649, 700], "1029852": [649, 700], "01383495": [649, 700], "86647356": [649, 700], "7786541": [649, 700], "55970621": [649, 700], "16857576": [649, 700], "86412698": [649, 700], "37566757": [649, 700], "88477993": [649, 700], "95925522": [649, 700], "6444726": [649, 700], "54687881": [649, 700], "16134834": [649, 700], "35037804": [649, 700], "31025076": [649, 700], "35769391": [649, 700], "transposit": [649, 701], "0x": [649, 704], "Such": [649, 704, 853, 860], "alexandr": [649, 704], "theophil": [649, 704], "dot_product": [649, 705], "9000001": [649, 706], "64158917": [649, 706], "skew": [649, 707], "60309976": [650, 708], "6666193": [650, 708], "01348412": [650, 708], "05393649": [650, 708], "49992943": [650, 708], "83330965": [650, 708], "02136981": [650, 708], "32844672": [650, 708], "26561815": [650, 708], "22314337": [650, 708], "08916873": [650, 709, 710], "44832274": [650, 710], "75646281": [650, 710], "13862944": [650, 710], "57564628": [650, 710], "ssim_loss": 650, "ssim": [650, 711], "99989986": [650, 711], "wasserstein_loss_discrimin": 650, "p_real": [650, 712], "p_fake": [650, 712], "wasserstein": [650, 712, 713], "discrimin": [650, 712], "wasserstein_loss_gener": 650, "pred_fak": [650, 713], "honor": [651, 721], "beyond": [651, 722, 828, 848, 857], "famili": [651, 725], "intxx": [651, 725], "floatxx": [651, 725], "rep": [651, 727], "fomaml_step": 652, "inner_cost_fn": [652, 730, 731, 732], "outer_cost_fn": [652, 730, 731], "inner_grad_step": [652, 730, 731, 732], "inner_learning_r": [652, 730, 731, 732], "inner_optimization_step": [652, 730, 731, 732], "inner_batch_fn": [652, 730, 731], "outer_batch_fn": [652, 730, 731], "average_across_step": [652, 730, 731], "inner_v": [652, 730, 731], "keep_inner_v": [652, 730, 731], "outer_v": [652, 730, 731], "keep_outer_v": [652, 730, 731], "return_inner_v": [652, 730, 731, 732], "num_task": [652, 730, 731, 732], "maml": [652, 730, 731], "0x7efffa179870": [652, 730, 731, 732], "maml_step": 652, "vanilla": [652, 731, 878], "_variabl": [652, 731, 732], "sub_batch": [652, 731], "40069818": [652, 731], "13723135": [652, 731], "reptile_step": 652, "cost_fn": [652, 732], "reptil": [652, 732], "batch_in": [652, 732], "4485182": [652, 732], "139": [652, 732], "9569855": [652, 732], "9880483": [652, 732], "01766968": [652, 732], "02197957": [652, 732], "02197981": [652, 732], "all_nested_indic": 653, "include_nest": [653, 733], "_index": [653, 733, 744], "_base": [653, 733, 743, 744, 856], "themselv": [653, 733, 843, 845, 846, 848, 853, 857], "863": [653, 733, 846], "672": [653, 733], "482": [653, 733], "674": [653, 733], "341": [653, 733], "copy_nest": 653, "to_mut": [653, 734, 745], "deepli": [653, 734, 837, 867, 878], "copied_nest": [653, 734], "1337": [653, 734, 745], "duplicate_array_index_chain": 653, "index_nest": [653, 853], "insert_into_nest_at_index": 653, "insert_into_nest_at_indic": 653, "special_squar": [653, 739], "6666666666666667": [653, 739], "special_pow": [653, 739], "linear_model": [653, 739], "map_nest_at_index": 653, "_result": [653, 740, 750], "hh": [653, 740, 745], "map_nest_at_indic": 653, "ub": [653, 741], "tb": [653, 741], "multi_index_nest": 653, "nested_ani": 653, "check_nest": [653, 743, 744], "nested_argwher": 653, "stop_after_n_found": [653, 744], "nested_indic": [653, 744], "nested_map": [653, 846, 853], "_tuple_check_fn": [653, 745], "_list_check_fn": [653, 745], "_dict_check_fn": [653, 745], "wherebi": [653, 745, 834], "ah": [653, 745], "bh": [653, 745], "ch": [653, 745], "dh": [653, 745, 839], "eh": [653, 745], "gh": [653, 745, 835, 850], "ih": [653, 745], "1338": [653, 745], "nested_multi_map": 653, "index_chain": [653, 746], "nest0": [653, 746], "ivy_arrai": [653, 746, 840, 857], "unappli": [653, 746], "prune_empti": 653, "prune_nest_at_index": 653, "prune_nest_at_indic": 653, "set_nest_at_index": 653, "set_nest_at_indic": 653, "xyz": [653, 751], "pqr": [653, 751], "mini": [654, 752, 807, 810], "uniformli": [655, 754, 756], "22346112": [655, 755], "0922": [655, 755], "9213753": [655, 755], "12818667": [655, 755], "799": [655, 755], "469": [655, 755], "287": [655, 755], "0366": [655, 755], "26431865": [655, 756], "475": [655, 756], "878": [655, 756], "861": [655, 756], "929": [655, 756], "789": [655, 756], "519": [655, 756], "0435": [655, 756], "381": [655, 756], "4608004": [655, 756], "8458502": [655, 756], "67270088": [655, 756], "31128597": [655, 756], "394": [655, 758], "zeroel": [656, 762], "fourth": [657, 764], "1141": [657, 764], "8101": [657, 764], "9298": [657, 764], "8460": [657, 764], "2119": [657, 764], "3519": [657, 764], "6252": [657, 764], "4033": [657, 764], "7443": [657, 764], "2577": [657, 764], "3707": [657, 764], "0545": [657, 764], "3238": [657, 764], "5944": [657, 764], "0775": [657, 764], "4327": [657, 764], "62519997": [657, 764], "40329999": [657, 764], "59439999": [657, 764], "74430001": [657, 764], "81010002": [657, 764], "84600002": [657, 764], "92979997": [657, 764], "einstein": [659, 774, 821], "117": [659, 774], "intend": [659, 780, 789, 806, 839, 852, 855, 878], "07472222": [659, 781], "00666667": [659, 781], "08966666": [659, 781], "simplicit": [660, 782, 783], "ivy_test": [786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 834, 835, 836, 839, 842, 844, 850, 858], "test_ivi": [786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 834, 835, 836, 842, 844, 850, 858, 860], "assert_all_clos": [786, 858], "ret_np": [786, 788, 858], "ret_from_gt_np": [786, 858], "ground_truth_backend": [786, 788, 789, 798, 799, 832, 850, 858], "mark": [786, 831, 834, 836, 839, 860, 865], "assert_same_typ": 786, "ret_from_target": 786, "ret_from_gt": 786, "backend_to_test": [786, 788, 832, 850, 858], "gt_backend": 786, "with_backend": [786, 816], "assert_same_type_and_shap": 786, "this_key_chain": 786, "check_unsupported_devic": 786, "input_devic": 786, "all_as_kwargs_np": [786, 788], "check_unsupported_device_and_dtyp": 786, "input_dtyp": [786, 788, 798, 832, 850, 858, 860], "check_unsupported_dtyp": 786, "test_unsupported_funct": 786, "value_test": 786, "ret_np_flat": 786, "ret_np_from_gt_flat": 786, "specific_tolerance_dict": 786, "ret_from_np_gt_flat": 786, "available_framework": 787, "function_test": 788, "args_to_contain": 788, "array_arg": [788, 853], "args_to_frontend": 788, "frontend_array_fn": 788, "arrays_to_frontend": 788, "as_list": 788, "convtru": 788, "nativeclass": 788, "counter": 788, "create_args_kwarg": 788, "args_np": 788, "arg_np_val": 788, "args_idx": 788, "kwargs_np": 788, "kwarg_np_val": 788, "kwargs_idx": 788, "test_flag": [788, 832, 850, 858, 860], "on_devic": [788, 798, 832, 850, 858], "flatten_and_to_np": 788, "flatten_frontend": 788, "flatten_frontend_fw_to_np": 788, "frontend_ret": [788, 858], "isscalar_func": 788, "is_native_array_func": 788, "to_numpy_func": 788, "flatten_frontend_to_np": 788, "get_frontend_ret": 788, "frontend_fn": 788, "frontend_array_funct": 788, "precision_mod": [788, 798, 799, 850], "test_trac": [788, 798, 799, 832, 839, 850], "test_trace_each": [788, 798, 799], "get_ret_and_flattened_np_arrai": 788, "gradient_incompatible_funct": 788, "gradient_test": [788, 860], "rtol_": [788, 832, 850], "atol_": [788, 832, 850, 858], "tolerance_dict": 788, "gradient_unsupported_dtyp": 788, "kwargs_to_args_n_kwarg": 788, "num_positional_arg": [788, 798, 799, 832, 850, 858, 860], "port": 788, "test_frontend_funct": [788, 858], "fn_tree": [788, 789, 799, 832, 850, 857, 858, 860], "gt_fn_tree": [788, 799], "test_valu": [788, 858, 860], "frontend_function_flag": [788, 798], "functiontestflag": [788, 798, 832, 850], "with_out": [788, 798, 832, 850, 858, 860], "instance_method": [788, 798, 832, 850, 860], "as_vari": [788, 798, 832, 850, 858, 860], "namespac": [788, 834, 845, 854, 857, 858, 861, 865], "arg_": 788, "test_frontend_method": [788, 858], "init_input_dtyp": [788, 858], "method_input_dtyp": [788, 858], "init_flag": [788, 858, 860], "method_flag": [788, 798, 858, 860], "init_all_as_kwargs_np": [788, 858], "method_all_as_kwargs_np": [788, 858], "frontend_method_data": [788, 858], "init_as_variable_flag": [788, 799], "dictat": [788, 840, 847, 852, 856], "init_num_positional_arg": [788, 799], "init_native_array_flag": 788, "with_v": 788, "ret_gt": 788, "test_funct": [788, 832, 835, 836, 844, 850, 858, 860], "fn_name": [788, 789, 799, 832, 841, 850, 858, 860], "return_flat_np_arrai": 788, "as_variable_flag": [788, 799, 860], "native_array_flag": [788, 799, 860], "container_flag": [788, 798, 799, 860], "test_function_backend_comput": 788, "test_function_ground_truth_comput": 788, "arg_np_arrai": 788, "arrays_args_indic": 788, "arrays_kwargs_indic": 788, "kwarg_np_arrai": 788, "test_gradient_backend_comput": 788, "test_gradient_ground_truth_comput": 788, "test_method": 788, "method_nam": [788, 797, 799, 858], "init_with_v": 788, "method_with_v": 788, "test_gradi": [788, 798, 799, 832, 850, 860], "method_as_variable_flag": [788, 799], "method_num_positional_arg": [788, 799], "method_native_array_flag": 788, "method_container_flag": [788, 799], "test_method_backend_comput": 788, "test_method_ground_truth_comput": 788, "org_con_data": 788, "args_np_method": 788, "met_arg_np_v": 788, "met_args_idx": 788, "kwargs_np_method": 788, "met_kwarg_np_v": 788, "met_kwargs_idx": 788, "v_np": 788, "traced_if_requir": 788, "wrap_frontend_function_arg": 788, "holder": 789, "current_frontend_config": 789, "0x7effee009df0": 789, "interruptedtest": 789, "test_interrupt": 789, "baseexcept": 789, "tri": [789, 845], "testdata": 789, "supported_device_dtyp": 789, "is_method": 789, "setup_api_test": 789, "test_data": 789, "setup_frontend_test": 789, "teardown_api_test": 789, "teardown_frontend_test": 789, "hypothesis_help": [790, 791, 792, 793, 794], "array_help": 791, "array_and_broadcastable_shap": 791, "searchstrategi": [791, 792, 793, 794, 798, 799, 860], "array_bool": [791, 860], "min_valu": [791, 792, 793, 794, 832, 850, 858, 860], "max_valu": [791, 792, 793, 794, 858, 860], "ex": [791, 792, 793, 794, 799, 844, 875], "strategi": [791, 792, 793, 794, 798, 799, 834, 858], "array_helpers_dtype_info_help": 791, "kind_dtyp": [791, 793], "array_indices_axi": 791, "array_dtyp": [791, 792, 860], "indices_dtyp": 791, "get_dtyp": [791, 792, 832, 850, 858, 860], "abs_smallest_v": [791, 793, 794], "large_abs_safety_factor": [791, 793, 794, 832, 850, 858, 860], "small_abs_safety_factor": [791, 793, 794, 832, 850, 858], "safety_factor_scal": [791, 793, 794, 858, 860], "disable_random_axi": 791, "axis_zero": 791, "allow_inf": [791, 794, 858, 860], "min_num_dim": [791, 793, 858, 860], "max_num_dim": [791, 793, 858, 860], "min_dim_s": [791, 793, 858, 860], "max_dim_s": [791, 793, 858], "first_dimension_onli": 791, "indices_same_dim": 791, "valid_bound": 791, "safeti": [791, 793, 794, 878], "0002": [791, 794], "hypothesi": [791, 793, 799, 834, 836, 839, 844, 854], "65536": 791, "44758124e": [791, 860], "array_indices_put_along_axi": 791, "values_dtyp": 791, "array_valu": [791, 860], "allow_nan": [791, 794, 860], "allow_subnorm": [791, 794, 860], "exclude_min": [791, 794, 860], "exclude_max": [791, 794], "subnorm": [791, 794], "get_shap": [791, 793, 858, 860], "1806": 791, "36912": 791, "6955": 791, "59576": 791, "arrays_and_ax": 791, "available_dtyp": [791, 792, 832, 850, 858, 860], "allow_non": [791, 793, 858, 860], "return_dtyp": 791, "force_int_axi": 791, "26e": 791, "10e": 791, "24322108": 791, "26446279e": 791, "96046448e": 791, "008": 791, "17549435e": 791, "038": 791, "06541027e": 791, "13725760e": 791, "07143888": 791, "arrays_for_pool": 791, "min_dim": 791, "max_dim": 791, "min_sid": 791, "max_sid": 791, "explicit_or_str_pad": 791, "only_explicit_pad": 791, "return_dil": 791, "mixed_fn_compo": [791, 792, 793, 794, 860], "return_data_format": 791, "cond_data_gen_help": 791, "create_concatenable_arrays_dtyp": 791, "min_num_arrai": 791, "max_num_arrai": 791, "concat_dim": 791, "common_shap": [791, 860], "stackabl": 791, "given_common_shap": 791, "create_nested_input": 791, "leaf_valu": 791, "dtype_and_valu": [791, 832, 850, 858, 860], "num_arrai": [791, 792, 858, 860], "shared_dtyp": [791, 792, 858], "ret_shap": 791, "array_api_dtyp": [791, 792], "shape_kei": 791, "37915": 791, "6322": 791, "26765": 791, "12413": 791, "26986": 791, "34665": 791, "000e": 791, "711e": 791, "100e": 791, "955e": [791, 860], "40817": 791, "56193": 791, "29200": 791, "5851": 791, "9746": 791, "9604645e": 791, "103": 791, "41795": 791, "1170789994": 791, "44251": 791, "44209": 791, "433075925": 791, "24791": 791, "24691": 791, "24892": 791, "16711": 791, "972": 791, "15357": 791, "72057594037927936": 791, "dtype_array_queri": 791, "allow_mask": 791, "allow_neg_step": 791, "dtype_array_query_v": 791, "dtype_values_axi": [791, 860], "min_axi": 791, "max_axi": 791, "valid_axi": 791, "allow_neg_ax": 791, "min_axes_s": 791, "max_axes_s": 791, "force_tuple_axi": 791, "29788": 791, "62222885e": 791, "68281172e": 791, "257j": 791, "40129846e": 791, "90000000e": 791, "63426649e": 791, "91931887e": 791, "29488e": 791, "14361019e": 791, "12445": 791, "einsum_help": 791, "get_first_solve_batch_matrix": 791, "choose_adjoint": 791, "get_second_solve_batch_matrix": 791, "get_first_solve_matrix": 791, "allow_simplifi": 791, "choose_sid": 791, "xa": 791, "get_second_solve_matrix": 791, "list_of_s": 791, "sampled_from": [791, 858, 860], "min_siz": [791, 793, 799, 860], "max_siz": [791, 793, 799, 860], "size_bound": [791, 860], "999999999999999": 791, "9394938006792373": 791, "mutually_broadcastable_shap": 791, "num_shap": 791, "base_shap": 791, "dtype_help": 792, "univers": [792, 857], "cast_filt": 792, "cast_filter_help": 792, "current_backend": [792, 816, 834, 841, 849, 853, 858, 861, 865], "get_castable_dtyp": 792, "castabl": 792, "prune_funct": 792, "intersect": [792, 844, 860], "signed_integ": 792, "real_and_complex": 792, "float_and_complex": 792, "general_help": 793, "broadcasterror": 793, "apply_safety_factor": 793, "dims_and_offset": 793, "ensure_dim_uniqu": 793, "embedding_help": 793, "general_helpers_dtype_info_help": 793, "get_axi": [793, 860], "allow_neg": 793, "sort_valu": 793, "force_tupl": 793, "force_int": 793, "assertionerror": [793, 832, 839, 849, 850, 858, 860], "get_bound": [793, 860], "get_mean_std": 793, "matrix_is_st": 793, "cond_limit": 793, "instabl": [793, 832, 845, 850], "computation": [793, 835], "prone": [793, 845], "thumb": 793, "gradual": 793, "collinear": 793, "reshape_shap": [793, 860], "sizes_": 793, "two_broadcastable_shap": 793, "x_and_filt": 793, "number_help": 794, "arbitrarili": 794, "safety_factor": 794, "backend_proc": 795, "input_queu": 795, "output_queu": 795, "frontend_proc": 795, "pipeline_help": 796, "backendhandl": 796, "update_backend": [796, 858], "backendhandlermod": 796, "enum": [796, 819], "setbackend": 796, "withbackend": 796, "withbackendcontext": 796, "get_frontend_config": 796, "frontendmethoddata": 797, "ivy_init_modul": 797, "framework_init_modul": 797, "init_nam": 797, "test_parameter_flag": 798, "dynamicflag": [798, 799], "frontendfunctiontestflag": [798, 850], "with_copi": 798, "generate_frontend_arrai": [798, 799, 850], "testflag": 798, "apply_flag": 798, "args_to_iter": 798, "frontendinittestflag": 798, "frontendmethodtestflag": 798, "test_cython_wrapp": [798, 799], "initmethodtestflag": 798, "methodtestflag": 798, "build_flag": 798, "frontend_init_flag": 798, "frontend_method_flag": 798, "function_flag": 798, "init_method_flag": 798, "testing_help": 799, "handle_exampl": [799, 860], "test_exampl": [799, 860], "test_frontend_exampl": [799, 860], "test_method_exampl": [799, 860], "test_frontend_method_exampl": [799, 860], "given_kwarg": 799, "handle_frontend_method": [799, 858, 860], "class_tre": [799, 858], "init_tre": [799, 858], "init_native_arrai": 799, "_as_varaible_strategi": 799, "method_native_arrai": 799, "test_inplac": [799, 860], "_given_kwarg": 799, "test_compil": 799, "handle_frontend_test": [799, 858, 860], "alias": [799, 834, 857, 858], "number_positional_arg": [799, 858], "test_with_out": [799, 858, 860], "test_with_copi": 799, "handle_method": [799, 819, 860], "method_tre": [799, 858, 860], "_gradient_strategi": 799, "handle_test": [799, 832, 850, 860], "test_instance_method": [799, 860], "num_positional_args_help": 799, "num_positional_args_method": 799, "geglu": 803, "leakyrelu": 803, "logsoftmax": 803, "from_flax_modul": 804, "native_modul": 804, "params_fx": 804, "rng_seed": 804, "constructor_arg": 804, "constructor_kwarg": 804, "instance_arg": 804, "instance_kwarg": 804, "flax": [804, 867, 878], "from_haiku_modul": 804, "params_hk": 804, "from_paddle_modul": 804, "from_torch_modul": 804, "to_keras_modul": 804, "native_module_class": 804, "modulehelp": [805, 809], "create_vari": 806, "var_shap": 806, "fan_out": 806, "fan_in": 806, "rectangular": 806, "firstlayersiren": 806, "siren": 806, "glorotuniform": [806, 807], "glorot": 806, "xavier": 806, "neuron": 806, "w_1x_1": 806, "w_2x_2": 806, "w_nx_n": 806, "w_i": 806, "kaimingnorm": 806, "fan_mod": 806, "kaim": 806, "he": 806, "negative_slop": 806, "fan": 806, "propog": 806, "fan_sum": 806, "Ones": 806, "randomnorm": 806, "stddev": 806, "w0": 806, "wlim": 806, "predefin": 806, "fan_avg": 806, "adaptiveavgpool1d": 807, "avgpool1d": 807, "implicit": [807, 843, 848, 857, 860, 865, 878], "avgpool2d": 807, "avgpool3d": 807, "e501": 807, "filter_s": 807, "weight_initi": 807, "bias_initi": 807, "0x7efff9fcd4b0": 807, "0x7efff9fcd810": 807, "conv1dtranspos": 807, "0x7efff9fcd870": 807, "0x7efff9fcd8d0": 807, "filter_shap": 807, "0x7efff9fcdab0": 807, "0x7efff9fcdbd0": 807, "0x7efff9fcd240": 807, "0x7efff9fcd1e0": 807, "0x7efff9fcd0c0": 807, "0x7efff9fcd060": 807, "conv3dtranspos": 807, "0x7efff9fcd000": 807, "0x7efff9fccfa0": 807, "depthwiseconv2d": 807, "num_channel": 807, "0x7efff9fcd180": 807, "0x7efff9fcd120": 807, "bernoul": 807, "num_embed": 807, "embedding_dim": 807, "padding_idx": 807, "lookup": 807, "num_embeddingss": 807, "renorm": 807, "extra_repr": 807, "insensit": 807, "return_st": 807, "0x7efff9fccf40": 807, "get_initial_st": 807, "0x7efff9fcd3f0": 807, "0x7efff9fcd450": 807, "maxpool1d": 807, "maxpool3d": 807, "multiheadattent": 807, "embed_dim": 807, "head_dim": 807, "dropout_r": 807, "use_proj_bia": 807, "attention_ax": 807, "build_mod": [807, 808, 809], "on_init": [807, 809], "parallel": [807, 842, 878], "binarycrossentropyloss": 808, "store_var": [808, 809], "with_partial_v": [808, 809], "logpoissonloss": 808, "modulemeta": 809, "temporarili": [809, 832, 839, 850], "from_cal": 809, "module_dict": 809, "register_buff": 809, "register_paramet": 809, "weights_path": 809, "randomness_factor": 809, "with_edge_label": 809, "with_arg_label": 809, "with_output_label": 809, "output_connected_onli": 809, "highlight_subgraph": 809, "trace_kwarg": 809, "_unified_ivy_graph": 809, "_call": 809, "num_featur": 810, "trail": 810, "layernorm": 810, "normalized_shap": 810, "elementwise_affin": 810, "set_stat": 811, "adamw": 811, "weight_decai": 811, "init_on_first_step": 811, "fallback_to_non_trac": 811, "ignore_miss": 811, "_step": 811, "stochast": [811, 878], "sub_modul": 812, "check_al": 813, "check_all_or_any_fn": 813, "check_ani": 813, "check_dev_correct_format": 813, "check_dimens": 813, "check_elem_in_list": [813, 853, 856, 857], "elem": 813, "check_equ": [813, 857], "check_exist": 813, "check_fals": 813, "check_gather_input_valid": 813, "check_gather_nd_input_valid": 813, "check_great": 813, "allow_equ": [813, 849], "check_inplace_sizes_valid": [813, 856], "check_isinst": 813, "allowed_typ": 813, "check_kernel_padding_s": 813, "padding_s": 813, "check_less": [813, 849], "check_one_way_broadcast": 813, "check_same_dtyp": 813, "check_shapes_broadcast": 813, "check_tru": 813, "check_unsorted_segment_valid_param": 813, "ast_help": 815, "importtransform": 815, "nodetransform": 815, "impersonate_import": 815, "tree": [815, 845], "local_ivy_id": 815, "visit_import": 815, "visit_importfrom": 815, "ivyload": 815, "loader": [815, 867], "exec_modul": 815, "ivypathfind": 815, "metapathfind": 815, "find_spec": 815, "fullnam": 815, "contextmanag": 816, "choose_random_backend": 816, "global_backend": 816, "dynamic_backend_convert": 816, "backend_stack": [816, 865], "prevent_access_loc": 816, "previous_backend": [816, 841], "Or": [816, 828, 830, 835, 856, 872], "set_backend_to_specific_vers": 816, "set_jax_backend": 816, "set_mxnet_backend": 816, "mx": 816, "set_numpy_backend": 816, "set_paddle_backend": 816, "set_tensorflow_backend": 816, "set_torch_backend": 816, "sub_backend_handl": 817, "clear_sub_backend": 817, "find_available_sub_backend": 817, "sub_backends_loc": 817, "fn_name_from_version_specific_fn_nam": 817, "fn_name_from_version_specific_fn_name_sub_backend": 817, "sub_backend_vers": 817, "backend_vers": [817, 832, 845, 850], "set_sub_backend": 817, "sub_backend_str": 817, "set_sub_backend_to_specific_vers": 817, "sub_backend": 817, "unset_sub_backend": 817, "check_for_binari": 818, "cleanup_and_fetch_binari": [818, 835], "clean": [818, 836, 861, 866], "decorator_util": 819, "callvisitor": 819, "nodevisitor": 819, "visit_cal": 819, "transposetyp": 819, "no_transpos": 819, "apply_transpos": 819, "pt_to_tf": 819, "dummy_inplace_upd": 819, "get_next_func": 819, "handle_get_item": 819, "handle_set_item": 819, "handle_transpose_in_input_and_output": 819, "retrieve_object": 819, "store_config_info": 819, "dynamic_import": 820, "import_modul": [820, 865], "einsum_pars": 821, "convert_interleaved_input": 821, "interleav": 821, "convert_subscript": 821, "old_sub": 821, "symbol_map": 821, "subscript": [821, 822], "oe": 821, "ellipsi": [821, 822], "find_output_shap": 821, "find_output_str": 821, "canon": 821, "gen_unused_symbol": 821, "abd": [821, 822], "get_symbol": 821, "letter": 821, "resort": 821, "unicod": 821, "charact": [821, 857], "chr": 821, "surrog": 821, "\u0155": 821, "20000": 821, "\u4eac": 821, "has_valid_einsum_chars_onli": 821, "einsum_str": 821, "abaz": 821, "\u00f6ver": 821, "is_valid_einsum_char": 821, "\u01f5": 821, "legalise_einsum_expr": 821, "reproduct": [821, 822], "pars": [821, 822, 842, 847, 867], "intak": 821, "contract_path": 821, "parse_einsum_input": [821, 822], "einsum_eqn": 821, "legalis": 821, "legalise_einsum_eqn": 821, "za": [821, 822], "xza": [821, 822], "xz": [821, 822], "possibly_convert_to_numpi": 821, "myshap": 821, "__main__": 821, "0x10f850710": 821, "einsum_path_help": 822, "can_dot": 822, "idx_remov": 822, "bla": 822, "benefici": 822, "movement": 822, "costli": 822, "gemm": 822, "ijj": 822, "ddot": 822, "ikj": 822, "compute_size_by_dict": 822, "idx_dict": 822, "abbc": 822, "find_contract": 822, "input_set": 822, "output_set": 822, "lh": 822, "rh": 822, "new_result": 822, "idx_contract": 822, "iset": 822, "oset": 822, "bdc": 822, "flop_count": 822, "num_term": 822, "size_dictionari": 822, "flop": [822, 826], "greedy_path": 822, "memory_limit": 822, "exhaust": [822, 856, 860], "indices_remov": 822, "priorit": [822, 834, 859, 863], "hadamard": 822, "cubic": 822, "greedi": 822, "idx_siz": 822, "optimal_path": 822, "siev": 822, "input_str": 822, "output_str": 822, "parse_possible_contract": 822, "path_cost": 822, "naive_cost": 822, "propos": [822, 836, 857, 863, 878], "intermediari": [822, 841], "unoptim": 822, "new_input_set": 822, "update_other_result": 822, "provision": 822, "_parse_possible_contract": 822, "mod_result": 822, "inplaceupdateexcept": 823, "include_backend": [823, 849], "ivyattributeerror": [823, 849], "attributeerror": [823, 849], "ivybroadcastshapeerror": [823, 849], "ivydeviceerror": 823, "ivydtypepromotionerror": [823, 849], "ivyindexerror": [823, 849], "ivyinvalidbackendexcept": 823, "ivynotimplementedexcept": [823, 849], "notimplementederror": 823, "ivyvalueerror": [823, 849], "handle_except": [823, 852, 854], "add_array_spec": 824, "fn_array_spec": 824, "set_logging_mod": 825, "debug": [825, 831, 835, 836, 843, 844, 855, 860, 863, 878], "unset_logging_mod": 825, "print_stat": 826, "viz": 826, "snakeviz": 826, "bonu": 826, "cprofil": 826, "tensorflow_profile_start": 826, "logdir": 826, "host_tracer_level": 826, "python_tracer_level": 826, "device_tracer_level": 826, "delay_m": 826, "toggl": [826, 836], "timestamp": 826, "awai": [826, 878], "millisecond": 826, "guess": 826, "tensorflow_profile_stop": 826, "torch_profiler_init": 826, "schedul": [826, 844, 867, 878], "on_trace_readi": 826, "record_shap": 826, "profile_memori": 826, "with_stack": 826, "with_flop": 826, "with_modul": 826, "experimental_config": 826, "profileract": 826, "record_and_sav": 826, "dealloc": 826, "record": [826, 835, 867, 879], "callstack": 826, "aten": 826, "torchscript": [826, 866, 869], "_experimentalconfig": 826, "kineto": 826, "torch_profiler_start": 826, "torch_profiler_stop": 826, "cprint": [827, 865], "faq": [828, 842], "docker": [828, 832, 833, 850], "pull": [828, 829, 831, 834, 835, 839, 847, 851, 861, 863, 867, 868], "ivyllc": [828, 835, 868], "brief": [828, 856, 860, 866], "torch_fn": 828, "tf_fn": 828, "jax_fn": 828, "ensp": 828, "customiz": [828, 842], "15c235f": 828, "deepmind_perceiver_io": 828, "sm_framework": 828, "segmentation_model": 828, "sm": 828, "torch_sm": 828, "iou_scor": 828, "rax": 828, "torch_rax": 828, "poly1_softmax_loss": 828, "madmom": 828, "madmon": 828, "torch_madmom": 828, "freq": 828, "audio": 828, "hz2midi": 828, "torch_loss": 828, "maxpooling1d": 828, "pool_siz": 828, "tf_kornia": 828, "tf_rax": 828, "tf_madmom": 828, "tf_loss": 828, "_forward_classifi": [828, 875], "forward_classifi": [828, 875], "hk_eff_encod": 828, "dummy_x": 828, "jax_sm": 828, "jax_madmom": 828, "jax_loss": 828, "np_kornia": 828, "np_sm": 828, "np_rax": 828, "np_loss": 828, "migrat": [828, 872], "instantli": [828, 875], "tensorflwo": 828, "happend": 828, "motiv": 828, "contextu": 828, "explos": [828, 870], "adher": [828, 839, 845, 848, 852, 863, 865], "orient": [828, 872], "contributor": [828, 829, 832, 834, 835, 836, 850, 857, 864, 878], "believ": [828, 836], "everyon": [828, 829, 834, 835, 836, 867], "feedback": [828, 834, 844], "appreci": [828, 837], "dashboard": 828, "grow": [828, 831, 837, 878], "mission": [828, 837], "season": 828, "fellow": 828, "credit": 828, "accompani": 828, "lenton2021ivi": 828, "inter": 828, "author": [828, 834, 836], "lenton": 828, "daniel": 828, "pardo": 828, "fabio": 828, "falck": 828, "fabian": 828, "jame": 828, "stephen": 828, "clark": 828, "ronald": 828, "journal": 828, "arxiv": 828, "preprint": 828, "2102": 828, "02886": 828, "year": [828, 839, 867, 878], "strongli": [829, 835, 857], "engag": [829, 836, 837], "skill": [829, 837], "veteran": 829, "journei": [829, 837], "effort": [829, 834, 867, 871, 878], "board": [829, 842], "stage": [829, 836, 838, 839, 842, 860, 878], "excit": [829, 838], "reward": [829, 837], "badg": [829, 837, 844], "program": [829, 856, 878], "climb": [829, 833], "Be": [830, 842], "awar": [830, 842, 849, 851], "linux": [830, 835, 836, 842], "regularli": [830, 842, 844], "internet": [830, 842], "codespac": [830, 842, 850], "make_doc": 830, "sh": [830, 835, 836, 839, 844], "pwd": 830, "ssh": [830, 844], "make_docs_without_dock": [830, 842], "award": 831, "formal": 831, "dynamo": 831, "earn": [831, 837], "thoroughli": [831, 839], "valuabl": [831, 834, 836], "merg": [831, 834, 836, 839, 844, 857, 878], "meet": [831, 837, 857], "wizard": 831, "inspector": 831, "acknowledg": [831, 837], "honour": 831, "dilig": 831, "bronz": [831, 837], "silver": [831, 837], "gold": [831, 837, 867], "expertis": [831, 837], "assist": [832, 850], "runtimeerror": [832, 850], "logaddexp2_cpu": [832, 850], "falsifi": [832, 839, 850, 860], "test_logaddexp2": [832, 850], "backend_fw": [832, 850, 858], "dtype_and_x": [832, 850, 858, 860], "reproduce_failur": [832, 839, 850, 854, 860], "axicy2bkaamobaar2waaaacvaai": [832, 850], "decoartor": [832, 850], "someth": [832, 836, 841, 850, 851, 861, 867], "with_unsupported_dtyp": [832, 845, 850, 857], "25830078125": [832, 850], "258544921875": [832, 850], "test_acosh": [832, 850], "axicy2baabyqwqgiaabdaai": [832, 850], "quit": [832, 836, 840, 847, 848, 850, 853, 854, 860, 863, 878], "41421356": [832, 850], "41421356e": [832, 850], "34078079e": [832, 850], "154": [832, 850], "test_ab": [832, 835, 850, 860], "000j": [832, 850], "154j": [832, 850], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [832, 850], "thread": [832, 834, 835, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 878], "pycharm": [832, 858, 860], "steep": 833, "curv": 833, "realpython": 833, "pyn": 833, "exchang": [833, 880], "pilot": 833, "stuck": [833, 834], "spell": 833, "sound": [833, 844], "peopl": [833, 835, 836, 838, 878], "frequent": [834, 836, 841, 878], "outlin": [834, 835, 836, 838, 843, 845, 848, 853, 856, 857, 860], "broad": 834, "individu": [834, 836, 839, 841, 845, 853, 857, 878], "clearli": [834, 836, 847, 858, 860], "straightforward": [834, 837], "lie": 834, "urgent": 834, "encourag": [834, 837, 851, 867], "tackl": [834, 837, 857], "challeng": [834, 841, 871, 880], "categoris": [834, 839, 857], "comfort": [834, 835, 849], "linkag": 834, "pr": [834, 836, 837, 839, 851, 857, 858, 860], "confid": 834, "submit": [834, 851], "mindspor": 834, "simpler": [834, 836, 851, 874, 879], "member": [834, 836, 857, 868], "comment": [834, 835, 836, 839, 845, 851, 857, 859, 863], "composition": 834, "feasibl": [834, 844, 860, 874], "pend": 834, "helpfulli": [834, 863], "problemat": [834, 835], "unimpl": 834, "issue_link": 834, "alias_nam": 834, "notic": [834, 840, 844, 850, 851, 860, 863, 874], "push": [834, 836, 837, 839, 858, 860], "liner": 834, "meanwhil": [834, 844], "reselect": 834, "faithfulli": 834, "creation_routin": [834, 858], "indexing_routin": 834, "ma": 834, "manipulation_routin": 834, "mathematical_funct": [834, 857], "sorting_searching_count": 834, "ufunc": [834, 857], "matrix_and_vector_product": 834, "matrix_eigenvalu": 834, "norms_and_other_numb": 834, "solving_equations_and_inverting_matric": 834, "gleam": 834, "uncom": 834, "test_numpy_inn": 834, "test_frontend": [834, 844, 850, 858], "unsur": [834, 860], "refrain": 834, "checkbox": [834, 835], "yourself": [834, 836, 851, 860, 863], "aforement": 834, "parent": [834, 844], "arraywithelementwis": [834, 840], "containerwithmanipul": 834, "thorough": [834, 848, 852, 860], "add_reformatting_checklist_": 834, "category_nam": [834, 845, 846, 848, 852, 853], "autom": [834, 844, 851, 860, 869], "bot": [834, 851], "markdown": [834, 842], "patient": [834, 835], "elabor": 834, "struggl": 834, "assigne": 834, "status": 834, "central": [834, 851, 863], "relevant_submodul": 834, "roadmap": [834, 844], "deem": [834, 857], "subtask": 834, "clearer": [834, 849, 858], "backend_nam": [834, 841, 845, 846, 848, 852, 853, 854], "rare": [834, 846, 867], "button": [834, 835, 836, 850], "centr": 834, "predetermin": 834, "superset": [834, 838, 853, 856, 867], "happi": [835, 850, 867], "your_usernam": [835, 850], "your_fold": [835, 850], "enter": [835, 836, 840, 845, 846, 850, 852, 854], "sync": [835, 839, 850], "nutshel": [835, 852], "hook": [835, 851, 859], "lint": [835, 838], "succe": [835, 874], "whatev": [835, 843, 867], "elig": [835, 837], "student": 835, "licens": 835, "remind": 835, "expir": 835, "profession": 835, "trial": 835, "jetbrain": 835, "month": [835, 872], "bui": 835, "paid": 835, "rapid": [835, 878], "pace": 835, "person": [835, 836], "perhap": [835, 867], "conda": 835, "ivy_dev": [835, 836], "icon": [835, 836, 850], "panel": 835, "vscode": [835, 850], "palett": 835, "ctrl": [835, 836], "mac": [835, 836], "intel": 835, "m1": 835, "optional_apple_silicon_1": 835, "optional_apple_silicon_2": 835, "array_api_test": [835, 836, 839, 850], "test_array_api": [835, 836, 839, 850, 860], "suit": [835, 838, 839, 844, 850, 859, 860, 878], "cmd": 835, "bat": [835, 836], "virtualenv": 835, "tick": [835, 836, 844], "nz2": 835, "openssl": 835, "libssl1": 835, "1_1": 835, "1f": 835, "1ubuntu2": 835, "20_amd64": 835, "deb": 835, "dpkg": 835, "mitig": 835, "desktop": [835, 850], "powershel": 835, "admin": 835, "menu": [835, 850], "introspect": 835, "dialog": 835, "persist": 835, "earlier": [835, 836, 845, 861], "virtualis": 835, "bio": 835, "dropdown": [835, 844], "dockerfil": 835, "ca": 835, "certif": 835, "gnupg": 835, "lsb": 835, "keyr": 835, "fssl": 835, "gpg": 835, "dearmor": 835, "echo": [835, 844], "arch": 835, "lsb_releas": 835, "ce": 835, "cli": 835, "containerd": 835, "systemctl": 835, "softwar": [835, 836], "press": [835, 836], "4a": 835, "socket": 835, "rwx": 835, "sock": 835, "pid": 835, "editor": 835, "pytest": [835, 836, 839, 844, 850, 854, 860], "keyboard": 835, "screenshot": 835, "pop": [835, 850], "test_elementwis": 835, "shell": [835, 836, 839, 844], "setup_test": 835, "run_ivy_core_test": 835, "run_ivy_nn_test": 835, "run_ivy_stateful_test": 835, "run_test": [835, 844], "test_depend": 835, "test_ivy_cor": 835, "test_ivy_nn": 835, "test_ivy_st": 835, "unix": 835, "test_": [835, 858], "test_cor": [835, 836, 858], "offici": [835, 845, 865], "wish": [835, 857], "ivy_nn": 835, "ivy_st": 835, "header": [835, 836, 859], "arrow": 835, "test_stat": 835, "test_submodule_nam": 835, "test_function_nam": 835, "debugg": 835, "studio": [835, 850, 860], "afterward": 835, "background": [835, 842, 850, 878], "overlap": [835, 844, 850, 861, 863, 879], "test_file_path": [835, 850], "test_fn_nam": [835, 850], "engin": [835, 872, 878], "devcontain": 835, "comma": 835, "postcreatecommand": 835, "post_create_command": 835, "poststartcommand": 835, "safe": [835, 857], "containerworkspacefold": 835, "reopen": 835, "test_fle_path": 835, "slash": 835, "isol": [835, 836, 879], "container": 835, "intens": 835, "headach": 835, "arm": [835, 836], "vm": [835, 844], "azur": 835, "cloud": [835, 844], "favourit": 835, "theme": [835, 842], "ipad": 835, "browser": [835, 842], "quota": 835, "requisit": 835, "pane": [835, 836, 844], "dockerfilegpu": 835, "ivv": 835, "multiv": 835, "multivers": [835, 861], "dockerfilemultivers": 835, "dockerhub": 835, "upto": [835, 836], "launch": 835, "kindli": [835, 859], "guidelin": 835, "colour": 835, "chanc": 835, "troubleshoot": 835, "ever": 835, "flask": [835, 850], "toolbar": [835, 836, 850], "_array_modul": [835, 839, 850], "refresh": [835, 850], "pytestarg": [835, 850], "unittesten": [835, 850], "pytesten": [835, 850], "autotestdiscoveronsaveen": [835, 850], "conftest": 835, "serv": [835, 836, 840, 843, 852, 853, 857, 858, 860, 863, 869, 872], "aren": [835, 845], "available_config": 835, "cp310": 835, "x86": 835, "newer": [835, 860], "meantim": 835, "suffici": [835, 847, 857, 860], "bear": [835, 840, 843, 845, 857], "tendenc": 836, "land": 836, "unrel": 836, "fly": [836, 878], "internship": 836, "suspect": 836, "iii": 836, "issue_numb": 836, "12345": 836, "rememb": 836, "respond": 836, "dai": [836, 851], "freed": 836, "situat": [836, 844, 865], "obvious": [836, 844], "hypothet": 836, "frustrat": 836, "delai": [836, 874], "busi": 836, "inact": 836, "unfairli": 836, "investig": 836, "name_of_your_branch": 836, "date": [836, 839], "complic": [836, 858, 865], "merge_with_upstream": 836, "abort": 836, "tediou": [836, 847, 863], "stash": [836, 851], "reinstat": 836, "uncommit": 836, "unstag": [836, 851], "untrack": 836, "atlassian": 836, "wrote": 836, "piec": [836, 840, 853, 854, 866, 874, 877], "blame": 836, "eg": 836, "week": 836, "grep": 836, "commit_id": 836, "handi": 836, "histori": 836, "approv": 836, "someon": [836, 867], "hash": 836, "cancel": 836, "speedup": 836, "unavail": 836, "tickbox": 836, "intent": [836, 856], "discourag": 836, "adopt": [836, 840, 852, 863, 878], "philosophi": 836, "infrequ": 836, "earli": [836, 878], "wast": [836, 844], "spot": [836, 847, 853], "mistak": 836, "mountain": 836, "advoc": [836, 867], "session": [836, 878], "beauti": 836, "care": [836, 846, 857, 863], "undo": 836, "stress": 836, "nifti": 836, "reassur": 836, "local_path_to_ivi": 836, "subfold": [836, 858, 860, 861], "dep": 836, "fresh": 836, "arsen": 836, "exec": 836, "ivy_contain": 836, "test_imag": 836, "test_random_crop": 836, "test_creation_funct": 836, "test_arang": 836, "cursor": 836, "alt": 836, "breakpoint": 836, "gutter": 836, "caret": 836, "f8": 836, "f9": 836, "Into": 836, "f7": 836, "smart": 836, "fragment": [836, 871, 872, 877], "wherein": [836, 853, 860], "facilit": [837, 872], "embark": 837, "innov": 837, "door": [837, 867], "elev": 837, "opportun": 837, "testament": [837, 859], "stone": 837, "gift": 837, "acquir": 837, "peak": 837, "privileg": 837, "bounti": 837, "cash": 837, "delight": 837, "weed": [838, 864], "tour": 838, "formatt": [838, 851], "conjunct": 839, "establish": 839, "unconnect": 839, "strang": 839, "test_linalg": [839, 858], "test_set_funct": 839, "test_signatur": 839, "excess": [839, 841, 847], "array_modul": 839, "vv": 839, "test_manipulation_funct": 839, "test_concat": [839, 860], "nb": 839, "liber": 839, "______________________": 839, "test_remaind": 839, "_______________________": 839, "test_operators_and_elementwise_funct": 839, "1264": 839, "1277": 839, "binary_param_assert_against_refimpl": 839, "ctx": 839, "620": 839, "binary_assert_against_refimpl": 839, "scalar_o": 839, "17304064": 839, "binaryparamcontext": 839, "axic42baaowcnp": 839, "rumwmabaear0": 839, "make_binary_param": 839, "numeric_dtyp": 839, "left_strat": 839, "left_sym": 839, "right_strat": 839, "right_sym": 839, "right_is_scalar": 839, "binary_param_assert_dtyp": 839, "binary_param_assert_shap": 839, "recreat": 839, "unexpectedli": 839, "discrep": [839, 858], "test_asarray_arrai": 839, "test_floor_divid": 839, "health": 839, "test_iop": 839, "__imod__": 839, "isequ": 839, "test_matrix_norm": 839, "alter": 839, "tweak": 839, "array_api_methods_to_test": 839, "test_special_cas": 839, "__ipow__": 839, "is_integ": 839, "easier": [839, 840, 841, 845, 858, 861, 869, 872, 878], "revisit": [839, 852], "_data": [840, 856, 857], "organiz": [840, 843, 857], "underpin": [840, 843, 865, 866], "programmat": [840, 843, 879], "backup": [840, 842, 843], "accident": [840, 843, 857], "absent": [840, 843], "auto": [840, 842, 843, 851], "__mul__": [840, 843, 847, 852, 863], "throw": [840, 845, 846, 849, 850, 878], "imposs": 840, "inputs_to_native_arrai": [840, 853, 854], "outputs_to_ivy_arrai": [840, 845, 846, 852, 853, 854], "secondli": [840, 845], "__ivy_array_function__": 840, "__torch_function__": 840, "myarrai": 840, "handled_funct": 840, "notimpl": 840, "issubclass": 840, "enough": [840, 844, 845, 846, 860], "ivy_funct": 840, "my_ab": 840, "my_arrai": 840, "implicit_backend": [841, 865], "__dict__": [841, 856, 865], "ivy_original_dict": [841, 865], "fallback": 841, "live": [841, 842, 845], "dlpack": 841, "set_dynamic_backend": 841, "unset_dynamic_backend": 841, "dynamic_backend_a": 841, "set_": 841, "unset_": 841, "backend_handl": 841, "requires_grad": 841, "memory_format": 841, "preserve_format": 841, "weren": 841, "vast": [841, 845, 878], "minor": [841, 863, 867], "fn_name_v_1p12_and_abov": 841, "fn_name_v_1p01_to_1p1": 841, "heavili": [842, 854, 867], "conf": 842, "cleanup": 842, "readm": [842, 867], "maxdepth": 842, "caption": 842, "related_work": 842, "deep_div": 842, "glossari": 842, "autosummari": 842, "top_functional_toc": 842, "restructuredtext": 842, "discov": [842, 845], "ivy_toctree_caption_map": 842, "unfortun": [842, 851], "linker": 842, "foo": 842, "discussion_channel_map": 842, "1000043690254946374": 842, "1000043749088436315": 842, "forum": 842, "seri": [842, 845, 857, 860, 878], "discussion_paragraph": 842, "discord_link": 842, "channel_link": 842, "gg": 842, "uyrmypxmqq": 842, "799879767196958751": 842, "channel_id": 842, "autoskippablemethod": 842, "skippable_method_attribut": 842, "__qualname__": 842, "autodoc": 842, "__doc__": 842, "autoivydata": 842, "mutual": [843, 853], "containerwithelementwis": 843, "__repr__": 843, "__getattr__": [843, 874], "__setattr__": [843, 874], "__contains__": 843, "__getstate__": 843, "__setstate__": 843, "unpickl": 843, "num_dim": [843, 865], "restrict": [843, 844, 857, 866, 874], "enforc": 843, "lefthand": 843, "righthand": 843, "handle_nest": [843, 852, 853, 854, 865], "absenc": [843, 852, 878], "implicitli": [843, 855, 860, 865], "log_pr": [843, 853, 856], "intuit": [843, 860, 871], "chronolog": 843, "concurr": [843, 844, 853, 878], "despit": [843, 845, 846, 858, 866, 878], "__list__": 843, "whatsoev": [843, 853, 869], "children": 843, "shallowest": 843, "deepest": 843, "rollback": 844, "incorpor": [844, 858, 878], "techniqu": 844, "triplet": 844, "test_torch": [844, 858], "test_tensor": [844, 858], "test_torch_instance_arctan_": 844, "12500": 844, "daili": 844, "huge": [844, 870, 878], "shoot": 844, "_reduce_loss": [844, 853, 856], "test_nn": 844, "test_loss": 844, "test_binary_cross_entropy_with_logit": 844, "test_cross_entropi": 844, "test_binary_cross_entropi": 844, "test_sparse_cross_entropi": 844, "test_loss_funct": 844, "test_torch_binary_cross_entropi": 844, "test_torch_cross_entropi": 844, "binary_cross_entropy_with_logit": 844, "torch_binary_cross_entropi": 844, "torch_cross_entropi": 844, "readthedoc": 844, "pedagog": 844, "f_1": 844, "t_1": 844, "t_3": 844, "t_7": 844, "t_": 844, "f_m": 844, "cyclic": 844, "intellig": [844, 860], "tests_fil": 844, "file_nam": [844, 860, 861], "tests_lin": 844, "correspondingli": 844, "tests_to_run": 844, "determine_tests_lin": 844, "mongodb": 844, "mechan": [844, 867], "secret": 844, "db": 844, "ssh_deploy_kei": 844, "suffic": [844, 854, 860], "massiv": 844, "yml": 844, "felicit": 844, "clone_map": 844, "deploy_kei": 844, "user_email": 844, "user_nam": 844, "target_branch": 844, "github_serv": 844, "deploy_key_fil": 844, "ssh_known_hosts_fil": 844, "known_host": 844, "keyscan": 844, "git_ssh_command": 844, "userknownhostsfil": 844, "email": 844, "methodologi": 844, "master1": 844, "restructur": 844, "_map": 844, "t_2": 844, "t_n": 844, "index_map": 844, "test_map": 844, "snowbal": 844, "recalibr": 844, "workflow_dispatch": 844, "cron": 844, "saturdai": 844, "night": 844, "pm": 844, "gut": 844, "lesser": [844, 849], "lol": 844, "hour": 844, "cater": [844, 859, 871], "master2": 844, "master32": 844, "synchron": 844, "runner2": 844, "corrupt": 844, "decoupl": 844, "150": 844, "cycl": [844, 860], "yellow": 844, "queu": 844, "redirect": 844, "book": 844, "onrend": 844, "jo": 844, "ran": 844, "clickabl": 844, "all_dtyp": 845, "all_numeric_dtyp": 845, "all_int_dtyp": 845, "all_float_dtyp": 845, "replic": [845, 855, 856, 857], "thirdli": 845, "native_float32": 845, "importantli": [845, 865], "arguabl": [845, 846, 857], "jaxarrai": [845, 846, 849, 852, 856, 861, 865], "_handle_0_dim_output": 845, "subtli": [845, 856], "promote_types_frontend_nam": 845, "promote_types_of_frontend_name_input": 845, "frontend_nam": 845, "upcast": 845, "nearli": [845, 852, 854, 878], "downcast": 845, "footprint": 845, "concret": 845, "aris": [845, 851, 867], "utterli": 845, "meant": [845, 847, 856], "twice": 845, "disadvantag": 845, "relax": 845, "f64": 845, "unwant": 845, "primaci": 845, "resembl": 845, "compound": 845, "infer_dtyp": [845, 846, 852, 854], "settabl": [845, 846], "handle_out_argu": [845, 846, 852, 853, 854, 856, 865], "infer_devic": [845, 846, 852, 854], "deleg": 845, "shape_to_tupl": 845, "with_supported_dtyp": 845, "unment": 845, "_cast_for_unary_op": [845, 853, 856], "target_typ": 845, "syntax": [845, 871, 878], "unsupported_dtyp": 845, "supported_dtypes_and_devic": 845, "with_unsupported_device_and_dtyp": 845, "globals_getter_func": 845, "f2": 845, "lack": [845, 856, 871, 878], "mandat": [845, 856, 860, 861], "confus": [845, 849, 856, 863, 869], "inconsist": [845, 849, 855], "is_nan": 845, "supported_dtyp": 845, "anytim": 845, "84530": 845, "unwarr": 845, "risk": 845, "needlessli": 845, "bloat": 845, "undergo": [845, 867], "unsupported_devic": 845, "supported_devic": 845, "downsid": 845, "coverag": [845, 860], "undesir": 845, "accomplish": 845, "upcast_data_typ": 845, "downcast_data_typ": 845, "crosscast_data_typ": 845, "cast_data_typ": 845, "downcast_data_dtyp": 845, "vice": 845, "versa": 845, "till": 845, "crosscast": 845, "exmp1": 845, "watch": [845, 857], "handle_numpy_arrays_in_specific_backend": [845, 852], "cate": 845, "understood": 845, "consumpt": 845, "dual": 846, "categor": [846, 853, 857], "_handle_except": [846, 849], "1013": 846, "_handle_nest": [846, 849], "905": 846, "_handle_out_argu": [846, 849], "441": 846, "_inputs_to_native_arrai": [846, 849], "new_arg": [846, 849], "new_kwarg": [846, 849], "_outputs_to_ivy_arrai": [846, 849], "358": 846, "_handle_array_funct": [846, 849], "_handle_device_shift": 846, "handle_device_shift": [846, 854], "device_shifting_dev": 846, "__enter__": 846, "__exit__": 846, "soft_devic": 846, "eight": 847, "op_nam": 847, "__r": 847, "unsurprisingli": 847, "recap": 847, "combinatori": 847, "okai": [847, 863, 865], "spec": [847, 848], "my_func": [847, 861], "some_flag": 847, "another_flag": 847, "jointli": 847, "5574077": 847, "1850398": 847, "5463025": 847, "8422884": 847, "91601413": 847, "9647598": 847, "3738229": 847, "1597457": 847, "0963247": 847, "9955841": 847, "3278579": 847, "asid": 847, "14254655": 847, "1578213": 847, "380515": 847, "trivial": [847, 856], "failing_fn_nam": 847, "onlin": [847, 848], "minutest": 847, "fault": [847, 878], "contrast": [848, 852, 857, 880], "preview": 848, "incorrectli": [848, 874], "needless": [848, 858], "renam": [848, 857], "judgment": 848, "operator_nam": 848, "succinct": 848, "docst": 848, "native_error": 849, "_combine_messag": 849, "truli": 849, "wrong": [849, 851, 854, 857, 863], "198": 849, "392": 849, "_handle_array_like_without_promot": 849, "805": 849, "432": 849, "349": 849, "other_test": 849, "523": 849, "_handle_numpy_out": 849, "396": 849, "_outputs_to_numpy_arrai": 849, "_inputs_to_ivy_arrays_np": 849, "ivy_arg": 849, "ivy_kwarg": 849, "453": 849, "_from_zero_dim_arrays_to_scalar": 849, "truth_value_test": 849, "visibl": 849, "unwieldi": 849, "squash": 849, "hide": [849, 874], "cleaner": 849, "caught": [849, 851], "rethrow": 849, "_print_traceback_histori": 849, "error_stack": 849, "axiserror": 849, "polici": [849, 854, 860, 862], "moreov": 849, "submoodul": 850, "test_jax_transpos": 850, "manipulaiton": 850, "test_jax": [850, 858], "test_numpi": [850, 858], "test_manipul": [850, 858, 860], "preconditionnotmet": 850, "densetensor": 850, "holder_": 850, "phi": 850, "dense_tensor_impl": 850, "array_and_ax": 850, "aaegbaegaqaaaaaaaaaaaaab": 850, "black": 851, "flake8": 851, "linter": 851, "autoflak": 851, "docformatt": 851, "pydocstyl": 851, "yaml": 851, "patch1687898304": 851, "8072": 851, "3516aed563": 851, "reformat": 851, "akshai": 851, "jain": 851, "gui": 851, "cryptic": 851, "garden": 851, "utc": 851, "didn": 851, "human": 851, "intervent": 851, "typo": 851, "ui": 851, "handle_array_like_without_promot": [852, 854], "to_native_arrays_and_back": [852, 854, 865], "handle_array_funct": [852, 854], "inputs_to_native_shap": [852, 854], "rational": [852, 856, 863], "__div__": [852, 863], "484": 852, "brittl": 852, "freeli": 852, "technic": [852, 856, 867, 878], "original_typ": 852, "cumbersom": 852, "hinder": [852, 871], "venn": 853, "diagram": 853, "light": [853, 861, 867, 869, 879], "maximis": 853, "encompass": 853, "partial_mixed_handl": [853, 854, 863], "handle_partial_mixed_funct": [853, 854, 863], "fn_decor": 853, "mixed_backend_wrapp": [853, 856], "to_add": 853, "to_skip": 853, "inputs_to_ivy_arrai": [853, 854], "modif": [853, 878], "briefli": [853, 860], "get_all_arrays_on_dev": 853, "outputs_to_ivy_shap": 854, "outputs_to_native_arrai": 854, "handle_view_index": [854, 856], "handle_view": [854, 856], "handle_rag": 854, "handle_backend_invalid": 854, "handle_nan": 854, "to_native_shapes_and_back": 854, "modern": 855, "inter_func": 855, "custom_grad_fn": 855, "args1": 855, "speak": 856, "val_n": 856, "base_idx": 856, "_manipulation_stack": 856, "base_flat": 856, "_view_ref": 856, "_update_view": 856, "contigu": 856, "c_contigu": 856, "ascontiguousarrai": 856, "copyto": 856, "_is_vari": 856, "tensor_scatter_nd_upd": 856, "is_vari": 856, "_update_torch_view": 856, "predominantli": [856, 861], "support_native_out": [856, 865], "_scalar_output_to_0d_arrai": 856, "_wrap_fn": 856, "dim0": 856, "dim1": 856, "res_floor": 856, "extent": [856, 857], "to_out_fn": 856, "add_wrapp": 856, "paradigm": [856, 867, 871, 878], "expans": [856, 871], "weak": 856, "_torch_bas": 856, "_torch_view_ref": 856, "_torch_manipul": 856, "weakli": 856, "adequ": 856, "tf_frontend": 857, "lax": [857, 858, 863, 865, 867], "torch_frontend": [857, 858], "numpy_frontend": 857, "jax_frontend": 857, "to_ivy_arrays_and_back": [857, 858], "fidel": 857, "algebra": [857, 878, 880], "dynamic": 857, "mimic": 857, "arithmetic_oper": 857, "handle_numpy_out": 857, "handle_numpy_dtyp": 857, "handle_numpy_cast": 857, "from_zero_dim_arrays_to_scalar": 857, "_add": 857, "same_kind": 857, "subok": [857, 858, 863], "promote_types_of_numpy_input": 857, "underscor": 857, "unhandl": 857, "trigonometric_funct": 857, "_tan": 857, "check_tensorflow_cast": 857, "raw_op": [857, 858], "map_raw_ops_alia": 857, "output_typ": 857, "kwargs_to_upd": 857, "pointwise_op": 857, "sensibl": 857, "ahead": [857, 861, 878], "reduce_logsumexp": 857, "logsumexp": 857, "trick": 857, "max_input_tensor": 857, "preferred_element_typ": 857, "languag": [857, 866, 869, 879], "finer": 857, "logicaland": 857, "np_frontend": 857, "_ivy_arrai": 857, "radd": 857, "_init_data": 857, "_process_str_data": 857, "_dtype": [857, 858], "_shape": 857, "govern": 857, "promote_types_of_": 857, "_input": 857, "promote_types_of_torch_input": [857, 858], "handle_numpy_casting_speci": 857, "new_fn": 857, "equiv": 857, "unsaf": 857, "array_type_test": 857, "_isfinit": 857, "organis": 857, "youtub": 857, "knowledg": [858, 872], "np_frontend_help": 858, "open_task": 858, "test_lax": 858, "test_oper": 858, "test_jax_tan": 858, "test_mathematical_funct": 858, "test_trigonometric_funct": 858, "dtypes_values_cast": 858, "dtypes_values_casting_dtyp": 858, "arr_func": 858, "get_num_positional_args_ufunc": 858, "test_numpy_tan": 858, "handle_where_and_array_bool": 858, "test_tensorflow": 858, "test_math": 858, "test_tensorflow_tan": 858, "test_pointwise_op": 858, "test_torch_tan": 858, "_fill_valu": 858, "test_glob": 858, "test_jax_ful": 858, "test_from_shape_or_valu": 858, "_input_fill_and_dtyp": 858, "dtype_and_input": 858, "dtype_to_cast": 858, "input_fill_dtyp": 858, "test_numpy_ful": 858, "test_raw_op": 858, "test_tensorflow_fil": 858, "test_creation_op": 858, "with_arrai": 858, "test_torch_ful": 858, "add_nois": 858, "all_clos": 858, "_get_dtype_and_matrix": 858, "test_torch_qr": 858, "frontend_q": 858, "frontend_r": 858, "walkthrough": 858, "comparison_op": 858, "test_comparison_op": 858, "test_torch_great": 858, "all_alias": 858, "test_ndarrai": 858, "test_numpy_instance_add__": 858, "test_tensorflow_instance_add": 858, "1e04": 858, "allow_infin": 858, "test_torch_instance_add": 858, "_arrays_idx_n_dtyp": 858, "surprisingli": 858, "closest_relevant_group": 858, "strive": [858, 860, 863, 867], "craft": [859, 860], "tailor": 859, "clariti": [859, 860, 863, 878], "weav": 859, "thrill": 859, "brim": 859, "stand": [859, 860], "landscap": [859, 872], "forese": 859, "refin": 859, "inquiri": 859, "fixtur": 860, "hit": [860, 874], "eleg": [860, 878], "unexplor": 860, "artifact": 860, "bespok": 860, "_array_or_typ": 860, "rigor": 860, "test_default_int_dtyp": 860, "print_hypothesis_exampl": 860, "custom_strategi": 860, "randomis": 860, "simplist": 860, "intricaci": 860, "glanc": 860, "one_of": 860, "datum": 860, "pipe": 860, "array_or_scal": 860, "len_of_arrai": 860, "test_add": 860, "test_gpu_is_avail": 860, "pretest": 860, "snippet": [860, 875], "frontend_test": 860, "frontend_method": 860, "criterion": 860, "valid_ax": 860, "hoc": 860, "11228": 860, "268": 860, "wherev": 860, "9622": 860, "28136": 860, "6375": 860, "12720": 860, "21354": 860, "900e": 860, "57384": 860, "25687": 860, "248": 860, "test_devic": 860, "array_shap": 860, "test_lay": 860, "some_sequ": 860, "arrays_valu": 860, "36418": 860, "21716926": 860, "none_or_list_of_float": 860, "get_prob": 860, "103515625e": 860, "099609375": 860, "probabilist": 860, "number_positional_argu": 860, "unreproduc": 860, "x_and_linear": 860, "is_torch_backend": 860, "x_shape": [860, 865], "weight_shap": 860, "bias_shap": 860, "ivy_np": 860, "valid_float_dtyp": 860, "test_demo": 860, "failing_test": 860, "shrink": 860, "prescrib": 860, "test_gelu": 860, "test_fil": 860, "notabl": [860, 878], "max_exampl": 860, "deadlin": 860, "weird": 860, "systemat": 860, "safeguard": 860, "inabl": 860, "test_result_typ": 860, "9090909090909091": 860, "judgement": 861, "some_namespac": 861, "some_backend": 861, "another_backend": 861, "refactor": 861, "ongo": 861, "check_fill_value_and_dtype_are_compat": 861, "_to_devic": 861, "shouldn": [861, 874], "pin": 861, "unpinn": 861, "culmin": 861, "unsett": 862, "array_significant_figur": 862, "array_decimal_valu": 862, "warning_level": 862, "nan_polici": 862, "stablest": 862, "constantli": 863, "answer": [863, 867], "contradict": 863, "entail": 863, "sacrif": 863, "jacfwd": 863, "jacrev": 863, "banner": 863, "expens": 863, "incredibli": [863, 867, 871], "price": 863, "pai": 863, "intrus": 863, "x_beta": 863, "equip": 863, "simplif": 863, "allevi": 863, "ineffici": [863, 867, 878], "fuse": 863, "hybrid": 863, "workaround": 863, "slip": 863, "radar": 863, "stumbl": 863, "syntact": 865, "power_seq": 865, "sparse_funct": 865, "_determine_backend_from_arg": 865, "importlib": 865, "_backend_dict": 865, "x_flat": 865, "wi": 865, "wi_x": 865, "wii_x": 865, "wif_x": 865, "wig_x": 865, "wio_x": 865, "wh": 865, "ht": 865, "ct": 865, "hts_list": 865, "wii_xt": 865, "wif_xt": 865, "wig_xt": 865, "wio_xt": 865, "htm1": 865, "ctm1": 865, "wh_htm1": 865, "whi_htm1": 865, "whf_htm1": 865, "whg_htm1": 865, "who_htm1": 865, "ft": 865, "ot": 865, "reliabl": 865, "sacrific": 865, "_linear": 866, "tfnetwork": 866, "translated_output": 866, "pure_ivi": 866, "pure_torch": 866, "unclean": 866, "wx": 866, "temp": 866, "ivy_func": 866, "emphas": 866, "example_input": 866, "static_argnum": [866, 874], "static_argnam": [866, 874], "matur": [867, 878], "doubt": 867, "grate": 867, "probe": 867, "lock": 867, "dex": 867, "primit": [867, 878], "tricki": [867, 869], "tight": 867, "dispatch": [867, 878], "ast": 867, "autodiff": 867, "shine": 867, "merci": 867, "compet": [867, 878], "parallelis": 867, "spmd": 867, "mixtur": 867, "expert": 867, "sophist": 867, "depart": 867, "hundr": 867, "broadli": 867, "supplementari": 867, "reusabl": [867, 878], "fanci": [867, 878], "fusion": 867, "lose": 867, "pmap": 867, "eventu": 867, "supplement": 867, "backdoor": 867, "callback": 867, "somewhat": [867, 878], "outsourc": 867, "appl": 868, "silicon": 868, "ivy_root": 868, "asap": 868, "nail": 869, "scientist": 869, "handler": 869, "correl": 869, "con": 871, "renown": 871, "traction": [871, 878], "invest": 871, "worsen": 871, "mlx": 871, "exemplifi": 871, "diversif": 871, "painless": 871, "interoper": [872, 878, 880], "divers": [872, 880], "downstream": 872, "consequ": 872, "colleagu": 872, "collabor": 872, "constrain": 872, "prototyp": [872, 878], "legaci": 872, "painstak": 872, "publicli": [874, 875, 876], "logger": 874, "arg_stateful_idx": 874, "kwarg_stateful_idx": 874, "include_gener": 874, "array_cach": 874, "return_backend_traced_fn": 874, "lazygraph": [874, 875, 876], "sum_j": 874, "traced_fn": 874, "impos": 874, "comp_func": 874, "bake": 874, "cont": 874, "new_attribut": 874, "wip": 874, "resnet50": 874, "breed": 874, "resnetforimageclassif": [874, 875], "traced_graph": 874, "predicted_label": 874, "debug_mod": 875, "rough": 875, "transformed_with_st": 875, "bigger": 875, "hf": 875, "tf_model": 875, "transpile_kwarg": 876, "transpiled_func": 876, "unified_func": 876, "onnx": 877, "acycl": [877, 879], "promin": 878, "abbrevi": 878, "laboratori": 878, "proprietari": 878, "mathwork": 878, "commerci": 878, "1984": 878, "toolbox": 878, "mupad": 878, "simulink": 878, "graphic": 878, "simul": 878, "million": 878, "worldwid": 878, "scienc": 878, "econom": 878, "2001": 878, "od": 878, "solver": 878, "cython": 878, "friendli": 878, "2002": 878, "lua": 878, "luajit": 878, "idiap": 878, "epfl": 878, "2005": 878, "numarrai": 878, "cpython": 878, "partli": 878, "2007": 878, "forest": 878, "boost": 878, "dbscan": 878, "inbuilt": 878, "esqu": 878, "aesara": 878, "2012": 878, "polymorph": 878, "mpi": 878, "openmp": 878, "glue": 878, "jaot": 878, "nasa": 878, "cern": 878, "climat": 878, "allianc": 878, "influenti": 878, "2014": 878, "scala": 878, "ship": 878, "forgiv": 878, "2015": 878, "cupi": 878, "decemb": 878, "announc": 878, "mainten": 878, "meaning": 878, "hierarch": 878, "2016": 878, "imper": 878, "amazon": 878, "cognit": 878, "grade": 878, "dnn": 878, "backpropag": 878, "succumb": 878, "came": 878, "monitor": 878, "hobbyist": 878, "tremend": 878, "gear": 878, "batteri": 878, "principl": 878, "zygot": 878, "jl": 878, "workload": 878, "daggerflux": 878, "frontier": 878, "hessian": 878, "2018": 878, "lightweight": 878, "shortcom": 878, "barrier": 878, "inexperienc": 878, "underdevelop": 878, "fanat": 878, "ounc": 878, "infanc": 878, "nich": 878, "mobil": 878, "lite": 878, "enterpris": 878, "reinvent": 878, "inertia": 878, "creator": 878, "paszk": 878, "spend": 878, "hi": 878, "bulk": 878, "haskel": 878, "inevit": 879, "sit": 879, "dataflow": 879, "trace_modul": 879, "scriptfunct": 879, "scriptmodul": 879, "fake": 879, "proxi": 879, "graphmodul": 879, "holist": 880, "ultmat": 880, "broader": 880}, "objects": {"ivy.Array": [[232, 0, 1, "", "abs"], [233, 0, 1, "", "acos"], [234, 0, 1, "", "acosh"], [627, 0, 1, "", "adam_step"], [628, 0, 1, "", "adam_update"], [401, 0, 1, "", "adaptive_avg_pool1d"], [402, 0, 1, "", "adaptive_avg_pool2d"], [403, 0, 1, "", "adaptive_max_pool2d"], [404, 0, 1, "", "adaptive_max_pool3d"], [235, 0, 1, "", "add"], [436, 0, 1, "", "adjoint"], [782, 0, 1, "", "all"], [546, 0, 1, "", "all_equal"], [346, 0, 1, "", "allclose"], [347, 0, 1, "", "amax"], [348, 0, 1, "", "amin"], [236, 0, 1, "", "angle"], [783, 0, 1, "", "any"], [759, 0, 1, "", "argmax"], [760, 0, 1, "", "argmin"], [768, 0, 1, "", "argsort"], [761, 0, 1, "", "argwhere"], [549, 0, 1, "", "array_equal"], [472, 0, 1, "", "as_strided"], [140, 0, 1, "", "asarray"], [237, 0, 1, "", "asin"], [238, 0, 1, "", "asinh"], [550, 0, 1, "", "assert_supports_inplace"], [473, 0, 1, "", "associative_scan"], [164, 0, 1, "", "astype"], [239, 0, 1, "", "atan"], [240, 0, 1, "", "atan2"], [241, 0, 1, "", "atanh"], [474, 0, 1, "", "atleast_1d"], [475, 0, 1, "", "atleast_2d"], [476, 0, 1, "", "atleast_3d"], [406, 0, 1, "", "avg_pool1d"], [407, 0, 1, "", "avg_pool2d"], [408, 0, 1, "", "avg_pool3d"], [513, 0, 1, "", "batch_norm"], [437, 0, 1, "", "batched_outer"], [520, 0, 1, "", "bernoulli"], [521, 0, 1, "", "beta"], [349, 0, 1, "", "binarizer"], [708, 0, 1, "", "binary_cross_entropy"], [532, 0, 1, "", "bincount"], [242, 0, 1, "", "bitwise_and"], [243, 0, 1, "", "bitwise_invert"], [244, 0, 1, "", "bitwise_left_shift"], [245, 0, 1, "", "bitwise_or"], [246, 0, 1, "", "bitwise_right_shift"], [247, 0, 1, "", "bitwise_xor"], [324, 0, 1, "", "blackman_window"], [165, 0, 1, "", "broadcast_arrays"], [166, 0, 1, "", "broadcast_to"], [167, 0, 1, "", "can_cast"], [248, 0, 1, "", "ceil"], [307, 0, 1, "", "celu"], [679, 0, 1, "", "cholesky"], [714, 0, 1, "", "clip"], [552, 0, 1, "", "clip_matrix_norm"], [553, 0, 1, "", "clip_vector_norm"], [480, 0, 1, "", "column_stack"], [715, 0, 1, "", "concat"], [481, 0, 1, "", "concat_from_sequence"], [438, 0, 1, "", "cond"], [350, 0, 1, "", "conj"], [716, 0, 1, "", "constant_pad"], [662, 0, 1, "", "conv1d"], [663, 0, 1, "", "conv1d_transpose"], [664, 0, 1, "", "conv2d"], [665, 0, 1, "", "conv2d_transpose"], [666, 0, 1, "", "conv3d"], [667, 0, 1, "", "conv3d_transpose"], [141, 0, 1, "", "copy_array"], [351, 0, 1, "", "copysign"], [533, 0, 1, "", "corrcoef"], [249, 0, 1, "", "cos"], [250, 0, 1, "", "cosh"], [352, 0, 1, "", "count_nonzero"], [534, 0, 1, "", "cov"], [680, 0, 1, "", "cross"], [709, 0, 1, "", "cross_entropy"], [535, 0, 1, "", "cummax"], [536, 0, 1, "", "cummin"], [772, 0, 1, "", "cumprod"], [773, 0, 1, "", "cumsum"], [409, 0, 1, "", "dct"], [556, 0, 1, "", "default"], [251, 0, 1, "", "deg2rad"], [670, 0, 1, "", "depthwise_conv2d"], [681, 0, 1, "", "det"], [209, 0, 1, "", "dev"], [410, 0, 1, "", "dft"], [682, 0, 1, "", "diag"], [439, 0, 1, "", "diagflat"], [683, 0, 1, "", "diagonal"], [353, 0, 1, "", "diff"], [354, 0, 1, "", "digamma"], [522, 0, 1, "", "dirichlet"], [252, 0, 1, "", "divide"], [440, 0, 1, "", "dot"], [671, 0, 1, "", "dropout"], [411, 0, 1, "", "dropout1d"], [412, 0, 1, "", "dropout2d"], [413, 0, 1, "", "dropout3d"], [482, 0, 1, "", "dsplit"], [483, 0, 1, "", "dstack"], [175, 0, 1, "", "dtype"], [441, 0, 1, "", "eig"], [685, 0, 1, "", "eigh"], [442, 0, 1, "", "eigh_tridiagonal"], [443, 0, 1, "", "eigvals"], [686, 0, 1, "", "eigvalsh"], [557, 0, 1, "", "einops_rearrange"], [558, 0, 1, "", "einops_reduce"], [559, 0, 1, "", "einops_repeat"], [774, 0, 1, "", "einsum"], [308, 0, 1, "", "elu"], [414, 0, 1, "", "embedding"], [143, 0, 1, "", "empty_like"], [253, 0, 1, "", "equal"], [254, 0, 1, "", "erf"], [355, 0, 1, "", "erfc"], [356, 0, 1, "", "erfinv"], [560, 0, 1, "", "exists"], [255, 0, 1, "", "exp"], [256, 0, 1, "", "exp2"], [484, 0, 1, "", "expand"], [717, 0, 1, "", "expand_dims"], [257, 0, 1, "", "expm1"], [325, 0, 1, "", "eye_like"], [415, 0, 1, "", "fft"], [416, 0, 1, "", "fft2"], [485, 0, 1, "", "fill_diagonal"], [177, 0, 1, "", "finfo"], [357, 0, 1, "", "fix"], [486, 0, 1, "", "flatten"], [718, 0, 1, "", "flip"], [487, 0, 1, "", "fliplr"], [488, 0, 1, "", "flipud"], [358, 0, 1, "", "float_power"], [258, 0, 1, "", "floor"], [259, 0, 1, "", "floor_divide"], [359, 0, 1, "", "fmax"], [260, 0, 1, "", "fmin"], [261, 0, 1, "", "fmod"], [489, 0, 1, "", "fold"], [561, 0, 1, "", "fourier_encode"], [360, 0, 1, "", "frexp"], [145, 0, 1, "", "from_dlpack"], [148, 0, 1, "", "full_like"], [523, 0, 1, "", "gamma"], [564, 0, 1, "", "gather"], [565, 0, 1, "", "gather_nd"], [262, 0, 1, "", "gcd"], [122, 0, 1, "", "gelu"], [444, 0, 1, "", "general_inner_product"], [568, 0, 1, "", "get_num_dims"], [361, 0, 1, "", "gradient"], [631, 0, 1, "", "gradient_descent_update"], [263, 0, 1, "", "greater"], [264, 0, 1, "", "greater_equal"], [514, 0, 1, "", "group_norm"], [309, 0, 1, "", "hardshrink"], [310, 0, 1, "", "hardsilu"], [123, 0, 1, "", "hardswish"], [311, 0, 1, "", "hardtanh"], [570, 0, 1, "", "has_nans"], [490, 0, 1, "", "heaviside"], [445, 0, 1, "", "higher_order_moment"], [464, 0, 1, "", "hinge_embedding_loss"], [537, 0, 1, "", "histogram"], [491, 0, 1, "", "hsplit"], [492, 0, 1, "", "hstack"], [465, 0, 1, "", "huber_loss"], [362, 0, 1, "", "hypot"], [493, 0, 1, "", "i0"], [419, 0, 1, "", "idct"], [420, 0, 1, "", "ifft"], [421, 0, 1, "", "ifftn"], [538, 0, 1, "", "igamma"], [180, 0, 1, "", "iinfo"], [265, 0, 1, "", "imag"], [446, 0, 1, "", "initialize_tucker"], [687, 0, 1, "", "inner"], [572, 0, 1, "", "inplace_decrement"], [573, 0, 1, "", "inplace_increment"], [574, 0, 1, "", "inplace_update"], [515, 0, 1, "", "instance_norm"], [423, 0, 1, "", "interpolate"], [688, 0, 1, "", "inv"], [576, 0, 1, "", "is_array"], [183, 0, 1, "", "is_bool_dtype"], [185, 0, 1, "", "is_float_dtype"], [187, 0, 1, "", "is_int_dtype"], [577, 0, 1, "", "is_ivy_array"], [578, 0, 1, "", "is_ivy_container"], [580, 0, 1, "", "is_native_array"], [189, 0, 1, "", "is_uint_dtype"], [363, 0, 1, "", "isclose"], [266, 0, 1, "", "isfinite"], [581, 0, 1, "", "isin"], [267, 0, 1, "", "isinf"], [268, 0, 1, "", "isnan"], [269, 0, 1, "", "isreal"], [583, 0, 1, "", "itemsize"], [466, 0, 1, "", "kl_div"], [448, 0, 1, "", "kron"], [467, 0, 1, "", "l1_loss"], [516, 0, 1, "", "l1_normalize"], [517, 0, 1, "", "l2_normalize"], [633, 0, 1, "", "lamb_update"], [634, 0, 1, "", "lars_update"], [752, 0, 1, "", "layer_norm"], [270, 0, 1, "", "lcm"], [364, 0, 1, "", "ldexp"], [124, 0, 1, "", "leaky_relu"], [365, 0, 1, "", "lerp"], [271, 0, 1, "", "less"], [272, 0, 1, "", "less_equal"], [527, 0, 1, "", "lexsort"], [366, 0, 1, "", "lgamma"], [672, 0, 1, "", "linear"], [149, 0, 1, "", "linspace"], [273, 0, 1, "", "log"], [274, 0, 1, "", "log10"], [275, 0, 1, "", "log1p"], [276, 0, 1, "", "log2"], [468, 0, 1, "", "log_poisson_loss"], [125, 0, 1, "", "log_softmax"], [277, 0, 1, "", "logaddexp"], [278, 0, 1, "", "logaddexp2"], [279, 0, 1, "", "logical_and"], [280, 0, 1, "", "logical_not"], [281, 0, 1, "", "logical_or"], [282, 0, 1, "", "logical_xor"], [312, 0, 1, "", "logit"], [313, 0, 1, "", "logsigmoid"], [150, 0, 1, "", "logspace"], [519, 0, 1, "", "lp_normalize"], [674, 0, 1, "", "lstm_update"], [452, 0, 1, "", "make_svd_non_negative"], [689, 0, 1, "", "matmul"], [494, 0, 1, "", "matricize"], [453, 0, 1, "", "matrix_exp"], [690, 0, 1, "", "matrix_norm"], [691, 0, 1, "", "matrix_power"], [692, 0, 1, "", "matrix_rank"], [693, 0, 1, "", "matrix_transpose"], [775, 0, 1, "", "max"], [424, 0, 1, "", "max_pool1d"], [425, 0, 1, "", "max_pool2d"], [426, 0, 1, "", "max_pool3d"], [427, 0, 1, "", "max_unpool1d"], [283, 0, 1, "", "maximum"], [776, 0, 1, "", "mean"], [539, 0, 1, "", "median"], [331, 0, 1, "", "mel_weight_matrix"], [151, 0, 1, "", "meshgrid"], [777, 0, 1, "", "min"], [284, 0, 1, "", "minimum"], [126, 0, 1, "", "mish"], [454, 0, 1, "", "mode_dot"], [367, 0, 1, "", "modf"], [495, 0, 1, "", "moveaxis"], [769, 0, 1, "", "msort"], [455, 0, 1, "", "multi_dot"], [675, 0, 1, "", "multi_head_attention"], [456, 0, 1, "", "multi_mode_dot"], [753, 0, 1, "", "multinomial"], [285, 0, 1, "", "multiply"], [286, 0, 1, "", "nan_to_num"], [540, 0, 1, "", "nanmean"], [541, 0, 1, "", "nanmedian"], [542, 0, 1, "", "nanmin"], [543, 0, 1, "", "nanprod"], [368, 0, 1, "", "nansum"], [152, 0, 1, "", "native_array"], [287, 0, 1, "", "negative"], [369, 0, 1, "", "nextafter"], [762, 0, 1, "", "nonzero"], [288, 0, 1, "", "not_equal"], [153, 0, 1, "", "one_hot"], [155, 0, 1, "", "ones_like"], [635, 0, 1, "", "optimizer_update"], [545, 0, 1, "", "optional_get_element"], [694, 0, 1, "", "outer"], [496, 0, 1, "", "pad"], [497, 0, 1, "", "partial_fold"], [498, 0, 1, "", "partial_tensor_to_vec"], [457, 0, 1, "", "partial_tucker"], [499, 0, 1, "", "partial_unfold"], [500, 0, 1, "", "partial_vec_to_tensor"], [719, 0, 1, "", "permute_dims"], [695, 0, 1, "", "pinv"], [524, 0, 1, "", "poisson"], [469, 0, 1, "", "poisson_nll_loss"], [289, 0, 1, "", "positive"], [290, 0, 1, "", "pow"], [314, 0, 1, "", "prelu"], [778, 0, 1, "", "prod"], [501, 0, 1, "", "put_along_axis"], [696, 0, 1, "", "qr"], [544, 0, 1, "", "quantile"], [291, 0, 1, "", "rad2deg"], [754, 0, 1, "", "randint"], [755, 0, 1, "", "random_normal"], [756, 0, 1, "", "random_uniform"], [292, 0, 1, "", "real"], [293, 0, 1, "", "reciprocal"], [375, 0, 1, "", "reduce"], [430, 0, 1, "", "reduce_window"], [127, 0, 1, "", "relu"], [315, 0, 1, "", "relu6"], [294, 0, 1, "", "remainder"], [720, 0, 1, "", "repeat"], [721, 0, 1, "", "reshape"], [192, 0, 1, "", "result_type"], [431, 0, 1, "", "rfft"], [432, 0, 1, "", "rfftn"], [722, 0, 1, "", "roll"], [502, 0, 1, "", "rot90"], [295, 0, 1, "", "round"], [678, 0, 1, "", "scaled_dot_product_attention"], [316, 0, 1, "", "scaled_tanh"], [588, 0, 1, "", "scatter_flat"], [589, 0, 1, "", "scatter_nd"], [770, 0, 1, "", "searchsorted"], [317, 0, 1, "", "selu"], [602, 0, 1, "", "shape"], [758, 0, 1, "", "shuffle"], [128, 0, 1, "", "sigmoid"], [296, 0, 1, "", "sign"], [370, 0, 1, "", "signbit"], [318, 0, 1, "", "silu"], [297, 0, 1, "", "sin"], [371, 0, 1, "", "sinc"], [298, 0, 1, "", "sinh"], [603, 0, 1, "", "size"], [434, 0, 1, "", "sliding_window"], [697, 0, 1, "", "slogdet"], [470, 0, 1, "", "smooth_l1_loss"], [471, 0, 1, "", "soft_margin_loss"], [503, 0, 1, "", "soft_thresholding"], [129, 0, 1, "", "softmax"], [130, 0, 1, "", "softplus"], [319, 0, 1, "", "softshrink"], [698, 0, 1, "", "solve"], [771, 0, 1, "", "sort"], [710, 0, 1, "", "sparse_cross_entropy"], [372, 0, 1, "", "sparsify_tensor"], [723, 0, 1, "", "split"], [299, 0, 1, "", "sqrt"], [300, 0, 1, "", "square"], [724, 0, 1, "", "squeeze"], [604, 0, 1, "", "stable_divide"], [605, 0, 1, "", "stable_pow"], [725, 0, 1, "", "stack"], [779, 0, 1, "", "std"], [435, 0, 1, "", "stft"], [636, 0, 1, "", "stop_gradient"], [606, 0, 1, "", "strides"], [301, 0, 1, "", "subtract"], [780, 0, 1, "", "sum"], [607, 0, 1, "", "supports_inplace_updates"], [699, 0, 1, "", "svd"], [459, 0, 1, "", "svd_flip"], [700, 0, 1, "", "svdvals"], [726, 0, 1, "", "swapaxes"], [504, 0, 1, "", "take"], [505, 0, 1, "", "take_along_axis"], [302, 0, 1, "", "tan"], [303, 0, 1, "", "tanh"], [321, 0, 1, "", "tanhshrink"], [460, 0, 1, "", "tensor_train"], [701, 0, 1, "", "tensordot"], [702, 0, 1, "", "tensorsolve"], [322, 0, 1, "", "threshold"], [323, 0, 1, "", "thresholded_relu"], [727, 0, 1, "", "tile"], [226, 0, 1, "", "to_device"], [609, 0, 1, "", "to_list"], [611, 0, 1, "", "to_numpy"], [612, 0, 1, "", "to_scalar"], [506, 0, 1, "", "top_k"], [703, 0, 1, "", "trace"], [304, 0, 1, "", "trapz"], [157, 0, 1, "", "tril"], [341, 0, 1, "", "trilu"], [507, 0, 1, "", "trim_zeros"], [158, 0, 1, "", "triu"], [305, 0, 1, "", "trunc"], [306, 0, 1, "", "trunc_divide"], [461, 0, 1, "", "truncated_svd"], [462, 0, 1, "", "tt_matrix_to_tensor"], [463, 0, 1, "", "tucker"], [508, 0, 1, "", "unflatten"], [509, 0, 1, "", "unfold"], [764, 0, 1, "", "unique_all"], [510, 0, 1, "", "unique_consecutive"], [765, 0, 1, "", "unique_counts"], [766, 0, 1, "", "unique_inverse"], [767, 0, 1, "", "unique_values"], [525, 0, 1, "", "unravel_index"], [342, 0, 1, "", "unsorted_segment_mean"], [343, 0, 1, "", "unsorted_segment_min"], [344, 0, 1, "", "unsorted_segment_sum"], [728, 0, 1, "", "unstack"], [625, 0, 1, "", "value_is_nan"], [704, 0, 1, "", "vander"], [781, 0, 1, "", "var"], [705, 0, 1, "", "vecdot"], [706, 0, 1, "", "vector_norm"], [707, 0, 1, "", "vector_to_skew_symmetric_matrix"], [511, 0, 1, "", "vsplit"], [512, 0, 1, "", "vstack"], [763, 0, 1, "", "where"], [373, 0, 1, "", "xlogy"], [729, 0, 1, "", "zero_pad"], [161, 0, 1, "", "zeros_like"], [374, 0, 1, "", "zeta"]], "ivy": [[646, 1, 1, "", "ArrayMode"], [642, 1, 1, "", "DefaultComplexDtype"], [643, 1, 1, "", "DefaultDevice"], [642, 1, 1, "", "DefaultDtype"], [642, 1, 1, "", "DefaultFloatDtype"], [642, 1, 1, "", "DefaultIntDtype"], [642, 1, 1, "", "DefaultUintDtype"], [398, 1, 1, "", "NativeSparseArray"], [641, 1, 1, "", "NestedSequence"], [646, 1, 1, "", "PreciseMode"], [643, 1, 1, "", "Profiler"], [398, 1, 1, "", "SparseArray"], [232, 2, 1, "", "abs"], [233, 2, 1, "", "acos"], [234, 2, 1, "", "acosh"], [647, 2, 1, "", "adam_step"], [647, 2, 1, "", "adam_update"], [401, 2, 1, "", "adaptive_avg_pool1d"], [402, 2, 1, "", "adaptive_avg_pool2d"], [403, 2, 1, "", "adaptive_max_pool2d"], [404, 2, 1, "", "adaptive_max_pool3d"], [235, 2, 1, "", "add"], [388, 2, 1, "", "adjoint"], [660, 2, 1, "", "all"], [546, 2, 1, "", "all_equal"], [653, 2, 1, "", "all_nested_indices"], [384, 2, 1, "", "allclose"], [384, 2, 1, "", "amax"], [384, 2, 1, "", "amin"], [236, 2, 1, "", "angle"], [660, 2, 1, "", "any"], [641, 2, 1, "", "arange"], [405, 2, 1, "", "area_interpolate"], [547, 2, 1, "", "arg_info"], [548, 2, 1, "", "arg_names"], [656, 2, 1, "", "argmax"], [656, 2, 1, "", "argmin"], [658, 2, 1, "", "argsort"], [656, 2, 1, "", "argwhere"], [641, 2, 1, "", "array"], [549, 2, 1, "", "array_equal"], [205, 2, 1, "", "as_ivy_dev"], [642, 2, 1, "", "as_ivy_dtype"], [206, 2, 1, "", "as_native_dev"], [642, 2, 1, "", "as_native_dtype"], [390, 2, 1, "", "as_strided"], [641, 2, 1, "", "asarray"], [237, 2, 1, "", "asin"], [238, 2, 1, "", "asinh"], [550, 2, 1, "", "assert_supports_inplace"], [390, 2, 1, "", "associative_scan"], [642, 2, 1, "", "astype"], [239, 2, 1, "", "atan"], [240, 2, 1, "", "atan2"], [241, 2, 1, "", "atanh"], [390, 2, 1, "", "atleast_1d"], [390, 2, 1, "", "atleast_2d"], [390, 2, 1, "", "atleast_3d"], [406, 2, 1, "", "avg_pool1d"], [407, 2, 1, "", "avg_pool2d"], [408, 2, 1, "", "avg_pool3d"], [393, 2, 1, "", "batch_norm"], [388, 2, 1, "", "batched_outer"], [394, 2, 1, "", "bernoulli"], [394, 2, 1, "", "beta"], [384, 2, 1, "", "binarizer"], [650, 2, 1, "", "binary_cross_entropy"], [399, 2, 1, "", "bincount"], [386, 2, 1, "", "bind_custom_gradient_function"], [242, 2, 1, "", "bitwise_and"], [243, 2, 1, "", "bitwise_invert"], [244, 2, 1, "", "bitwise_left_shift"], [245, 2, 1, "", "bitwise_or"], [246, 2, 1, "", "bitwise_right_shift"], [247, 2, 1, "", "bitwise_xor"], [381, 2, 1, "", "blackman_window"], [642, 2, 1, "", "broadcast_arrays"], [390, 2, 1, "", "broadcast_shapes"], [642, 2, 1, "", "broadcast_to"], [551, 2, 1, "", "cache_fn"], [642, 2, 1, "", "can_cast"], [248, 2, 1, "", "ceil"], [379, 2, 1, "", "celu"], [642, 2, 1, "", "check_float"], [390, 2, 1, "", "check_scalar"], [679, 2, 1, "", "cholesky"], [390, 2, 1, "", "choose"], [207, 2, 1, "", "clear_cached_mem_on_dev"], [651, 2, 1, "", "clip"], [552, 2, 1, "", "clip_matrix_norm"], [553, 2, 1, "", "clip_vector_norm"], [642, 2, 1, "", "closest_valid_dtype"], [640, 2, 1, "", "cmp_is"], [640, 2, 1, "", "cmp_isnot"], [390, 2, 1, "", "column_stack"], [651, 2, 1, "", "concat"], [390, 2, 1, "", "concat_from_sequence"], [388, 2, 1, "", "cond"], [384, 2, 1, "", "conj"], [651, 2, 1, "", "constant_pad"], [554, 2, 1, "", "container_types"], [661, 2, 1, "", "conv"], [662, 2, 1, "", "conv1d"], [663, 2, 1, "", "conv1d_transpose"], [664, 2, 1, "", "conv2d"], [665, 2, 1, "", "conv2d_transpose"], [666, 2, 1, "", "conv3d"], [667, 2, 1, "", "conv3d_transpose"], [668, 2, 1, "", "conv_general_dilated"], [669, 2, 1, "", "conv_general_transpose"], [641, 2, 1, "", "copy_array"], [653, 2, 1, "", "copy_nest"], [384, 2, 1, "", "copysign"], [399, 2, 1, "", "corrcoef"], [249, 2, 1, "", "cos"], [250, 2, 1, "", "cosh"], [384, 2, 1, "", "count_nonzero"], [399, 2, 1, "", "cov"], [680, 2, 1, "", "cross"], [650, 2, 1, "", "cross_entropy"], [399, 2, 1, "", "cummax"], [399, 2, 1, "", "cummin"], [659, 2, 1, "", "cumprod"], [659, 2, 1, "", "cumsum"], [555, 2, 1, "", "current_backend_str"], [409, 2, 1, "", "dct"], [556, 2, 1, "", "default"], [642, 2, 1, "", "default_complex_dtype"], [208, 2, 1, "", "default_device"], [642, 2, 1, "", "default_dtype"], [642, 2, 1, "", "default_float_dtype"], [642, 2, 1, "", "default_int_dtype"], [642, 2, 1, "", "default_uint_dtype"], [251, 2, 1, "", "deg2rad"], [670, 2, 1, "", "depthwise_conv2d"], [681, 2, 1, "", "det"], [209, 2, 1, "", "dev"], [210, 2, 1, "", "dev_util"], [410, 2, 1, "", "dft"], [682, 2, 1, "", "diag"], [388, 2, 1, "", "diagflat"], [683, 2, 1, "", "diagonal"], [384, 2, 1, "", "diff"], [384, 2, 1, "", "digamma"], [394, 2, 1, "", "dirichlet"], [252, 2, 1, "", "divide"], [388, 2, 1, "", "dot"], [671, 2, 1, "", "dropout"], [411, 2, 1, "", "dropout1d"], [412, 2, 1, "", "dropout2d"], [413, 2, 1, "", "dropout3d"], [390, 2, 1, "", "dsplit"], [390, 2, 1, "", "dstack"], [642, 2, 1, "", "dtype"], [642, 2, 1, "", "dtype_bits"], [653, 2, 1, "", "duplicate_array_index_chains"], [639, 6, 1, "", "e"], [388, 2, 1, "", "eig"], [685, 2, 1, "", "eigh"], [388, 2, 1, "", "eigh_tridiagonal"], [388, 2, 1, "", "eigvals"], [686, 2, 1, "", "eigvalsh"], [557, 2, 1, "", "einops_rearrange"], [558, 2, 1, "", "einops_reduce"], [559, 2, 1, "", "einops_repeat"], [659, 2, 1, "", "einsum"], [379, 2, 1, "", "elu"], [387, 2, 1, "", "embedding"], [641, 2, 1, "", "empty"], [641, 2, 1, "", "empty_like"], [253, 2, 1, "", "equal"], [254, 2, 1, "", "erf"], [384, 2, 1, "", "erfc"], [384, 2, 1, "", "erfinv"], [647, 2, 1, "", "execute_with_gradients"], [560, 2, 1, "", "exists"], [255, 2, 1, "", "exp"], [256, 2, 1, "", "exp2"], [390, 2, 1, "", "expand"], [651, 2, 1, "", "expand_dims"], [257, 2, 1, "", "expm1"], [641, 2, 1, "", "eye"], [381, 2, 1, "", "eye_like"], [387, 2, 1, "", "fft"], [387, 2, 1, "", "fft2"], [390, 2, 1, "", "fill_diagonal"], [642, 2, 1, "", "finfo"], [384, 2, 1, "", "fix"], [390, 2, 1, "", "flatten"], [651, 2, 1, "", "flip"], [390, 2, 1, "", "fliplr"], [390, 2, 1, "", "flipud"], [384, 2, 1, "", "float_power"], [258, 2, 1, "", "floor"], [259, 2, 1, "", "floor_divide"], [384, 2, 1, "", "fmax"], [260, 2, 1, "", "fmin"], [261, 2, 1, "", "fmod"], [390, 2, 1, "", "fold"], [652, 2, 1, "", "fomaml_step"], [640, 2, 1, "", "for_loop"], [561, 2, 1, "", "fourier_encode"], [384, 2, 1, "", "frexp"], [641, 2, 1, "", "from_dlpack"], [641, 2, 1, "", "frombuffer"], [641, 2, 1, "", "full"], [641, 2, 1, "", "full_like"], [211, 2, 1, "", "function_supported_devices"], [562, 2, 1, "", "function_supported_devices_and_dtypes"], [642, 2, 1, "", "function_supported_dtypes"], [212, 2, 1, "", "function_unsupported_devices"], [563, 2, 1, "", "function_unsupported_devices_and_dtypes"], [642, 2, 1, "", "function_unsupported_dtypes"], [394, 2, 1, "", "gamma"], [564, 2, 1, "", "gather"], [565, 2, 1, "", "gather_nd"], [262, 2, 1, "", "gcd"], [638, 2, 1, "", "gelu"], [388, 2, 1, "", "general_inner_product"], [387, 2, 1, "", "generate_einsum_equation"], [566, 2, 1, "", "get_all_arrays_in_memory"], [213, 2, 1, "", "get_all_ivy_arrays_on_dev"], [387, 2, 1, "", "get_interpolate_kernel"], [567, 2, 1, "", "get_item"], [568, 2, 1, "", "get_num_dims"], [569, 2, 1, "", "get_referrers_recursive"], [214, 2, 1, "", "gpu_is_available"], [647, 2, 1, "", "grad"], [384, 2, 1, "", "gradient"], [647, 2, 1, "", "gradient_descent_update"], [263, 2, 1, "", "greater"], [264, 2, 1, "", "greater_equal"], [393, 2, 1, "", "group_norm"], [381, 2, 1, "", "hamming_window"], [215, 2, 1, "", "handle_soft_device_variable"], [381, 2, 1, "", "hann_window"], [379, 2, 1, "", "hardshrink"], [379, 2, 1, "", "hardsilu"], [638, 2, 1, "", "hardswish"], [379, 2, 1, "", "hardtanh"], [570, 2, 1, "", "has_nans"], [390, 2, 1, "", "heaviside"], [388, 2, 1, "", "higher_order_moment"], [389, 2, 1, "", "hinge_embedding_loss"], [399, 2, 1, "", "histogram"], [390, 2, 1, "", "hsplit"], [390, 2, 1, "", "hstack"], [389, 2, 1, "", "huber_loss"], [384, 2, 1, "", "hypot"], [390, 2, 1, "", "i0"], [387, 2, 1, "", "idct"], [640, 2, 1, "", "if_else"], [387, 2, 1, "", "ifft"], [387, 2, 1, "", "ifftn"], [399, 2, 1, "", "igamma"], [642, 2, 1, "", "iinfo"], [265, 2, 1, "", "imag"], [653, 2, 1, "", "index_nest"], [381, 2, 1, "", "indices"], [639, 6, 1, "", "inf"], [642, 2, 1, "", "infer_default_dtype"], [388, 2, 1, "", "initialize_tucker"], [687, 2, 1, "", "inner"], [571, 2, 1, "", "inplace_arrays_supported"], [572, 2, 1, "", "inplace_decrement"], [573, 2, 1, "", "inplace_increment"], [574, 2, 1, "", "inplace_update"], [575, 2, 1, "", "inplace_variables_supported"], [653, 2, 1, "", "insert_into_nest_at_index"], [653, 2, 1, "", "insert_into_nest_at_indices"], [393, 2, 1, "", "instance_norm"], [387, 2, 1, "", "interp"], [387, 2, 1, "", "interpolate"], [688, 2, 1, "", "inv"], [642, 2, 1, "", "invalid_dtype"], [397, 2, 1, "", "invert_permutation"], [576, 2, 1, "", "is_array"], [642, 2, 1, "", "is_bool_dtype"], [184, 2, 1, "", "is_complex_dtype"], [185, 2, 1, "", "is_float_dtype"], [186, 2, 1, "", "is_hashable_dtype"], [187, 2, 1, "", "is_int_dtype"], [577, 2, 1, "", "is_ivy_array"], [578, 2, 1, "", "is_ivy_container"], [579, 2, 1, "", "is_ivy_nested_array"], [398, 2, 1, "", "is_ivy_sparse_array"], [580, 2, 1, "", "is_native_array"], [188, 2, 1, "", "is_native_dtype"], [398, 2, 1, "", "is_native_sparse_array"], [189, 2, 1, "", "is_uint_dtype"], [384, 2, 1, "", "isclose"], [266, 2, 1, "", "isfinite"], [581, 2, 1, "", "isin"], [267, 2, 1, "", "isinf"], [268, 2, 1, "", "isnan"], [269, 2, 1, "", "isreal"], [582, 2, 1, "", "isscalar"], [583, 2, 1, "", "itemsize"], [647, 2, 1, "", "jac"], [386, 2, 1, "", "jvp"], [381, 2, 1, "", "kaiser_bessel_derived_window"], [381, 2, 1, "", "kaiser_window"], [388, 2, 1, "", "khatri_rao"], [389, 2, 1, "", "kl_div"], [388, 2, 1, "", "kron"], [388, 2, 1, "", "kronecker"], [389, 2, 1, "", "l1_loss"], [393, 2, 1, "", "l1_normalize"], [393, 2, 1, "", "l2_normalize"], [647, 2, 1, "", "lamb_update"], [647, 2, 1, "", "lars_update"], [654, 2, 1, "", "layer_norm"], [270, 2, 1, "", "lcm"], [384, 2, 1, "", "ldexp"], [638, 2, 1, "", "leaky_relu"], [384, 2, 1, "", "lerp"], [271, 2, 1, "", "less"], [272, 2, 1, "", "less_equal"], [397, 2, 1, "", "lexsort"], [384, 2, 1, "", "lgamma"], [672, 2, 1, "", "linear"], [641, 2, 1, "", "linspace"], [660, 2, 1, "", "load"], [393, 2, 1, "", "local_response_norm"], [273, 2, 1, "", "log"], [274, 2, 1, "", "log10"], [275, 2, 1, "", "log1p"], [276, 2, 1, "", "log2"], [389, 2, 1, "", "log_poisson_loss"], [638, 2, 1, "", "log_softmax"], [277, 2, 1, "", "logaddexp"], [278, 2, 1, "", "logaddexp2"], [279, 2, 1, "", "logical_and"], [280, 2, 1, "", "logical_not"], [281, 2, 1, "", "logical_or"], [282, 2, 1, "", "logical_xor"], [379, 2, 1, "", "logit"], [379, 2, 1, "", "logsigmoid"], [641, 2, 1, "", "logspace"], [393, 2, 1, "", "lp_normalize"], [673, 2, 1, "", "lstm"], [674, 2, 1, "", "lstm_update"], [388, 2, 1, "", "lu_factor"], [388, 2, 1, "", "lu_solve"], [388, 2, 1, "", "make_svd_non_negative"], [652, 2, 1, "", "maml_step"], [653, 2, 1, "", "map"], [653, 2, 1, "", "map_nest_at_index"], [653, 2, 1, "", "map_nest_at_indices"], [584, 2, 1, "", "match_kwargs"], [689, 2, 1, "", "matmul"], [390, 2, 1, "", "matricize"], [388, 2, 1, "", "matrix_exp"], [649, 2, 1, "", "matrix_norm"], [649, 2, 1, "", "matrix_power"], [649, 2, 1, "", "matrix_rank"], [649, 2, 1, "", "matrix_transpose"], [659, 2, 1, "", "max"], [387, 2, 1, "", "max_pool1d"], [387, 2, 1, "", "max_pool2d"], [387, 2, 1, "", "max_pool3d"], [387, 2, 1, "", "max_unpool1d"], [283, 2, 1, "", "maximum"], [659, 2, 1, "", "mean"], [399, 2, 1, "", "median"], [381, 2, 1, "", "mel_weight_matrix"], [641, 2, 1, "", "meshgrid"], [659, 2, 1, "", "min"], [284, 2, 1, "", "minimum"], [638, 2, 1, "", "mish"], [388, 2, 1, "", "mode_dot"], [384, 2, 1, "", "modf"], [390, 2, 1, "", "moveaxis"], [658, 2, 1, "", "msort"], [388, 2, 1, "", "multi_dot"], [675, 2, 1, "", "multi_head_attention"], [653, 2, 1, "", "multi_index_nest"], [388, 2, 1, "", "multi_mode_dot"], [655, 2, 1, "", "multinomial"], [285, 2, 1, "", "multiply"], [585, 2, 1, "", "multiprocessing"], [639, 6, 1, "", "nan"], [286, 2, 1, "", "nan_to_num"], [399, 2, 1, "", "nanmean"], [399, 2, 1, "", "nanmedian"], [399, 2, 1, "", "nanmin"], [399, 2, 1, "", "nanprod"], [384, 2, 1, "", "nansum"], [641, 2, 1, "", "native_array"], [398, 2, 1, "", "native_sparse_array"], [398, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [381, 2, 1, "", "ndenumerate"], [381, 2, 1, "", "ndindex"], [387, 2, 1, "", "nearest_interpolate"], [287, 2, 1, "", "negative"], [653, 2, 1, "", "nested_any"], [653, 2, 1, "", "nested_argwhere"], [653, 2, 1, "", "nested_map"], [653, 2, 1, "", "nested_multi_map"], [639, 6, 1, "", "newaxis"], [384, 2, 1, "", "nextafter"], [676, 2, 1, "", "nms"], [656, 2, 1, "", "nonzero"], [288, 2, 1, "", "not_equal"], [586, 2, 1, "", "num_arrays_in_memory"], [216, 2, 1, "", "num_cpu_cores"], [217, 2, 1, "", "num_gpus"], [218, 2, 1, "", "num_ivy_arrays_on_dev"], [641, 2, 1, "", "one_hot"], [641, 2, 1, "", "ones"], [641, 2, 1, "", "ones_like"], [647, 2, 1, "", "optimizer_update"], [400, 2, 1, "", "optional_get_element"], [649, 2, 1, "", "outer"], [390, 2, 1, "", "pad"], [390, 2, 1, "", "partial_fold"], [390, 2, 1, "", "partial_tensor_to_vec"], [388, 2, 1, "", "partial_tucker"], [390, 2, 1, "", "partial_unfold"], [390, 2, 1, "", "partial_vec_to_tensor"], [219, 2, 1, "", "percent_used_mem_on_dev"], [651, 2, 1, "", "permute_dims"], [639, 6, 1, "", "pi"], [649, 2, 1, "", "pinv"], [394, 2, 1, "", "poisson"], [389, 2, 1, "", "poisson_nll_loss"], [381, 2, 1, "", "polyval"], [387, 2, 1, "", "pool"], [289, 2, 1, "", "positive"], [290, 2, 1, "", "pow"], [379, 2, 1, "", "prelu"], [587, 2, 1, "", "print_all_arrays_in_memory"], [220, 2, 1, "", "print_all_ivy_arrays_on_dev"], [659, 2, 1, "", "prod"], [190, 2, 1, "", "promote_types"], [191, 2, 1, "", "promote_types_of_inputs"], [653, 2, 1, "", "prune_empty"], [653, 2, 1, "", "prune_nest_at_index"], [653, 2, 1, "", "prune_nest_at_indices"], [390, 2, 1, "", "put_along_axis"], [649, 2, 1, "", "qr"], [399, 2, 1, "", "quantile"], [291, 2, 1, "", "rad2deg"], [655, 2, 1, "", "randint"], [381, 2, 1, "", "random_cp"], [655, 2, 1, "", "random_normal"], [381, 2, 1, "", "random_parafac2"], [381, 2, 1, "", "random_tr"], [381, 2, 1, "", "random_tt"], [381, 2, 1, "", "random_tucker"], [655, 2, 1, "", "random_uniform"], [292, 2, 1, "", "real"], [293, 2, 1, "", "reciprocal"], [385, 2, 1, "", "reduce"], [387, 2, 1, "", "reduce_window"], [638, 2, 1, "", "relu"], [379, 2, 1, "", "relu6"], [294, 2, 1, "", "remainder"], [651, 2, 1, "", "repeat"], [652, 2, 1, "", "reptile_step"], [651, 2, 1, "", "reshape"], [192, 2, 1, "", "result_type"], [387, 2, 1, "", "rfft"], [387, 2, 1, "", "rfftn"], [387, 2, 1, "", "rnn"], [677, 2, 1, "", "roi_align"], [651, 2, 1, "", "roll"], [390, 2, 1, "", "rot90"], [295, 2, 1, "", "round"], [660, 2, 1, "", "save"], [678, 2, 1, "", "scaled_dot_product_attention"], [379, 2, 1, "", "scaled_tanh"], [588, 2, 1, "", "scatter_flat"], [589, 2, 1, "", "scatter_nd"], [658, 2, 1, "", "searchsorted"], [655, 2, 1, "", "seed"], [379, 2, 1, "", "selu"], [590, 2, 1, "", "set_array_mode"], [193, 2, 1, "", "set_default_complex_dtype"], [221, 2, 1, "", "set_default_device"], [194, 2, 1, "", "set_default_dtype"], [195, 2, 1, "", "set_default_float_dtype"], [196, 2, 1, "", "set_default_int_dtype"], [197, 2, 1, "", "set_default_uint_dtype"], [591, 2, 1, "", "set_exception_trace_mode"], [592, 2, 1, "", "set_inplace_mode"], [593, 2, 1, "", "set_item"], [594, 2, 1, "", "set_min_base"], [595, 2, 1, "", "set_min_denominator"], [653, 2, 1, "", "set_nest_at_index"], [653, 2, 1, "", "set_nest_at_indices"], [596, 2, 1, "", "set_nestable_mode"], [597, 2, 1, "", "set_precise_mode"], [646, 2, 1, "", "set_queue_timeout"], [646, 2, 1, "", "set_shape_array_mode"], [646, 2, 1, "", "set_show_func_wrapper_trace_mode"], [222, 2, 1, "", "set_soft_device_mode"], [223, 2, 1, "", "set_split_factor"], [646, 2, 1, "", "set_tmp_dir"], [646, 2, 1, "", "shape"], [655, 2, 1, "", "shuffle"], [638, 2, 1, "", "sigmoid"], [296, 2, 1, "", "sign"], [384, 2, 1, "", "signbit"], [379, 2, 1, "", "silu"], [297, 2, 1, "", "sin"], [384, 2, 1, "", "sinc"], [298, 2, 1, "", "sinh"], [646, 2, 1, "", "size"], [387, 2, 1, "", "sliding_window"], [649, 2, 1, "", "slogdet"], [389, 2, 1, "", "smooth_l1_loss"], [389, 2, 1, "", "soft_margin_loss"], [390, 2, 1, "", "soft_thresholding"], [638, 2, 1, "", "softmax"], [638, 2, 1, "", "softplus"], [379, 2, 1, "", "softshrink"], [638, 2, 1, "", "softsign"], [649, 2, 1, "", "solve"], [388, 2, 1, "", "solve_triangular"], [658, 2, 1, "", "sort"], [650, 2, 1, "", "sparse_cross_entropy"], [384, 2, 1, "", "sparsify_tensor"], [651, 2, 1, "", "split"], [224, 2, 1, "", "split_factor"], [225, 2, 1, "", "split_func_call"], [299, 2, 1, "", "sqrt"], [300, 2, 1, "", "square"], [651, 2, 1, "", "squeeze"], [650, 2, 1, "", "ssim_loss"], [646, 2, 1, "", "stable_divide"], [646, 2, 1, "", "stable_pow"], [651, 2, 1, "", "stack"], [379, 2, 1, "", "stanh"], [659, 2, 1, "", "std"], [387, 2, 1, "", "stft"], [647, 2, 1, "", "stop_gradient"], [646, 2, 1, "", "strides"], [301, 2, 1, "", "subtract"], [659, 2, 1, "", "sum"], [646, 2, 1, "", "supports_inplace_updates"], [649, 2, 1, "", "svd"], [388, 2, 1, "", "svd_flip"], [649, 2, 1, "", "svdvals"], [651, 2, 1, "", "swapaxes"], [390, 2, 1, "", "take"], [390, 2, 1, "", "take_along_axis"], [302, 2, 1, "", "tan"], [303, 2, 1, "", "tanh"], [379, 2, 1, "", "tanhshrink"], [388, 2, 1, "", "tensor_train"], [649, 2, 1, "", "tensordot"], [649, 2, 1, "", "tensorsolve"], [379, 2, 1, "", "threshold"], [379, 2, 1, "", "thresholded_relu"], [651, 2, 1, "", "tile"], [226, 2, 1, "", "to_device"], [641, 2, 1, "", "to_dlpack"], [646, 2, 1, "", "to_ivy_shape"], [646, 2, 1, "", "to_list"], [646, 2, 1, "", "to_native_shape"], [646, 2, 1, "", "to_numpy"], [646, 2, 1, "", "to_scalar"], [390, 2, 1, "", "top_k"], [227, 2, 1, "", "total_mem_on_dev"], [228, 2, 1, "", "tpu_is_available"], [649, 2, 1, "", "trace"], [874, 2, 1, "", "trace_graph"], [875, 2, 1, "", "transpile"], [304, 2, 1, "", "trapz"], [641, 2, 1, "", "tril"], [381, 2, 1, "", "tril_indices"], [381, 2, 1, "", "trilu"], [390, 2, 1, "", "trim_zeros"], [641, 2, 1, "", "triu"], [641, 2, 1, "", "triu_indices"], [305, 2, 1, "", "trunc"], [306, 2, 1, "", "trunc_divide"], [388, 2, 1, "", "truncated_svd"], [646, 2, 1, "", "try_else_none"], [640, 2, 1, "", "try_except"], [388, 2, 1, "", "tt_matrix_to_tensor"], [388, 2, 1, "", "tucker"], [198, 2, 1, "", "type_promote_arrays"], [390, 2, 1, "", "unflatten"], [390, 2, 1, "", "unfold"], [876, 2, 1, "", "unify"], [657, 2, 1, "", "unique_all"], [390, 2, 1, "", "unique_consecutive"], [657, 2, 1, "", "unique_counts"], [657, 2, 1, "", "unique_inverse"], [657, 2, 1, "", "unique_values"], [395, 2, 1, "", "unravel_index"], [646, 2, 1, "", "unset_array_mode"], [199, 2, 1, "", "unset_default_complex_dtype"], [229, 2, 1, "", "unset_default_device"], [200, 2, 1, "", "unset_default_dtype"], [201, 2, 1, "", "unset_default_float_dtype"], [202, 2, 1, "", "unset_default_int_dtype"], [203, 2, 1, "", "unset_default_uint_dtype"], [646, 2, 1, "", "unset_exception_trace_mode"], [646, 2, 1, "", "unset_inplace_mode"], [646, 2, 1, "", "unset_min_base"], [646, 2, 1, "", "unset_min_denominator"], [646, 2, 1, "", "unset_nestable_mode"], [646, 2, 1, "", "unset_precise_mode"], [646, 2, 1, "", "unset_queue_timeout"], [646, 2, 1, "", "unset_shape_array_mode"], [646, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [230, 2, 1, "", "unset_soft_device_mode"], [646, 2, 1, "", "unset_tmp_dir"], [381, 2, 1, "", "unsorted_segment_mean"], [381, 2, 1, "", "unsorted_segment_min"], [381, 2, 1, "", "unsorted_segment_sum"], [651, 2, 1, "", "unstack"], [231, 2, 1, "", "used_mem_on_dev"], [204, 2, 1, "", "valid_dtype"], [647, 2, 1, "", "value_and_grad"], [646, 2, 1, "", "value_is_nan"], [649, 2, 1, "", "vander"], [659, 2, 1, "", "var"], [649, 2, 1, "", "vecdot"], [649, 2, 1, "", "vector_norm"], [649, 2, 1, "", "vector_to_skew_symmetric_matrix"], [386, 2, 1, "", "vjp"], [646, 2, 1, "", "vmap"], [381, 2, 1, "", "vorbis_window"], [390, 2, 1, "", "vsplit"], [390, 2, 1, "", "vstack"], [650, 2, 1, "", "wasserstein_loss_discriminator"], [650, 2, 1, "", "wasserstein_loss_generator"], [656, 2, 1, "", "where"], [640, 2, 1, "", "while_loop"], [384, 2, 1, "", "xlogy"], [651, 2, 1, "", "zero_pad"], [641, 2, 1, "", "zeros"], [641, 2, 1, "", "zeros_like"], [384, 2, 1, "", "zeta"]], "ivy.Container": [[232, 0, 1, "", "abs"], [233, 0, 1, "", "acos"], [234, 0, 1, "", "acosh"], [627, 0, 1, "", "adam_step"], [628, 0, 1, "", "adam_update"], [401, 0, 1, "", "adaptive_avg_pool1d"], [402, 0, 1, "", "adaptive_avg_pool2d"], [403, 0, 1, "", "adaptive_max_pool2d"], [404, 0, 1, "", "adaptive_max_pool3d"], [235, 0, 1, "", "add"], [436, 0, 1, "", "adjoint"], [782, 0, 1, "", "all"], [546, 0, 1, "", "all_equal"], [346, 0, 1, "", "allclose"], [347, 0, 1, "", "amax"], [348, 0, 1, "", "amin"], [236, 0, 1, "", "angle"], [783, 0, 1, "", "any"], [759, 0, 1, "", "argmax"], [760, 0, 1, "", "argmin"], [768, 0, 1, "", "argsort"], [761, 0, 1, "", "argwhere"], [549, 0, 1, "", "array_equal"], [472, 0, 1, "", "as_strided"], [140, 0, 1, "", "asarray"], [237, 0, 1, "", "asin"], [238, 0, 1, "", "asinh"], [550, 0, 1, "", "assert_supports_inplace"], [473, 0, 1, "", "associative_scan"], [164, 0, 1, "", "astype"], [239, 0, 1, "", "atan"], [240, 0, 1, "", "atan2"], [241, 0, 1, "", "atanh"], [474, 0, 1, "", "atleast_1d"], [475, 0, 1, "", "atleast_2d"], [476, 0, 1, "", "atleast_3d"], [406, 0, 1, "", "avg_pool1d"], [407, 0, 1, "", "avg_pool2d"], [408, 0, 1, "", "avg_pool3d"], [513, 0, 1, "", "batch_norm"], [437, 0, 1, "", "batched_outer"], [520, 0, 1, "", "bernoulli"], [521, 0, 1, "", "beta"], [349, 0, 1, "", "binarizer"], [708, 0, 1, "", "binary_cross_entropy"], [532, 0, 1, "", "bincount"], [242, 0, 1, "", "bitwise_and"], [243, 0, 1, "", "bitwise_invert"], [244, 0, 1, "", "bitwise_left_shift"], [245, 0, 1, "", "bitwise_or"], [246, 0, 1, "", "bitwise_right_shift"], [247, 0, 1, "", "bitwise_xor"], [324, 0, 1, "", "blackman_window"], [165, 0, 1, "", "broadcast_arrays"], [477, 0, 1, "", "broadcast_shapes"], [166, 0, 1, "", "broadcast_to"], [167, 0, 1, "", "can_cast"], [248, 0, 1, "", "ceil"], [307, 0, 1, "", "celu"], [679, 0, 1, "", "cholesky"], [714, 0, 1, "", "clip"], [552, 0, 1, "", "clip_matrix_norm"], [553, 0, 1, "", "clip_vector_norm"], [480, 0, 1, "", "column_stack"], [715, 0, 1, "", "concat"], [481, 0, 1, "", "concat_from_sequence"], [438, 0, 1, "", "cond"], [350, 0, 1, "", "conj"], [716, 0, 1, "", "constant_pad"], [662, 0, 1, "", "conv1d"], [663, 0, 1, "", "conv1d_transpose"], [664, 0, 1, "", "conv2d"], [665, 0, 1, "", "conv2d_transpose"], [666, 0, 1, "", "conv3d"], [667, 0, 1, "", "conv3d_transpose"], [141, 0, 1, "", "copy_array"], [351, 0, 1, "", "copysign"], [533, 0, 1, "", "corrcoef"], [249, 0, 1, "", "cos"], [250, 0, 1, "", "cosh"], [352, 0, 1, "", "count_nonzero"], [534, 0, 1, "", "cov"], [680, 0, 1, "", "cross"], [709, 0, 1, "", "cross_entropy"], [535, 0, 1, "", "cummax"], [536, 0, 1, "", "cummin"], [772, 0, 1, "", "cumprod"], [773, 0, 1, "", "cumsum"], [409, 0, 1, "", "dct"], [251, 0, 1, "", "deg2rad"], [670, 0, 1, "", "depthwise_conv2d"], [681, 0, 1, "", "det"], [209, 0, 1, "", "dev"], [410, 0, 1, "", "dft"], [682, 0, 1, "", "diag"], [439, 0, 1, "", "diagflat"], [683, 0, 1, "", "diagonal"], [353, 0, 1, "", "diff"], [354, 0, 1, "", "digamma"], [522, 0, 1, "", "dirichlet"], [252, 0, 1, "", "divide"], [440, 0, 1, "", "dot"], [671, 0, 1, "", "dropout"], [411, 0, 1, "", "dropout1d"], [412, 0, 1, "", "dropout2d"], [413, 0, 1, "", "dropout3d"], [482, 0, 1, "", "dsplit"], [483, 0, 1, "", "dstack"], [175, 0, 1, "", "dtype"], [441, 0, 1, "", "eig"], [685, 0, 1, "", "eigh"], [442, 0, 1, "", "eigh_tridiagonal"], [443, 0, 1, "", "eigvals"], [686, 0, 1, "", "eigvalsh"], [557, 0, 1, "", "einops_rearrange"], [558, 0, 1, "", "einops_reduce"], [559, 0, 1, "", "einops_repeat"], [774, 0, 1, "", "einsum"], [308, 0, 1, "", "elu"], [414, 0, 1, "", "embedding"], [143, 0, 1, "", "empty_like"], [253, 0, 1, "", "equal"], [254, 0, 1, "", "erf"], [355, 0, 1, "", "erfc"], [356, 0, 1, "", "erfinv"], [560, 0, 1, "", "exists"], [255, 0, 1, "", "exp"], [256, 0, 1, "", "exp2"], [484, 0, 1, "", "expand"], [717, 0, 1, "", "expand_dims"], [257, 0, 1, "", "expm1"], [325, 0, 1, "", "eye_like"], [415, 0, 1, "", "fft"], [485, 0, 1, "", "fill_diagonal"], [177, 0, 1, "", "finfo"], [357, 0, 1, "", "fix"], [486, 0, 1, "", "flatten"], [718, 0, 1, "", "flip"], [487, 0, 1, "", "fliplr"], [488, 0, 1, "", "flipud"], [358, 0, 1, "", "float_power"], [258, 0, 1, "", "floor"], [259, 0, 1, "", "floor_divide"], [359, 0, 1, "", "fmax"], [260, 0, 1, "", "fmin"], [261, 0, 1, "", "fmod"], [489, 0, 1, "", "fold"], [561, 0, 1, "", "fourier_encode"], [360, 0, 1, "", "frexp"], [145, 0, 1, "", "from_dlpack"], [146, 0, 1, "", "frombuffer"], [148, 0, 1, "", "full_like"], [523, 0, 1, "", "gamma"], [564, 0, 1, "", "gather"], [565, 0, 1, "", "gather_nd"], [262, 0, 1, "", "gcd"], [122, 0, 1, "", "gelu"], [444, 0, 1, "", "general_inner_product"], [568, 0, 1, "", "get_num_dims"], [361, 0, 1, "", "gradient"], [631, 0, 1, "", "gradient_descent_update"], [263, 0, 1, "", "greater"], [264, 0, 1, "", "greater_equal"], [514, 0, 1, "", "group_norm"], [326, 0, 1, "", "hamming_window"], [327, 0, 1, "", "hann_window"], [309, 0, 1, "", "hardshrink"], [310, 0, 1, "", "hardsilu"], [123, 0, 1, "", "hardswish"], [311, 0, 1, "", "hardtanh"], [570, 0, 1, "", "has_nans"], [490, 0, 1, "", "heaviside"], [445, 0, 1, "", "higher_order_moment"], [464, 0, 1, "", "hinge_embedding_loss"], [537, 0, 1, "", "histogram"], [491, 0, 1, "", "hsplit"], [492, 0, 1, "", "hstack"], [465, 0, 1, "", "huber_loss"], [362, 0, 1, "", "hypot"], [493, 0, 1, "", "i0"], [419, 0, 1, "", "idct"], [420, 0, 1, "", "ifft"], [421, 0, 1, "", "ifftn"], [538, 0, 1, "", "igamma"], [180, 0, 1, "", "iinfo"], [265, 0, 1, "", "imag"], [446, 0, 1, "", "initialize_tucker"], [687, 0, 1, "", "inner"], [572, 0, 1, "", "inplace_decrement"], [573, 0, 1, "", "inplace_increment"], [574, 0, 1, "", "inplace_update"], [515, 0, 1, "", "instance_norm"], [423, 0, 1, "", "interpolate"], [688, 0, 1, "", "inv"], [526, 0, 1, "", "invert_permutation"], [576, 0, 1, "", "is_array"], [183, 0, 1, "", "is_bool_dtype"], [184, 0, 1, "", "is_complex_dtype"], [185, 0, 1, "", "is_float_dtype"], [187, 0, 1, "", "is_int_dtype"], [577, 0, 1, "", "is_ivy_array"], [580, 0, 1, "", "is_native_array"], [189, 0, 1, "", "is_uint_dtype"], [363, 0, 1, "", "isclose"], [266, 0, 1, "", "isfinite"], [581, 0, 1, "", "isin"], [267, 0, 1, "", "isinf"], [268, 0, 1, "", "isnan"], [269, 0, 1, "", "isreal"], [583, 0, 1, "", "itemsize"], [329, 0, 1, "", "kaiser_bessel_derived_window"], [330, 0, 1, "", "kaiser_window"], [466, 0, 1, "", "kl_div"], [448, 0, 1, "", "kron"], [467, 0, 1, "", "l1_loss"], [516, 0, 1, "", "l1_normalize"], [517, 0, 1, "", "l2_normalize"], [633, 0, 1, "", "lamb_update"], [634, 0, 1, "", "lars_update"], [752, 0, 1, "", "layer_norm"], [270, 0, 1, "", "lcm"], [364, 0, 1, "", "ldexp"], [124, 0, 1, "", "leaky_relu"], [365, 0, 1, "", "lerp"], [271, 0, 1, "", "less"], [272, 0, 1, "", "less_equal"], [527, 0, 1, "", "lexsort"], [366, 0, 1, "", "lgamma"], [672, 0, 1, "", "linear"], [149, 0, 1, "", "linspace"], [273, 0, 1, "", "log"], [274, 0, 1, "", "log10"], [275, 0, 1, "", "log1p"], [276, 0, 1, "", "log2"], [468, 0, 1, "", "log_poisson_loss"], [125, 0, 1, "", "log_softmax"], [277, 0, 1, "", "logaddexp"], [278, 0, 1, "", "logaddexp2"], [279, 0, 1, "", "logical_and"], [280, 0, 1, "", "logical_not"], [281, 0, 1, "", "logical_or"], [282, 0, 1, "", "logical_xor"], [312, 0, 1, "", "logit"], [313, 0, 1, "", "logsigmoid"], [150, 0, 1, "", "logspace"], [519, 0, 1, "", "lp_normalize"], [674, 0, 1, "", "lstm_update"], [452, 0, 1, "", "make_svd_non_negative"], [689, 0, 1, "", "matmul"], [494, 0, 1, "", "matricize"], [453, 0, 1, "", "matrix_exp"], [690, 0, 1, "", "matrix_norm"], [691, 0, 1, "", "matrix_power"], [692, 0, 1, "", "matrix_rank"], [693, 0, 1, "", "matrix_transpose"], [775, 0, 1, "", "max"], [424, 0, 1, "", "max_pool1d"], [425, 0, 1, "", "max_pool2d"], [426, 0, 1, "", "max_pool3d"], [427, 0, 1, "", "max_unpool1d"], [283, 0, 1, "", "maximum"], [776, 0, 1, "", "mean"], [539, 0, 1, "", "median"], [331, 0, 1, "", "mel_weight_matrix"], [151, 0, 1, "", "meshgrid"], [777, 0, 1, "", "min"], [284, 0, 1, "", "minimum"], [126, 0, 1, "", "mish"], [454, 0, 1, "", "mode_dot"], [367, 0, 1, "", "modf"], [495, 0, 1, "", "moveaxis"], [769, 0, 1, "", "msort"], [455, 0, 1, "", "multi_dot"], [675, 0, 1, "", "multi_head_attention"], [456, 0, 1, "", "multi_mode_dot"], [753, 0, 1, "", "multinomial"], [285, 0, 1, "", "multiply"], [286, 0, 1, "", "nan_to_num"], [540, 0, 1, "", "nanmean"], [541, 0, 1, "", "nanmedian"], [542, 0, 1, "", "nanmin"], [543, 0, 1, "", "nanprod"], [368, 0, 1, "", "nansum"], [152, 0, 1, "", "native_array"], [287, 0, 1, "", "negative"], [369, 0, 1, "", "nextafter"], [762, 0, 1, "", "nonzero"], [288, 0, 1, "", "not_equal"], [153, 0, 1, "", "one_hot"], [155, 0, 1, "", "ones_like"], [635, 0, 1, "", "optimizer_update"], [545, 0, 1, "", "optional_get_element"], [694, 0, 1, "", "outer"], [496, 0, 1, "", "pad"], [497, 0, 1, "", "partial_fold"], [498, 0, 1, "", "partial_tensor_to_vec"], [457, 0, 1, "", "partial_tucker"], [499, 0, 1, "", "partial_unfold"], [500, 0, 1, "", "partial_vec_to_tensor"], [719, 0, 1, "", "permute_dims"], [695, 0, 1, "", "pinv"], [524, 0, 1, "", "poisson"], [469, 0, 1, "", "poisson_nll_loss"], [334, 0, 1, "", "polyval"], [289, 0, 1, "", "positive"], [290, 0, 1, "", "pow"], [314, 0, 1, "", "prelu"], [778, 0, 1, "", "prod"], [501, 0, 1, "", "put_along_axis"], [696, 0, 1, "", "qr"], [544, 0, 1, "", "quantile"], [291, 0, 1, "", "rad2deg"], [754, 0, 1, "", "randint"], [755, 0, 1, "", "random_normal"], [756, 0, 1, "", "random_uniform"], [292, 0, 1, "", "real"], [293, 0, 1, "", "reciprocal"], [375, 0, 1, "", "reduce"], [430, 0, 1, "", "reduce_window"], [127, 0, 1, "", "relu"], [315, 0, 1, "", "relu6"], [294, 0, 1, "", "remainder"], [720, 0, 1, "", "repeat"], [721, 0, 1, "", "reshape"], [192, 0, 1, "", "result_type"], [431, 0, 1, "", "rfft"], [432, 0, 1, "", "rfftn"], [722, 0, 1, "", "roll"], [502, 0, 1, "", "rot90"], [295, 0, 1, "", "round"], [678, 0, 1, "", "scaled_dot_product_attention"], [316, 0, 1, "", "scaled_tanh"], [588, 0, 1, "", "scatter_flat"], [589, 0, 1, "", "scatter_nd"], [770, 0, 1, "", "searchsorted"], [317, 0, 1, "", "selu"], [758, 0, 1, "", "shuffle"], [128, 0, 1, "", "sigmoid"], [296, 0, 1, "", "sign"], [370, 0, 1, "", "signbit"], [318, 0, 1, "", "silu"], [297, 0, 1, "", "sin"], [371, 0, 1, "", "sinc"], [298, 0, 1, "", "sinh"], [603, 0, 1, "", "size"], [434, 0, 1, "", "sliding_window"], [697, 0, 1, "", "slogdet"], [470, 0, 1, "", "smooth_l1_loss"], [471, 0, 1, "", "soft_margin_loss"], [503, 0, 1, "", "soft_thresholding"], [129, 0, 1, "", "softmax"], [130, 0, 1, "", "softplus"], [319, 0, 1, "", "softshrink"], [698, 0, 1, "", "solve"], [771, 0, 1, "", "sort"], [710, 0, 1, "", "sparse_cross_entropy"], [372, 0, 1, "", "sparsify_tensor"], [723, 0, 1, "", "split"], [299, 0, 1, "", "sqrt"], [300, 0, 1, "", "square"], [724, 0, 1, "", "squeeze"], [604, 0, 1, "", "stable_divide"], [605, 0, 1, "", "stable_pow"], [725, 0, 1, "", "stack"], [779, 0, 1, "", "std"], [435, 0, 1, "", "stft"], [636, 0, 1, "", "stop_gradient"], [606, 0, 1, "", "strides"], [301, 0, 1, "", "subtract"], [780, 0, 1, "", "sum"], [607, 0, 1, "", "supports_inplace_updates"], [699, 0, 1, "", "svd"], [459, 0, 1, "", "svd_flip"], [700, 0, 1, "", "svdvals"], [726, 0, 1, "", "swapaxes"], [504, 0, 1, "", "take"], [505, 0, 1, "", "take_along_axis"], [302, 0, 1, "", "tan"], [303, 0, 1, "", "tanh"], [321, 0, 1, "", "tanhshrink"], [460, 0, 1, "", "tensor_train"], [701, 0, 1, "", "tensordot"], [702, 0, 1, "", "tensorsolve"], [322, 0, 1, "", "threshold"], [323, 0, 1, "", "thresholded_relu"], [727, 0, 1, "", "tile"], [226, 0, 1, "", "to_device"], [609, 0, 1, "", "to_list"], [611, 0, 1, "", "to_numpy"], [612, 0, 1, "", "to_scalar"], [506, 0, 1, "", "top_k"], [703, 0, 1, "", "trace"], [304, 0, 1, "", "trapz"], [157, 0, 1, "", "tril"], [340, 0, 1, "", "tril_indices"], [341, 0, 1, "", "trilu"], [507, 0, 1, "", "trim_zeros"], [158, 0, 1, "", "triu"], [159, 0, 1, "", "triu_indices"], [305, 0, 1, "", "trunc"], [306, 0, 1, "", "trunc_divide"], [461, 0, 1, "", "truncated_svd"], [462, 0, 1, "", "tt_matrix_to_tensor"], [463, 0, 1, "", "tucker"], [508, 0, 1, "", "unflatten"], [509, 0, 1, "", "unfold"], [764, 0, 1, "", "unique_all"], [510, 0, 1, "", "unique_consecutive"], [765, 0, 1, "", "unique_counts"], [766, 0, 1, "", "unique_inverse"], [767, 0, 1, "", "unique_values"], [525, 0, 1, "", "unravel_index"], [342, 0, 1, "", "unsorted_segment_mean"], [343, 0, 1, "", "unsorted_segment_min"], [344, 0, 1, "", "unsorted_segment_sum"], [728, 0, 1, "", "unstack"], [625, 0, 1, "", "value_is_nan"], [704, 0, 1, "", "vander"], [781, 0, 1, "", "var"], [705, 0, 1, "", "vecdot"], [706, 0, 1, "", "vector_norm"], [707, 0, 1, "", "vector_to_skew_symmetric_matrix"], [345, 0, 1, "", "vorbis_window"], [511, 0, 1, "", "vsplit"], [512, 0, 1, "", "vstack"], [763, 0, 1, "", "where"], [373, 0, 1, "", "xlogy"], [729, 0, 1, "", "zero_pad"], [161, 0, 1, "", "zeros_like"], [374, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[63, 3, 0, "-", "activations"], [114, 3, 0, "-", "array"], [64, 3, 0, "-", "conversions"], [65, 3, 0, "-", "creation"], [66, 3, 0, "-", "data_type"], [67, 3, 0, "-", "device"], [68, 3, 0, "-", "elementwise"], [69, 3, 0, "-", "experimental"], [70, 3, 0, "-", "general"], [71, 3, 0, "-", "gradients"], [72, 3, 0, "-", "image"], [73, 3, 0, "-", "layers"], [74, 3, 0, "-", "linear_algebra"], [75, 3, 0, "-", "losses"], [76, 3, 0, "-", "manipulation"], [77, 3, 0, "-", "norms"], [78, 3, 0, "-", "random"], [79, 3, 0, "-", "searching"], [80, 3, 0, "-", "set"], [81, 3, 0, "-", "sorting"], [82, 3, 0, "-", "statistical"], [83, 3, 0, "-", "utility"], [84, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[63, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "gelu"], [63, 0, 1, "", "hardswish"], [63, 0, 1, "", "leaky_relu"], [63, 0, 1, "", "log_softmax"], [63, 0, 1, "", "mish"], [63, 0, 1, "", "relu"], [63, 0, 1, "", "sigmoid"], [63, 0, 1, "", "softmax"], [63, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[114, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[114, 5, 1, "", "T"], [114, 0, 1, "", "__abs__"], [114, 0, 1, "", "__add__"], [114, 0, 1, "", "__eq__"], [114, 0, 1, "", "__ge__"], [114, 0, 1, "", "__gt__"], [114, 0, 1, "", "__init__"], [114, 0, 1, "", "__le__"], [114, 0, 1, "", "__lt__"], [114, 0, 1, "", "__ne__"], [114, 0, 1, "", "__pow__"], [114, 0, 1, "", "__radd__"], [114, 0, 1, "", "__rrshift__"], [114, 0, 1, "", "__rshift__"], [114, 0, 1, "", "__rsub__"], [114, 0, 1, "", "__sub__"], [114, 0, 1, "", "__truediv__"], [114, 0, 1, "", "__xor__"], [114, 5, 1, "", "backend"], [114, 5, 1, "", "base"], [114, 5, 1, "", "data"], [114, 5, 1, "", "device"], [114, 5, 1, "", "dtype"], [114, 5, 1, "", "dynamic_backend"], [114, 5, 1, "", "imag"], [114, 5, 1, "", "itemsize"], [114, 5, 1, "", "mT"], [114, 5, 1, "", "ndim"], [114, 5, 1, "", "real"], [114, 5, 1, "", "shape"], [114, 5, 1, "", "size"], [114, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[64, 2, 1, "", "_array_to_new_backend"], [64, 2, 1, "", "_data_to_new_backend"], [64, 2, 1, "", "_to_ivy"], [64, 2, 1, "", "_to_native"], [64, 2, 1, "", "_to_new_backend"], [64, 2, 1, "", "args_to_ivy"], [64, 2, 1, "", "args_to_native"], [64, 2, 1, "", "args_to_new_backend"], [64, 2, 1, "", "to_ivy"], [64, 2, 1, "", "to_native"], [64, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[65, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "asarray"], [65, 0, 1, "", "copy_array"], [65, 0, 1, "", "empty_like"], [65, 0, 1, "", "from_dlpack"], [65, 0, 1, "", "full_like"], [65, 0, 1, "", "linspace"], [65, 0, 1, "", "logspace"], [65, 0, 1, "", "meshgrid"], [65, 0, 1, "", "native_array"], [65, 0, 1, "", "one_hot"], [65, 0, 1, "", "ones_like"], [65, 0, 1, "", "tril"], [65, 0, 1, "", "triu"], [65, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[66, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "astype"], [66, 0, 1, "", "broadcast_arrays"], [66, 0, 1, "", "broadcast_to"], [66, 0, 1, "", "can_cast"], [66, 0, 1, "", "dtype"], [66, 0, 1, "", "finfo"], [66, 0, 1, "", "iinfo"], [66, 0, 1, "", "is_bool_dtype"], [66, 0, 1, "", "is_float_dtype"], [66, 0, 1, "", "is_int_dtype"], [66, 0, 1, "", "is_uint_dtype"], [66, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[67, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "dev"], [67, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[68, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "abs"], [68, 0, 1, "", "acos"], [68, 0, 1, "", "acosh"], [68, 0, 1, "", "add"], [68, 0, 1, "", "angle"], [68, 0, 1, "", "asin"], [68, 0, 1, "", "asinh"], [68, 0, 1, "", "atan"], [68, 0, 1, "", "atan2"], [68, 0, 1, "", "atanh"], [68, 0, 1, "", "bitwise_and"], [68, 0, 1, "", "bitwise_invert"], [68, 0, 1, "", "bitwise_left_shift"], [68, 0, 1, "", "bitwise_or"], [68, 0, 1, "", "bitwise_right_shift"], [68, 0, 1, "", "bitwise_xor"], [68, 0, 1, "", "ceil"], [68, 0, 1, "", "cos"], [68, 0, 1, "", "cosh"], [68, 0, 1, "", "deg2rad"], [68, 0, 1, "", "divide"], [68, 0, 1, "", "equal"], [68, 0, 1, "", "erf"], [68, 0, 1, "", "exp"], [68, 0, 1, "", "exp2"], [68, 0, 1, "", "expm1"], [68, 0, 1, "", "floor"], [68, 0, 1, "", "floor_divide"], [68, 0, 1, "", "fmin"], [68, 0, 1, "", "gcd"], [68, 0, 1, "", "greater"], [68, 0, 1, "", "greater_equal"], [68, 0, 1, "", "isfinite"], [68, 0, 1, "", "isinf"], [68, 0, 1, "", "isnan"], [68, 0, 1, "", "isreal"], [68, 0, 1, "", "lcm"], [68, 0, 1, "", "less"], [68, 0, 1, "", "less_equal"], [68, 0, 1, "", "log"], [68, 0, 1, "", "log10"], [68, 0, 1, "", "log1p"], [68, 0, 1, "", "log2"], [68, 0, 1, "", "logaddexp"], [68, 0, 1, "", "logaddexp2"], [68, 0, 1, "", "logical_and"], [68, 0, 1, "", "logical_not"], [68, 0, 1, "", "logical_or"], [68, 0, 1, "", "logical_xor"], [68, 0, 1, "", "maximum"], [68, 0, 1, "", "minimum"], [68, 0, 1, "", "multiply"], [68, 0, 1, "", "nan_to_num"], [68, 0, 1, "", "negative"], [68, 0, 1, "", "not_equal"], [68, 0, 1, "", "positive"], [68, 0, 1, "", "pow"], [68, 0, 1, "", "rad2deg"], [68, 0, 1, "", "real"], [68, 0, 1, "", "reciprocal"], [68, 0, 1, "", "remainder"], [68, 0, 1, "", "round"], [68, 0, 1, "", "sign"], [68, 0, 1, "", "sin"], [68, 0, 1, "", "sinh"], [68, 0, 1, "", "sqrt"], [68, 0, 1, "", "square"], [68, 0, 1, "", "subtract"], [68, 0, 1, "", "tan"], [68, 0, 1, "", "tanh"], [68, 0, 1, "", "trapz"], [68, 0, 1, "", "trunc"], [68, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[69, 3, 0, "-", "activations"], [69, 3, 0, "-", "conversions"], [69, 3, 0, "-", "creation"], [69, 3, 0, "-", "data_type"], [69, 3, 0, "-", "device"], [69, 3, 0, "-", "elementwise"], [69, 3, 0, "-", "general"], [69, 3, 0, "-", "gradients"], [69, 3, 0, "-", "image"], [69, 3, 0, "-", "layers"], [69, 3, 0, "-", "linear_algebra"], [69, 3, 0, "-", "losses"], [69, 3, 0, "-", "manipulation"], [69, 3, 0, "-", "norms"], [69, 3, 0, "-", "random"], [69, 3, 0, "-", "searching"], [69, 3, 0, "-", "set"], [69, 3, 0, "-", "sorting"], [69, 3, 0, "-", "statistical"], [69, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[69, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "celu"], [69, 0, 1, "", "elu"], [69, 0, 1, "", "hardshrink"], [69, 0, 1, "", "hardsilu"], [69, 0, 1, "", "hardtanh"], [69, 0, 1, "", "logit"], [69, 0, 1, "", "logsigmoid"], [69, 0, 1, "", "prelu"], [69, 0, 1, "", "relu6"], [69, 0, 1, "", "scaled_tanh"], [69, 0, 1, "", "selu"], [69, 0, 1, "", "silu"], [69, 0, 1, "", "softshrink"], [69, 0, 1, "", "tanhshrink"], [69, 0, 1, "", "threshold"], [69, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[69, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[69, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[69, 1, 1, "", "_ArrayWithCreationExperimental"], [69, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "blackman_window"], [69, 0, 1, "", "eye_like"], [69, 0, 1, "", "mel_weight_matrix"], [69, 0, 1, "", "trilu"], [69, 0, 1, "", "unsorted_segment_mean"], [69, 0, 1, "", "unsorted_segment_min"], [69, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[69, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[69, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[69, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[69, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[69, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "allclose"], [69, 0, 1, "", "amax"], [69, 0, 1, "", "amin"], [69, 0, 1, "", "binarizer"], [69, 0, 1, "", "conj"], [69, 0, 1, "", "copysign"], [69, 0, 1, "", "count_nonzero"], [69, 0, 1, "", "diff"], [69, 0, 1, "", "digamma"], [69, 0, 1, "", "erfc"], [69, 0, 1, "", "erfinv"], [69, 0, 1, "", "fix"], [69, 0, 1, "", "float_power"], [69, 0, 1, "", "fmax"], [69, 0, 1, "", "fmod"], [69, 0, 1, "", "frexp"], [69, 0, 1, "", "gradient"], [69, 0, 1, "", "hypot"], [69, 0, 1, "", "isclose"], [69, 0, 1, "", "ldexp"], [69, 0, 1, "", "lerp"], [69, 0, 1, "", "lgamma"], [69, 0, 1, "", "modf"], [69, 0, 1, "", "nansum"], [69, 0, 1, "", "nextafter"], [69, 0, 1, "", "signbit"], [69, 0, 1, "", "sinc"], [69, 0, 1, "", "sparsify_tensor"], [69, 0, 1, "", "xlogy"], [69, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[69, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[69, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[69, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[69, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[69, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[69, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "adaptive_avg_pool1d"], [69, 0, 1, "", "adaptive_avg_pool2d"], [69, 0, 1, "", "adaptive_max_pool2d"], [69, 0, 1, "", "adaptive_max_pool3d"], [69, 0, 1, "", "avg_pool1d"], [69, 0, 1, "", "avg_pool2d"], [69, 0, 1, "", "avg_pool3d"], [69, 0, 1, "", "dct"], [69, 0, 1, "", "dft"], [69, 0, 1, "", "embedding"], [69, 0, 1, "", "fft"], [69, 0, 1, "", "fft2"], [69, 0, 1, "", "idct"], [69, 0, 1, "", "ifft"], [69, 0, 1, "", "ifftn"], [69, 0, 1, "", "interpolate"], [69, 0, 1, "", "max_pool1d"], [69, 0, 1, "", "max_pool2d"], [69, 0, 1, "", "max_pool3d"], [69, 0, 1, "", "max_unpool1d"], [69, 0, 1, "", "reduce_window"], [69, 0, 1, "", "rfft"], [69, 0, 1, "", "rfftn"], [69, 0, 1, "", "sliding_window"], [69, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[69, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "adjoint"], [69, 0, 1, "", "batched_outer"], [69, 0, 1, "", "cond"], [69, 0, 1, "", "diagflat"], [69, 0, 1, "", "dot"], [69, 0, 1, "", "eig"], [69, 0, 1, "", "eigh_tridiagonal"], [69, 0, 1, "", "eigvals"], [69, 0, 1, "", "general_inner_product"], [69, 0, 1, "", "higher_order_moment"], [69, 0, 1, "", "initialize_tucker"], [69, 0, 1, "", "kron"], [69, 0, 1, "", "make_svd_non_negative"], [69, 0, 1, "", "matrix_exp"], [69, 0, 1, "", "mode_dot"], [69, 0, 1, "", "multi_dot"], [69, 0, 1, "", "multi_mode_dot"], [69, 0, 1, "", "partial_tucker"], [69, 0, 1, "", "svd_flip"], [69, 0, 1, "", "tensor_train"], [69, 0, 1, "", "truncated_svd"], [69, 0, 1, "", "tt_matrix_to_tensor"], [69, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[69, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "hinge_embedding_loss"], [69, 0, 1, "", "huber_loss"], [69, 0, 1, "", "kl_div"], [69, 0, 1, "", "l1_loss"], [69, 0, 1, "", "log_poisson_loss"], [69, 0, 1, "", "poisson_nll_loss"], [69, 0, 1, "", "smooth_l1_loss"], [69, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[69, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "as_strided"], [69, 0, 1, "", "associative_scan"], [69, 0, 1, "", "atleast_1d"], [69, 0, 1, "", "atleast_2d"], [69, 0, 1, "", "atleast_3d"], [69, 0, 1, "", "column_stack"], [69, 0, 1, "", "concat_from_sequence"], [69, 0, 1, "", "dsplit"], [69, 0, 1, "", "dstack"], [69, 0, 1, "", "expand"], [69, 0, 1, "", "fill_diagonal"], [69, 0, 1, "", "flatten"], [69, 0, 1, "", "fliplr"], [69, 0, 1, "", "flipud"], [69, 0, 1, "", "fold"], [69, 0, 1, "", "heaviside"], [69, 0, 1, "", "hsplit"], [69, 0, 1, "", "hstack"], [69, 0, 1, "", "i0"], [69, 0, 1, "", "matricize"], [69, 0, 1, "", "moveaxis"], [69, 0, 1, "", "pad"], [69, 0, 1, "", "partial_fold"], [69, 0, 1, "", "partial_tensor_to_vec"], [69, 0, 1, "", "partial_unfold"], [69, 0, 1, "", "partial_vec_to_tensor"], [69, 0, 1, "", "put_along_axis"], [69, 0, 1, "", "rot90"], [69, 0, 1, "", "soft_thresholding"], [69, 0, 1, "", "take"], [69, 0, 1, "", "take_along_axis"], [69, 0, 1, "", "top_k"], [69, 0, 1, "", "trim_zeros"], [69, 0, 1, "", "unflatten"], [69, 0, 1, "", "unfold"], [69, 0, 1, "", "unique_consecutive"], [69, 0, 1, "", "vsplit"], [69, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[69, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "batch_norm"], [69, 0, 1, "", "group_norm"], [69, 0, 1, "", "instance_norm"], [69, 0, 1, "", "l1_normalize"], [69, 0, 1, "", "l2_normalize"], [69, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[69, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "bernoulli"], [69, 0, 1, "", "beta"], [69, 0, 1, "", "dirichlet"], [69, 0, 1, "", "gamma"], [69, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[69, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[69, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[69, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[69, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[69, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "bincount"], [69, 0, 1, "", "corrcoef"], [69, 0, 1, "", "cov"], [69, 0, 1, "", "cummax"], [69, 0, 1, "", "cummin"], [69, 0, 1, "", "histogram"], [69, 0, 1, "", "igamma"], [69, 0, 1, "", "median"], [69, 0, 1, "", "nanmean"], [69, 0, 1, "", "nanmedian"], [69, 0, 1, "", "nanmin"], [69, 0, 1, "", "nanprod"], [69, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[69, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[70, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "all_equal"], [70, 0, 1, "", "array_equal"], [70, 0, 1, "", "assert_supports_inplace"], [70, 0, 1, "", "clip_matrix_norm"], [70, 0, 1, "", "clip_vector_norm"], [70, 0, 1, "", "default"], [70, 0, 1, "", "einops_rearrange"], [70, 0, 1, "", "einops_reduce"], [70, 0, 1, "", "einops_repeat"], [70, 0, 1, "", "exists"], [70, 0, 1, "", "fourier_encode"], [70, 0, 1, "", "gather"], [70, 0, 1, "", "gather_nd"], [70, 0, 1, "", "get_num_dims"], [70, 0, 1, "", "has_nans"], [70, 0, 1, "", "inplace_decrement"], [70, 0, 1, "", "inplace_increment"], [70, 0, 1, "", "inplace_update"], [70, 0, 1, "", "is_array"], [70, 0, 1, "", "is_ivy_array"], [70, 0, 1, "", "is_ivy_container"], [70, 0, 1, "", "is_native_array"], [70, 0, 1, "", "isin"], [70, 0, 1, "", "scatter_flat"], [70, 0, 1, "", "scatter_nd"], [70, 0, 1, "", "stable_divide"], [70, 0, 1, "", "stable_pow"], [70, 0, 1, "", "supports_inplace_updates"], [70, 0, 1, "", "to_file"], [70, 0, 1, "", "to_list"], [70, 0, 1, "", "to_numpy"], [70, 0, 1, "", "to_scalar"], [70, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[71, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "adam_step"], [71, 0, 1, "", "adam_update"], [71, 0, 1, "", "gradient_descent_update"], [71, 0, 1, "", "lamb_update"], [71, 0, 1, "", "lars_update"], [71, 0, 1, "", "optimizer_update"], [71, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[72, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[72, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[73, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "conv1d"], [73, 0, 1, "", "conv1d_transpose"], [73, 0, 1, "", "conv2d"], [73, 0, 1, "", "conv2d_transpose"], [73, 0, 1, "", "conv3d"], [73, 0, 1, "", "conv3d_transpose"], [73, 0, 1, "", "depthwise_conv2d"], [73, 0, 1, "", "dropout"], [73, 0, 1, "", "dropout1d"], [73, 0, 1, "", "dropout2d"], [73, 0, 1, "", "dropout3d"], [73, 0, 1, "", "linear"], [73, 0, 1, "", "lstm_update"], [73, 0, 1, "", "multi_head_attention"], [73, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[74, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "cholesky"], [74, 0, 1, "", "cross"], [74, 0, 1, "", "det"], [74, 0, 1, "", "diag"], [74, 0, 1, "", "diagonal"], [74, 0, 1, "", "eig"], [74, 0, 1, "", "eigh"], [74, 0, 1, "", "eigvalsh"], [74, 0, 1, "", "inner"], [74, 0, 1, "", "inv"], [74, 0, 1, "", "matmul"], [74, 0, 1, "", "matrix_norm"], [74, 0, 1, "", "matrix_power"], [74, 0, 1, "", "matrix_rank"], [74, 0, 1, "", "matrix_transpose"], [74, 0, 1, "", "outer"], [74, 0, 1, "", "pinv"], [74, 0, 1, "", "qr"], [74, 0, 1, "", "slogdet"], [74, 0, 1, "", "solve"], [74, 0, 1, "", "svd"], [74, 0, 1, "", "svdvals"], [74, 0, 1, "", "tensordot"], [74, 0, 1, "", "tensorsolve"], [74, 0, 1, "", "trace"], [74, 0, 1, "", "vander"], [74, 0, 1, "", "vecdot"], [74, 0, 1, "", "vector_norm"], [74, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[75, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "binary_cross_entropy"], [75, 0, 1, "", "cross_entropy"], [75, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[76, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "clip"], [76, 0, 1, "", "concat"], [76, 0, 1, "", "constant_pad"], [76, 0, 1, "", "expand_dims"], [76, 0, 1, "", "flip"], [76, 0, 1, "", "permute_dims"], [76, 0, 1, "", "repeat"], [76, 0, 1, "", "reshape"], [76, 0, 1, "", "roll"], [76, 0, 1, "", "split"], [76, 0, 1, "", "squeeze"], [76, 0, 1, "", "stack"], [76, 0, 1, "", "swapaxes"], [76, 0, 1, "", "tile"], [76, 0, 1, "", "unstack"], [76, 0, 1, "", "view"], [76, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[77, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[78, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "multinomial"], [78, 0, 1, "", "randint"], [78, 0, 1, "", "random_normal"], [78, 0, 1, "", "random_uniform"], [78, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[79, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "argmax"], [79, 0, 1, "", "argmin"], [79, 0, 1, "", "argwhere"], [79, 0, 1, "", "nonzero"], [79, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[80, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "unique_all"], [80, 0, 1, "", "unique_counts"], [80, 0, 1, "", "unique_inverse"], [80, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[81, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "argsort"], [81, 0, 1, "", "msort"], [81, 0, 1, "", "searchsorted"], [81, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[82, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "cumprod"], [82, 0, 1, "", "cumsum"], [82, 0, 1, "", "einsum"], [82, 0, 1, "", "max"], [82, 0, 1, "", "mean"], [82, 0, 1, "", "min"], [82, 0, 1, "", "prod"], [82, 0, 1, "", "std"], [82, 0, 1, "", "sum"], [82, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[83, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "all"], [83, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[84, 2, 1, "", "_wrap_function"], [84, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[85, 3, 0, "-", "activations"], [86, 3, 0, "-", "base"], [115, 3, 0, "-", "container"], [87, 3, 0, "-", "conversions"], [88, 3, 0, "-", "creation"], [89, 3, 0, "-", "data_type"], [90, 3, 0, "-", "device"], [91, 3, 0, "-", "elementwise"], [92, 3, 0, "-", "experimental"], [93, 3, 0, "-", "general"], [94, 3, 0, "-", "gradients"], [95, 3, 0, "-", "image"], [96, 3, 0, "-", "layers"], [97, 3, 0, "-", "linear_algebra"], [98, 3, 0, "-", "losses"], [99, 3, 0, "-", "manipulation"], [100, 3, 0, "-", "norms"], [101, 3, 0, "-", "random"], [102, 3, 0, "-", "searching"], [103, 3, 0, "-", "set"], [104, 3, 0, "-", "sorting"], [105, 3, 0, "-", "statistical"], [106, 3, 0, "-", "utility"], [107, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[85, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_gelu"], [85, 0, 1, "", "_static_hardswish"], [85, 0, 1, "", "_static_leaky_relu"], [85, 0, 1, "", "_static_log_softmax"], [85, 0, 1, "", "_static_mish"], [85, 0, 1, "", "_static_relu"], [85, 0, 1, "", "_static_sigmoid"], [85, 0, 1, "", "_static_softmax"], [85, 0, 1, "", "_static_softplus"], [85, 0, 1, "", "gelu"], [85, 0, 1, "", "hardswish"], [85, 0, 1, "", "leaky_relu"], [85, 0, 1, "", "log_softmax"], [85, 0, 1, "", "mish"], [85, 0, 1, "", "relu"], [85, 0, 1, "", "sigmoid"], [85, 0, 1, "", "softmax"], [85, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[86, 1, 1, "", "ContainerBase"], [86, 2, 1, "", "_is_jsonable"], [86, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[86, 0, 1, "", "__getitem__"], [86, 0, 1, "", "__init__"], [86, 0, 1, "", "__setitem__"], [86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [86, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [86, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [86, 0, 1, "", "_cont_concat_unify"], [86, 0, 1, "", "_cont_get_dev"], [86, 0, 1, "", "_cont_get_dtype"], [86, 0, 1, "", "_cont_get_shape"], [86, 0, 1, "", "_cont_get_shapes"], [86, 5, 1, "", "_cont_ivy"], [86, 0, 1, "", "_cont_mean_unify"], [86, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [86, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [86, 0, 1, "", "_cont_slice_keys"], [86, 0, 1, "", "_cont_sum_unify"], [86, 0, 1, "", "_get_queue_item"], [86, 0, 1, "", "cont_all_false"], [86, 0, 1, "", "cont_all_key_chains"], [86, 0, 1, "", "cont_all_true"], [86, 0, 1, "", "cont_as_bools"], [86, 0, 1, "", "cont_assert_contains_sub_container"], [86, 0, 1, "", "cont_assert_contains_sub_structure"], [86, 0, 1, "", "cont_assert_identical"], [86, 0, 1, "", "cont_assert_identical_structure"], [86, 0, 1, "", "cont_at_key_chain"], [86, 0, 1, "", "cont_at_key_chains"], [86, 0, 1, "", "cont_at_keys"], [86, 0, 1, "", "cont_combine"], [86, 0, 1, "", "cont_common_key_chains"], [86, 5, 1, "", "cont_config"], [86, 0, 1, "", "cont_contains_sub_container"], [86, 0, 1, "", "cont_contains_sub_structure"], [86, 0, 1, "", "cont_copy"], [86, 0, 1, "", "cont_create_if_absent"], [86, 0, 1, "", "cont_cutoff_at_depth"], [86, 0, 1, "", "cont_cutoff_at_height"], [86, 0, 1, "", "cont_deep_copy"], [86, 5, 1, "", "cont_dev"], [86, 5, 1, "", "cont_dev_str"], [86, 0, 1, "", "cont_diff"], [86, 5, 1, "", "cont_dtype"], [86, 0, 1, "", "cont_duplicate_array_keychains"], [86, 0, 1, "", "cont_find_sub_container"], [86, 0, 1, "", "cont_find_sub_structure"], [86, 0, 1, "", "cont_flatten_key_chain"], [86, 0, 1, "", "cont_flatten_key_chains"], [86, 0, 1, "", "cont_format_key_chains"], [86, 0, 1, "", "cont_from_disk_as_hdf5"], [86, 0, 1, "", "cont_from_disk_as_json"], [86, 0, 1, "", "cont_from_disk_as_pickled"], [86, 0, 1, "", "cont_from_flat_list"], [86, 0, 1, "", "cont_handle_inplace"], [86, 0, 1, "", "cont_has_key"], [86, 0, 1, "", "cont_has_key_chain"], [86, 0, 1, "", "cont_identical"], [86, 0, 1, "", "cont_identical_array_shapes"], [86, 0, 1, "", "cont_identical_configs"], [86, 0, 1, "", "cont_identical_structure"], [86, 0, 1, "", "cont_if_exists"], [86, 0, 1, "", "cont_inplace_update"], [86, 5, 1, "", "cont_ivy"], [86, 0, 1, "", "cont_key_chains_containing"], [86, 0, 1, "", "cont_list_join"], [86, 0, 1, "", "cont_list_stack"], [86, 0, 1, "", "cont_load"], [86, 0, 1, "", "cont_map"], [86, 0, 1, "", "cont_map_sub_conts"], [86, 5, 1, "", "cont_max_depth"], [86, 0, 1, "", "cont_multi_map"], [86, 0, 1, "", "cont_multi_map_in_function"], [86, 0, 1, "", "cont_num_arrays"], [86, 0, 1, "", "cont_overwrite_at_key_chain"], [86, 0, 1, "", "cont_overwrite_at_key_chains"], [86, 0, 1, "", "cont_prune_empty"], [86, 0, 1, "", "cont_prune_key_chain"], [86, 0, 1, "", "cont_prune_key_chains"], [86, 0, 1, "", "cont_prune_key_from_key_chains"], [86, 0, 1, "", "cont_prune_keys"], [86, 0, 1, "", "cont_prune_keys_from_key_chains"], [86, 0, 1, "", "cont_reduce"], [86, 0, 1, "", "cont_remove_key_length_limit"], [86, 0, 1, "", "cont_remove_print_limit"], [86, 0, 1, "", "cont_reshape_like"], [86, 0, 1, "", "cont_restructure"], [86, 0, 1, "", "cont_restructure_key_chains"], [86, 0, 1, "", "cont_save"], [86, 0, 1, "", "cont_set_at_key_chain"], [86, 0, 1, "", "cont_set_at_key_chains"], [86, 0, 1, "", "cont_set_at_keys"], [86, 5, 1, "", "cont_shape"], [86, 5, 1, "", "cont_shapes"], [86, 0, 1, "", "cont_show"], [86, 0, 1, "", "cont_show_sub_container"], [86, 0, 1, "", "cont_size_ordered_arrays"], [86, 0, 1, "", "cont_slice_keys"], [86, 0, 1, "", "cont_slice_via_key"], [86, 0, 1, "", "cont_sort_by_key"], [86, 0, 1, "", "cont_structural_diff"], [86, 0, 1, "", "cont_to_dict"], [86, 0, 1, "", "cont_to_disk_as_hdf5"], [86, 0, 1, "", "cont_to_disk_as_json"], [86, 0, 1, "", "cont_to_disk_as_pickled"], [86, 0, 1, "", "cont_to_flat_list"], [86, 0, 1, "", "cont_to_iterator"], [86, 0, 1, "", "cont_to_iterator_keys"], [86, 0, 1, "", "cont_to_iterator_values"], [86, 0, 1, "", "cont_to_jsonable"], [86, 0, 1, "", "cont_to_nested_list"], [86, 0, 1, "", "cont_to_raw"], [86, 0, 1, "", "cont_trim_key"], [86, 0, 1, "", "cont_try_kc"], [86, 0, 1, "", "cont_unify"], [86, 0, 1, "", "cont_unstack_conts"], [86, 0, 1, "", "cont_update_config"], [86, 0, 1, "", "cont_with_default_key_color"], [86, 0, 1, "", "cont_with_entries_as_lists"], [86, 0, 1, "", "cont_with_ivy_backend"], [86, 0, 1, "", "cont_with_key_length_limit"], [86, 0, 1, "", "cont_with_print_indent"], [86, 0, 1, "", "cont_with_print_limit"], [86, 0, 1, "", "cont_with_print_line_spacing"], [86, 5, 1, "", "dynamic_backend"], [86, 0, 1, "", "h5_file_size"], [86, 0, 1, "", "shuffle_h5_file"], [86, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[115, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[115, 0, 1, "", "__abs__"], [115, 0, 1, "", "__add__"], [115, 0, 1, "", "__eq__"], [115, 0, 1, "", "__ge__"], [115, 0, 1, "", "__gt__"], [115, 0, 1, "", "__init__"], [115, 0, 1, "", "__le__"], [115, 0, 1, "", "__lt__"], [115, 0, 1, "", "__ne__"], [115, 0, 1, "", "__pow__"], [115, 0, 1, "", "__radd__"], [115, 0, 1, "", "__rrshift__"], [115, 0, 1, "", "__rshift__"], [115, 0, 1, "", "__rsub__"], [115, 0, 1, "", "__sub__"], [115, 0, 1, "", "__truediv__"], [115, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[87, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_to_ivy"], [87, 0, 1, "", "_static_to_native"], [87, 0, 1, "", "to_ivy"], [87, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[88, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_arange"], [88, 0, 1, "", "_static_asarray"], [88, 0, 1, "", "_static_copy_array"], [88, 0, 1, "", "_static_empty"], [88, 0, 1, "", "_static_empty_like"], [88, 0, 1, "", "_static_eye"], [88, 0, 1, "", "_static_from_dlpack"], [88, 0, 1, "", "_static_full"], [88, 0, 1, "", "_static_full_like"], [88, 0, 1, "", "_static_linspace"], [88, 0, 1, "", "_static_logspace"], [88, 0, 1, "", "_static_meshgrid"], [88, 0, 1, "", "_static_native_array"], [88, 0, 1, "", "_static_one_hot"], [88, 0, 1, "", "_static_ones"], [88, 0, 1, "", "_static_ones_like"], [88, 0, 1, "", "_static_tril"], [88, 0, 1, "", "_static_triu"], [88, 0, 1, "", "_static_zeros"], [88, 0, 1, "", "_static_zeros_like"], [88, 0, 1, "", "asarray"], [88, 0, 1, "", "copy_array"], [88, 0, 1, "", "empty_like"], [88, 0, 1, "", "from_dlpack"], [88, 0, 1, "", "frombuffer"], [88, 0, 1, "", "full_like"], [88, 0, 1, "", "linspace"], [88, 0, 1, "", "logspace"], [88, 0, 1, "", "meshgrid"], [88, 0, 1, "", "native_array"], [88, 0, 1, "", "one_hot"], [88, 0, 1, "", "ones_like"], [88, 0, 1, "", "static_frombuffer"], [88, 0, 1, "", "static_triu_indices"], [88, 0, 1, "", "tril"], [88, 0, 1, "", "triu"], [88, 0, 1, "", "triu_indices"], [88, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[89, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_astype"], [89, 0, 1, "", "_static_broadcast_arrays"], [89, 0, 1, "", "_static_broadcast_to"], [89, 0, 1, "", "_static_can_cast"], [89, 0, 1, "", "_static_default_complex_dtype"], [89, 0, 1, "", "_static_default_float_dtype"], [89, 0, 1, "", "_static_dtype"], [89, 0, 1, "", "_static_finfo"], [89, 0, 1, "", "_static_function_supported_dtypes"], [89, 0, 1, "", "_static_function_unsupported_dtypes"], [89, 0, 1, "", "_static_iinfo"], [89, 0, 1, "", "_static_is_bool_dtype"], [89, 0, 1, "", "_static_is_complex_dtype"], [89, 0, 1, "", "_static_is_float_dtype"], [89, 0, 1, "", "_static_is_int_dtype"], [89, 0, 1, "", "_static_is_uint_dtype"], [89, 0, 1, "", "_static_result_type"], [89, 0, 1, "", "astype"], [89, 0, 1, "", "broadcast_arrays"], [89, 0, 1, "", "broadcast_to"], [89, 0, 1, "", "can_cast"], [89, 0, 1, "", "dtype"], [89, 0, 1, "", "finfo"], [89, 0, 1, "", "iinfo"], [89, 0, 1, "", "is_bool_dtype"], [89, 0, 1, "", "is_complex_dtype"], [89, 0, 1, "", "is_float_dtype"], [89, 0, 1, "", "is_int_dtype"], [89, 0, 1, "", "is_uint_dtype"], [89, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[90, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_dev"], [90, 0, 1, "", "_static_to_device"], [90, 0, 1, "", "dev"], [90, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[91, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_abs"], [91, 0, 1, "", "_static_acos"], [91, 0, 1, "", "_static_acosh"], [91, 0, 1, "", "_static_add"], [91, 0, 1, "", "_static_asin"], [91, 0, 1, "", "_static_asinh"], [91, 0, 1, "", "_static_atan"], [91, 0, 1, "", "_static_atan2"], [91, 0, 1, "", "_static_atanh"], [91, 0, 1, "", "_static_bitwise_and"], [91, 0, 1, "", "_static_bitwise_invert"], [91, 0, 1, "", "_static_bitwise_left_shift"], [91, 0, 1, "", "_static_bitwise_or"], [91, 0, 1, "", "_static_bitwise_right_shift"], [91, 0, 1, "", "_static_bitwise_xor"], [91, 0, 1, "", "_static_ceil"], [91, 0, 1, "", "_static_cos"], [91, 0, 1, "", "_static_cosh"], [91, 0, 1, "", "_static_deg2rad"], [91, 0, 1, "", "_static_divide"], [91, 0, 1, "", "_static_equal"], [91, 0, 1, "", "_static_erf"], [91, 0, 1, "", "_static_exp"], [91, 0, 1, "", "_static_expm1"], [91, 0, 1, "", "_static_floor"], [91, 0, 1, "", "_static_floor_divide"], [91, 0, 1, "", "_static_greater"], [91, 0, 1, "", "_static_greater_equal"], [91, 0, 1, "", "_static_isfinite"], [91, 0, 1, "", "_static_isinf"], [91, 0, 1, "", "_static_isnan"], [91, 0, 1, "", "_static_isreal"], [91, 0, 1, "", "_static_lcm"], [91, 0, 1, "", "_static_less"], [91, 0, 1, "", "_static_less_equal"], [91, 0, 1, "", "_static_log"], [91, 0, 1, "", "_static_log10"], [91, 0, 1, "", "_static_log1p"], [91, 0, 1, "", "_static_log2"], [91, 0, 1, "", "_static_logaddexp"], [91, 0, 1, "", "_static_logical_and"], [91, 0, 1, "", "_static_logical_not"], [91, 0, 1, "", "_static_logical_or"], [91, 0, 1, "", "_static_logical_xor"], [91, 0, 1, "", "_static_maximum"], [91, 0, 1, "", "_static_minimum"], [91, 0, 1, "", "_static_multiply"], [91, 0, 1, "", "_static_negative"], [91, 0, 1, "", "_static_not_equal"], [91, 0, 1, "", "_static_positive"], [91, 0, 1, "", "_static_pow"], [91, 0, 1, "", "_static_rad2deg"], [91, 0, 1, "", "_static_reciprocal"], [91, 0, 1, "", "_static_remainder"], [91, 0, 1, "", "_static_round"], [91, 0, 1, "", "_static_sign"], [91, 0, 1, "", "_static_sin"], [91, 0, 1, "", "_static_sinh"], [91, 0, 1, "", "_static_sqrt"], [91, 0, 1, "", "_static_square"], [91, 0, 1, "", "_static_subtract"], [91, 0, 1, "", "_static_tan"], [91, 0, 1, "", "_static_tanh"], [91, 0, 1, "", "_static_trapz"], [91, 0, 1, "", "_static_trunc"], [91, 0, 1, "", "_static_trunc_divide"], [91, 0, 1, "", "abs"], [91, 0, 1, "", "acos"], [91, 0, 1, "", "acosh"], [91, 0, 1, "", "add"], [91, 0, 1, "", "angle"], [91, 0, 1, "", "asin"], [91, 0, 1, "", "asinh"], [91, 0, 1, "", "atan"], [91, 0, 1, "", "atan2"], [91, 0, 1, "", "atanh"], [91, 0, 1, "", "bitwise_and"], [91, 0, 1, "", "bitwise_invert"], [91, 0, 1, "", "bitwise_left_shift"], [91, 0, 1, "", "bitwise_or"], [91, 0, 1, "", "bitwise_right_shift"], [91, 0, 1, "", "bitwise_xor"], [91, 0, 1, "", "ceil"], [91, 0, 1, "", "cos"], [91, 0, 1, "", "cosh"], [91, 0, 1, "", "deg2rad"], [91, 0, 1, "", "divide"], [91, 0, 1, "", "equal"], [91, 0, 1, "", "erf"], [91, 0, 1, "", "exp"], [91, 0, 1, "", "exp2"], [91, 0, 1, "", "expm1"], [91, 0, 1, "", "floor"], [91, 0, 1, "", "floor_divide"], [91, 0, 1, "", "fmin"], [91, 0, 1, "", "gcd"], [91, 0, 1, "", "greater"], [91, 0, 1, "", "greater_equal"], [91, 0, 1, "", "imag"], [91, 0, 1, "", "isfinite"], [91, 0, 1, "", "isinf"], [91, 0, 1, "", "isnan"], [91, 0, 1, "", "isreal"], [91, 0, 1, "", "lcm"], [91, 0, 1, "", "less"], [91, 0, 1, "", "less_equal"], [91, 0, 1, "", "log"], [91, 0, 1, "", "log10"], [91, 0, 1, "", "log1p"], [91, 0, 1, "", "log2"], [91, 0, 1, "", "logaddexp"], [91, 0, 1, "", "logaddexp2"], [91, 0, 1, "", "logical_and"], [91, 0, 1, "", "logical_not"], [91, 0, 1, "", "logical_or"], [91, 0, 1, "", "logical_xor"], [91, 0, 1, "", "maximum"], [91, 0, 1, "", "minimum"], [91, 0, 1, "", "multiply"], [91, 0, 1, "", "nan_to_num"], [91, 0, 1, "", "negative"], [91, 0, 1, "", "not_equal"], [91, 0, 1, "", "positive"], [91, 0, 1, "", "pow"], [91, 0, 1, "", "rad2deg"], [91, 0, 1, "", "real"], [91, 0, 1, "", "reciprocal"], [91, 0, 1, "", "remainder"], [91, 0, 1, "", "round"], [91, 0, 1, "", "sign"], [91, 0, 1, "", "sin"], [91, 0, 1, "", "sinh"], [91, 0, 1, "", "sqrt"], [91, 0, 1, "", "square"], [91, 0, 1, "", "static_angle"], [91, 0, 1, "", "static_exp2"], [91, 0, 1, "", "static_fmin"], [91, 0, 1, "", "static_gcd"], [91, 0, 1, "", "static_imag"], [91, 0, 1, "", "static_logaddexp2"], [91, 0, 1, "", "static_nan_to_num"], [91, 0, 1, "", "static_real"], [91, 0, 1, "", "subtract"], [91, 0, 1, "", "tan"], [91, 0, 1, "", "tanh"], [91, 0, 1, "", "trapz"], [91, 0, 1, "", "trunc"], [91, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[92, 3, 0, "-", "activations"], [92, 3, 0, "-", "conversions"], [92, 3, 0, "-", "creation"], [92, 3, 0, "-", "data_type"], [92, 3, 0, "-", "device"], [92, 3, 0, "-", "elementwise"], [92, 3, 0, "-", "general"], [92, 3, 0, "-", "gradients"], [92, 3, 0, "-", "image"], [92, 3, 0, "-", "layers"], [92, 3, 0, "-", "linear_algebra"], [92, 3, 0, "-", "losses"], [92, 3, 0, "-", "manipulation"], [92, 3, 0, "-", "norms"], [92, 3, 0, "-", "random"], [92, 3, 0, "-", "searching"], [92, 3, 0, "-", "set"], [92, 3, 0, "-", "sorting"], [92, 3, 0, "-", "statistical"], [92, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[92, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_celu"], [92, 0, 1, "", "_static_elu"], [92, 0, 1, "", "_static_hardshrink"], [92, 0, 1, "", "_static_hardsilu"], [92, 0, 1, "", "_static_hardtanh"], [92, 0, 1, "", "_static_scaled_tanh"], [92, 0, 1, "", "_static_silu"], [92, 0, 1, "", "_static_softshrink"], [92, 0, 1, "", "_static_tanhshrink"], [92, 0, 1, "", "_static_threshold"], [92, 0, 1, "", "celu"], [92, 0, 1, "", "elu"], [92, 0, 1, "", "hardshrink"], [92, 0, 1, "", "hardsilu"], [92, 0, 1, "", "hardtanh"], [92, 0, 1, "", "logit"], [92, 0, 1, "", "logsigmoid"], [92, 0, 1, "", "prelu"], [92, 0, 1, "", "relu6"], [92, 0, 1, "", "scaled_tanh"], [92, 0, 1, "", "selu"], [92, 0, 1, "", "silu"], [92, 0, 1, "", "softshrink"], [92, 0, 1, "", "static_logit"], [92, 0, 1, "", "static_logsigmoid"], [92, 0, 1, "", "static_prelu"], [92, 0, 1, "", "static_relu6"], [92, 0, 1, "", "static_selu"], [92, 0, 1, "", "static_thresholded_relu"], [92, 0, 1, "", "tanhshrink"], [92, 0, 1, "", "threshold"], [92, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[92, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[92, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[92, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_trilu"], [92, 0, 1, "", "blackman_window"], [92, 0, 1, "", "eye_like"], [92, 0, 1, "", "hamming_window"], [92, 0, 1, "", "hann_window"], [92, 0, 1, "", "kaiser_bessel_derived_window"], [92, 0, 1, "", "kaiser_window"], [92, 0, 1, "", "mel_weight_matrix"], [92, 0, 1, "", "polyval"], [92, 0, 1, "", "static_blackman_window"], [92, 0, 1, "", "static_eye_like"], [92, 0, 1, "", "static_hamming_window"], [92, 0, 1, "", "static_hann_window"], [92, 0, 1, "", "static_kaiser_bessel_derived_window"], [92, 0, 1, "", "static_kaiser_window"], [92, 0, 1, "", "static_mel_weight_matrix"], [92, 0, 1, "", "static_polyval"], [92, 0, 1, "", "static_tril_indices"], [92, 0, 1, "", "static_unsorted_segment_mean"], [92, 0, 1, "", "static_unsorted_segment_min"], [92, 0, 1, "", "static_unsorted_segment_sum"], [92, 0, 1, "", "static_vorbis_window"], [92, 0, 1, "", "tril_indices"], [92, 0, 1, "", "trilu"], [92, 0, 1, "", "unsorted_segment_mean"], [92, 0, 1, "", "unsorted_segment_min"], [92, 0, 1, "", "unsorted_segment_sum"], [92, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[92, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[92, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[92, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[92, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[92, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "allclose"], [92, 0, 1, "", "amax"], [92, 0, 1, "", "amin"], [92, 0, 1, "", "binarizer"], [92, 0, 1, "", "conj"], [92, 0, 1, "", "copysign"], [92, 0, 1, "", "count_nonzero"], [92, 0, 1, "", "diff"], [92, 0, 1, "", "digamma"], [92, 0, 1, "", "erfc"], [92, 0, 1, "", "erfinv"], [92, 0, 1, "", "fix"], [92, 0, 1, "", "float_power"], [92, 0, 1, "", "fmax"], [92, 0, 1, "", "fmod"], [92, 0, 1, "", "frexp"], [92, 0, 1, "", "gradient"], [92, 0, 1, "", "hypot"], [92, 0, 1, "", "isclose"], [92, 0, 1, "", "ldexp"], [92, 0, 1, "", "lerp"], [92, 0, 1, "", "modf"], [92, 0, 1, "", "nansum"], [92, 0, 1, "", "nextafter"], [92, 0, 1, "", "signbit"], [92, 0, 1, "", "sinc"], [92, 0, 1, "", "sparsify_tensor"], [92, 0, 1, "", "static_allclose"], [92, 0, 1, "", "static_amax"], [92, 0, 1, "", "static_amin"], [92, 0, 1, "", "static_binarizer"], [92, 0, 1, "", "static_conj"], [92, 0, 1, "", "static_copysign"], [92, 0, 1, "", "static_count_nonzero"], [92, 0, 1, "", "static_diff"], [92, 0, 1, "", "static_digamma"], [92, 0, 1, "", "static_erfc"], [92, 0, 1, "", "static_erfinv"], [92, 0, 1, "", "static_fix"], [92, 0, 1, "", "static_float_power"], [92, 0, 1, "", "static_fmax"], [92, 0, 1, "", "static_fmod"], [92, 0, 1, "", "static_frexp"], [92, 0, 1, "", "static_gradient"], [92, 0, 1, "", "static_hypot"], [92, 0, 1, "", "static_isclose"], [92, 0, 1, "", "static_ldexp"], [92, 0, 1, "", "static_lerp"], [92, 0, 1, "", "static_modf"], [92, 0, 1, "", "static_nansum"], [92, 0, 1, "", "static_nextafter"], [92, 0, 1, "", "static_signbit"], [92, 0, 1, "", "static_sinc"], [92, 0, 1, "", "static_sparsify_tensor"], [92, 0, 1, "", "static_xlogy"], [92, 0, 1, "", "static_zeta"], [92, 0, 1, "", "xlogy"], [92, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[92, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_reduce"], [92, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[92, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[92, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[92, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[92, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[92, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_fft"], [92, 0, 1, "", "_static_sliding_window"], [92, 0, 1, "", "adaptive_avg_pool1d"], [92, 0, 1, "", "adaptive_avg_pool2d"], [92, 0, 1, "", "adaptive_max_pool2d"], [92, 0, 1, "", "adaptive_max_pool3d"], [92, 0, 1, "", "avg_pool1d"], [92, 0, 1, "", "avg_pool2d"], [92, 0, 1, "", "avg_pool3d"], [92, 0, 1, "", "dct"], [92, 0, 1, "", "dft"], [92, 0, 1, "", "embedding"], [92, 0, 1, "", "fft"], [92, 0, 1, "", "idct"], [92, 0, 1, "", "ifft"], [92, 0, 1, "", "ifftn"], [92, 0, 1, "", "interpolate"], [92, 0, 1, "", "max_pool1d"], [92, 0, 1, "", "max_pool2d"], [92, 0, 1, "", "max_pool3d"], [92, 0, 1, "", "max_unpool1d"], [92, 0, 1, "", "rfft"], [92, 0, 1, "", "rfftn"], [92, 0, 1, "", "sliding_window"], [92, 0, 1, "", "static_adaptive_avg_pool1d"], [92, 0, 1, "", "static_adaptive_avg_pool2d"], [92, 0, 1, "", "static_adaptive_max_pool2d"], [92, 0, 1, "", "static_adaptive_max_pool3d"], [92, 0, 1, "", "static_avg_pool1d"], [92, 0, 1, "", "static_avg_pool2d"], [92, 0, 1, "", "static_avg_pool3d"], [92, 0, 1, "", "static_dct"], [92, 0, 1, "", "static_dft"], [92, 0, 1, "", "static_embedding"], [92, 0, 1, "", "static_idct"], [92, 0, 1, "", "static_ifft"], [92, 0, 1, "", "static_ifftn"], [92, 0, 1, "", "static_interpolate"], [92, 0, 1, "", "static_max_pool1d"], [92, 0, 1, "", "static_max_pool2d"], [92, 0, 1, "", "static_max_pool3d"], [92, 0, 1, "", "static_max_unpool1d"], [92, 0, 1, "", "static_rfft"], [92, 0, 1, "", "static_rfftn"], [92, 0, 1, "", "static_rnn"], [92, 0, 1, "", "static_stft"], [92, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[92, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "adjoint"], [92, 0, 1, "", "batched_outer"], [92, 0, 1, "", "cond"], [92, 0, 1, "", "diagflat"], [92, 0, 1, "", "dot"], [92, 0, 1, "", "eig"], [92, 0, 1, "", "eigh_tridiagonal"], [92, 0, 1, "", "eigvals"], [92, 0, 1, "", "higher_order_moment"], [92, 0, 1, "", "initialize_tucker"], [92, 0, 1, "", "kron"], [92, 0, 1, "", "make_svd_non_negative"], [92, 0, 1, "", "matrix_exp"], [92, 0, 1, "", "mode_dot"], [92, 0, 1, "", "multi_dot"], [92, 0, 1, "", "multi_mode_dot"], [92, 0, 1, "", "partial_tucker"], [92, 0, 1, "", "static_adjoint"], [92, 0, 1, "", "static_batched_outer"], [92, 0, 1, "", "static_cond"], [92, 0, 1, "", "static_diagflat"], [92, 0, 1, "", "static_dot"], [92, 0, 1, "", "static_eig"], [92, 0, 1, "", "static_eigh_tridiagonal"], [92, 0, 1, "", "static_eigvals"], [92, 0, 1, "", "static_higher_order_moment"], [92, 0, 1, "", "static_initialize_tucker"], [92, 0, 1, "", "static_kron"], [92, 0, 1, "", "static_make_svd_non_negative"], [92, 0, 1, "", "static_matrix_exp"], [92, 0, 1, "", "static_mode_dot"], [92, 0, 1, "", "static_multi_dot"], [92, 0, 1, "", "static_multi_mode_dot"], [92, 0, 1, "", "static_partial_tucker"], [92, 0, 1, "", "static_svd_flip"], [92, 0, 1, "", "static_tensor_train"], [92, 0, 1, "", "static_truncated_svd"], [92, 0, 1, "", "static_tt_matrix_to_tensor"], [92, 0, 1, "", "static_tucker"], [92, 0, 1, "", "svd_flip"], [92, 0, 1, "", "tensor_train"], [92, 0, 1, "", "truncated_svd"], [92, 0, 1, "", "tt_matrix_to_tensor"], [92, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[92, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_hinge_embedding_loss"], [92, 0, 1, "", "_static_huber_loss"], [92, 0, 1, "", "_static_kl_div"], [92, 0, 1, "", "_static_l1_loss"], [92, 0, 1, "", "_static_log_poisson_loss"], [92, 0, 1, "", "_static_poisson_nll_loss"], [92, 0, 1, "", "_static_smooth_l1_loss"], [92, 0, 1, "", "_static_soft_margin_loss"], [92, 0, 1, "", "hinge_embedding_loss"], [92, 0, 1, "", "huber_loss"], [92, 0, 1, "", "kl_div"], [92, 0, 1, "", "l1_loss"], [92, 0, 1, "", "log_poisson_loss"], [92, 0, 1, "", "poisson_nll_loss"], [92, 0, 1, "", "smooth_l1_loss"], [92, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[92, 1, 1, "", "_ContainerWithManipulationExperimental"], [92, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_fill_diagonal"], [92, 0, 1, "", "_static_put_along_axis"], [92, 0, 1, "", "_static_take"], [92, 0, 1, "", "_static_trim_zeros"], [92, 0, 1, "", "_static_unflatten"], [92, 0, 1, "", "_static_unique_consecutive"], [92, 0, 1, "", "as_strided"], [92, 0, 1, "", "associative_scan"], [92, 0, 1, "", "atleast_1d"], [92, 0, 1, "", "atleast_2d"], [92, 0, 1, "", "atleast_3d"], [92, 0, 1, "", "broadcast_shapes"], [92, 0, 1, "", "column_stack"], [92, 0, 1, "", "concat_from_sequence"], [92, 0, 1, "", "dsplit"], [92, 0, 1, "", "dstack"], [92, 0, 1, "", "expand"], [92, 0, 1, "", "fill_diagonal"], [92, 0, 1, "", "flatten"], [92, 0, 1, "", "fliplr"], [92, 0, 1, "", "flipud"], [92, 0, 1, "", "fold"], [92, 0, 1, "", "heaviside"], [92, 0, 1, "", "hsplit"], [92, 0, 1, "", "hstack"], [92, 0, 1, "", "i0"], [92, 0, 1, "", "matricize"], [92, 0, 1, "", "moveaxis"], [92, 0, 1, "", "pad"], [92, 0, 1, "", "partial_fold"], [92, 0, 1, "", "partial_tensor_to_vec"], [92, 0, 1, "", "partial_unfold"], [92, 0, 1, "", "partial_vec_to_tensor"], [92, 0, 1, "", "put_along_axis"], [92, 0, 1, "", "rot90"], [92, 0, 1, "", "soft_thresholding"], [92, 0, 1, "", "static_as_strided"], [92, 0, 1, "", "static_atleast_1d"], [92, 0, 1, "", "static_atleast_2d"], [92, 0, 1, "", "static_atleast_3d"], [92, 0, 1, "", "static_broadcast_shapes"], [92, 0, 1, "", "static_column_stack"], [92, 0, 1, "", "static_concat_from_sequence"], [92, 0, 1, "", "static_dsplit"], [92, 0, 1, "", "static_dstack"], [92, 0, 1, "", "static_expand"], [92, 0, 1, "", "static_flatten"], [92, 0, 1, "", "static_fliplr"], [92, 0, 1, "", "static_flipud"], [92, 0, 1, "", "static_fold"], [92, 0, 1, "", "static_heaviside"], [92, 0, 1, "", "static_hsplit"], [92, 0, 1, "", "static_hstack"], [92, 0, 1, "", "static_i0"], [92, 0, 1, "", "static_matricize"], [92, 0, 1, "", "static_moveaxis"], [92, 0, 1, "", "static_pad"], [92, 0, 1, "", "static_partial_fold"], [92, 0, 1, "", "static_partial_tensor_to_vec"], [92, 0, 1, "", "static_partial_unfold"], [92, 0, 1, "", "static_partial_vec_to_tensor"], [92, 0, 1, "", "static_rot90"], [92, 0, 1, "", "static_soft_thresholding"], [92, 0, 1, "", "static_take_along_axis"], [92, 0, 1, "", "static_top_k"], [92, 0, 1, "", "static_unfold"], [92, 0, 1, "", "static_vsplit"], [92, 0, 1, "", "static_vstack"], [92, 0, 1, "", "take"], [92, 0, 1, "", "take_along_axis"], [92, 0, 1, "", "top_k"], [92, 0, 1, "", "trim_zeros"], [92, 0, 1, "", "unflatten"], [92, 0, 1, "", "unfold"], [92, 0, 1, "", "unique_consecutive"], [92, 0, 1, "", "vsplit"], [92, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[92, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "batch_norm"], [92, 0, 1, "", "group_norm"], [92, 0, 1, "", "instance_norm"], [92, 0, 1, "", "l1_normalize"], [92, 0, 1, "", "l2_normalize"], [92, 0, 1, "", "lp_normalize"], [92, 0, 1, "", "static_batch_norm"], [92, 0, 1, "", "static_group_norm"], [92, 0, 1, "", "static_instance_norm"], [92, 0, 1, "", "static_l1_normalize"], [92, 0, 1, "", "static_l2_normalize"], [92, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[92, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "bernoulli"], [92, 0, 1, "", "beta"], [92, 0, 1, "", "dirichlet"], [92, 0, 1, "", "gamma"], [92, 0, 1, "", "poisson"], [92, 0, 1, "", "static_bernoulli"], [92, 0, 1, "", "static_beta"], [92, 0, 1, "", "static_dirichlet"], [92, 0, 1, "", "static_gamma"], [92, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[92, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "static_unravel_index"], [92, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[92, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[92, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[92, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "invert_permutation"], [92, 0, 1, "", "lexsort"], [92, 0, 1, "", "static_invert_permutation"], [92, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[92, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_cummax"], [92, 0, 1, "", "_static_cummin"], [92, 0, 1, "", "_static_nanmin"], [92, 0, 1, "", "bincount"], [92, 0, 1, "", "corrcoef"], [92, 0, 1, "", "cov"], [92, 0, 1, "", "cummax"], [92, 0, 1, "", "cummin"], [92, 0, 1, "", "histogram"], [92, 0, 1, "", "igamma"], [92, 0, 1, "", "lgamma"], [92, 0, 1, "", "median"], [92, 0, 1, "", "nanmean"], [92, 0, 1, "", "nanmedian"], [92, 0, 1, "", "nanmin"], [92, 0, 1, "", "nanprod"], [92, 0, 1, "", "quantile"], [92, 0, 1, "", "static_bincount"], [92, 0, 1, "", "static_corrcoef"], [92, 0, 1, "", "static_cov"], [92, 0, 1, "", "static_histogram"], [92, 0, 1, "", "static_igamma"], [92, 0, 1, "", "static_lgamma"], [92, 0, 1, "", "static_median"], [92, 0, 1, "", "static_nanmean"], [92, 0, 1, "", "static_nanmedian"], [92, 0, 1, "", "static_nanprod"], [92, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[92, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "optional_get_element"], [92, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[93, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_all_equal"], [93, 0, 1, "", "_static_array_equal"], [93, 0, 1, "", "_static_assert_supports_inplace"], [93, 0, 1, "", "_static_clip_matrix_norm"], [93, 0, 1, "", "_static_clip_vector_norm"], [93, 0, 1, "", "_static_einops_rearrange"], [93, 0, 1, "", "_static_einops_reduce"], [93, 0, 1, "", "_static_einops_repeat"], [93, 0, 1, "", "_static_exists"], [93, 0, 1, "", "_static_fourier_encode"], [93, 0, 1, "", "_static_gather"], [93, 0, 1, "", "_static_gather_nd"], [93, 0, 1, "", "_static_get_num_dims"], [93, 0, 1, "", "_static_has_nans"], [93, 0, 1, "", "_static_inplace_decrement"], [93, 0, 1, "", "_static_inplace_increment"], [93, 0, 1, "", "_static_inplace_update"], [93, 0, 1, "", "_static_is_array"], [93, 0, 1, "", "_static_is_ivy_array"], [93, 0, 1, "", "_static_is_native_array"], [93, 0, 1, "", "_static_scatter_flat"], [93, 0, 1, "", "_static_scatter_nd"], [93, 0, 1, "", "_static_size"], [93, 0, 1, "", "_static_stable_divide"], [93, 0, 1, "", "_static_stable_pow"], [93, 0, 1, "", "_static_supports_inplace_updates"], [93, 0, 1, "", "_static_to_list"], [93, 0, 1, "", "_static_to_numpy"], [93, 0, 1, "", "_static_to_scalar"], [93, 0, 1, "", "_static_value_is_nan"], [93, 0, 1, "", "all_equal"], [93, 0, 1, "", "array_equal"], [93, 0, 1, "", "assert_supports_inplace"], [93, 0, 1, "", "clip_matrix_norm"], [93, 0, 1, "", "clip_vector_norm"], [93, 0, 1, "", "einops_rearrange"], [93, 0, 1, "", "einops_reduce"], [93, 0, 1, "", "einops_repeat"], [93, 0, 1, "", "exists"], [93, 0, 1, "", "fourier_encode"], [93, 0, 1, "", "gather"], [93, 0, 1, "", "gather_nd"], [93, 0, 1, "", "get_num_dims"], [93, 0, 1, "", "has_nans"], [93, 0, 1, "", "inplace_decrement"], [93, 0, 1, "", "inplace_increment"], [93, 0, 1, "", "inplace_update"], [93, 0, 1, "", "is_array"], [93, 0, 1, "", "is_ivy_array"], [93, 0, 1, "", "is_native_array"], [93, 0, 1, "", "isin"], [93, 0, 1, "", "itemsize"], [93, 0, 1, "", "scatter_flat"], [93, 0, 1, "", "scatter_nd"], [93, 0, 1, "", "size"], [93, 0, 1, "", "stable_divide"], [93, 0, 1, "", "stable_pow"], [93, 0, 1, "", "static_isin"], [93, 0, 1, "", "static_itemsize"], [93, 0, 1, "", "static_strides"], [93, 0, 1, "", "strides"], [93, 0, 1, "", "supports_inplace_updates"], [93, 0, 1, "", "to_list"], [93, 0, 1, "", "to_numpy"], [93, 0, 1, "", "to_scalar"], [93, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[94, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_stop_gradient"], [94, 0, 1, "", "adam_step"], [94, 0, 1, "", "adam_update"], [94, 0, 1, "", "gradient_descent_update"], [94, 0, 1, "", "lamb_update"], [94, 0, 1, "", "lars_update"], [94, 0, 1, "", "optimizer_update"], [94, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[95, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[95, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[96, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_conv1d"], [96, 0, 1, "", "_static_conv1d_transpose"], [96, 0, 1, "", "_static_conv2d"], [96, 0, 1, "", "_static_conv2d_transpose"], [96, 0, 1, "", "_static_conv3d"], [96, 0, 1, "", "_static_conv3d_transpose"], [96, 0, 1, "", "_static_depthwise_conv2d"], [96, 0, 1, "", "_static_dropout"], [96, 0, 1, "", "_static_dropout1d"], [96, 0, 1, "", "_static_dropout2d"], [96, 0, 1, "", "_static_dropout3d"], [96, 0, 1, "", "_static_linear"], [96, 0, 1, "", "_static_lstm_update"], [96, 0, 1, "", "_static_multi_head_attention"], [96, 0, 1, "", "_static_reduce_window"], [96, 0, 1, "", "_static_scaled_dot_product_attention"], [96, 0, 1, "", "conv1d"], [96, 0, 1, "", "conv1d_transpose"], [96, 0, 1, "", "conv2d"], [96, 0, 1, "", "conv2d_transpose"], [96, 0, 1, "", "conv3d"], [96, 0, 1, "", "conv3d_transpose"], [96, 0, 1, "", "depthwise_conv2d"], [96, 0, 1, "", "dropout"], [96, 0, 1, "", "dropout1d"], [96, 0, 1, "", "dropout2d"], [96, 0, 1, "", "dropout3d"], [96, 0, 1, "", "linear"], [96, 0, 1, "", "lstm_update"], [96, 0, 1, "", "multi_head_attention"], [96, 0, 1, "", "reduce_window"], [96, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[97, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "_static_cholesky"], [97, 0, 1, "", "_static_cross"], [97, 0, 1, "", "_static_det"], [97, 0, 1, "", "_static_diag"], [97, 0, 1, "", "_static_diagonal"], [97, 0, 1, "", "_static_eigh"], [97, 0, 1, "", "_static_eigvalsh"], [97, 0, 1, "", "_static_inner"], [97, 0, 1, "", "_static_inv"], [97, 0, 1, "", "_static_matmul"], [97, 0, 1, "", "_static_matrix_norm"], [97, 0, 1, "", "_static_matrix_power"], [97, 0, 1, "", "_static_matrix_rank"], [97, 0, 1, "", "_static_matrix_transpose"], [97, 0, 1, "", "_static_outer"], [97, 0, 1, "", "_static_pinv"], [97, 0, 1, "", "_static_qr"], [97, 0, 1, "", "_static_slogdet"], [97, 0, 1, "", "_static_solve"], [97, 0, 1, "", "_static_svd"], [97, 0, 1, "", "_static_svdvals"], [97, 0, 1, "", "_static_tensordot"], [97, 0, 1, "", "_static_tensorsolve"], [97, 0, 1, "", "_static_trace"], [97, 0, 1, "", "_static_vander"], [97, 0, 1, "", "_static_vecdot"], [97, 0, 1, "", "_static_vector_norm"], [97, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [97, 0, 1, "", "cholesky"], [97, 0, 1, "", "cross"], [97, 0, 1, "", "det"], [97, 0, 1, "", "diag"], [97, 0, 1, "", "diagonal"], [97, 0, 1, "", "eigh"], [97, 0, 1, "", "eigvalsh"], [97, 0, 1, "", "general_inner_product"], [97, 0, 1, "", "inner"], [97, 0, 1, "", "inv"], [97, 0, 1, "", "matmul"], [97, 0, 1, "", "matrix_norm"], [97, 0, 1, "", "matrix_power"], [97, 0, 1, "", "matrix_rank"], [97, 0, 1, "", "matrix_transpose"], [97, 0, 1, "", "outer"], [97, 0, 1, "", "pinv"], [97, 0, 1, "", "qr"], [97, 0, 1, "", "slogdet"], [97, 0, 1, "", "solve"], [97, 0, 1, "", "static_general_inner_product"], [97, 0, 1, "", "svd"], [97, 0, 1, "", "svdvals"], [97, 0, 1, "", "tensordot"], [97, 0, 1, "", "tensorsolve"], [97, 0, 1, "", "trace"], [97, 0, 1, "", "vander"], [97, 0, 1, "", "vecdot"], [97, 0, 1, "", "vector_norm"], [97, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[98, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "_static_binary_cross_entropy"], [98, 0, 1, "", "_static_cross_entropy"], [98, 0, 1, "", "_static_sparse_cross_entropy"], [98, 0, 1, "", "binary_cross_entropy"], [98, 0, 1, "", "cross_entropy"], [98, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[99, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "_static_clip"], [99, 0, 1, "", "_static_concat"], [99, 0, 1, "", "_static_constant_pad"], [99, 0, 1, "", "_static_expand_dims"], [99, 0, 1, "", "_static_flip"], [99, 0, 1, "", "_static_permute_dims"], [99, 0, 1, "", "_static_repeat"], [99, 0, 1, "", "_static_reshape"], [99, 0, 1, "", "_static_roll"], [99, 0, 1, "", "_static_split"], [99, 0, 1, "", "_static_squeeze"], [99, 0, 1, "", "_static_stack"], [99, 0, 1, "", "_static_swapaxes"], [99, 0, 1, "", "_static_tile"], [99, 0, 1, "", "_static_unstack"], [99, 0, 1, "", "_static_zero_pad"], [99, 0, 1, "", "clip"], [99, 0, 1, "", "concat"], [99, 0, 1, "", "constant_pad"], [99, 0, 1, "", "expand_dims"], [99, 0, 1, "", "flip"], [99, 0, 1, "", "permute_dims"], [99, 0, 1, "", "repeat"], [99, 0, 1, "", "reshape"], [99, 0, 1, "", "roll"], [99, 0, 1, "", "split"], [99, 0, 1, "", "squeeze"], [99, 0, 1, "", "stack"], [99, 0, 1, "", "swapaxes"], [99, 0, 1, "", "tile"], [99, 0, 1, "", "unstack"], [99, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[100, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[101, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "_static_multinomial"], [101, 0, 1, "", "_static_randint"], [101, 0, 1, "", "_static_random_normal"], [101, 0, 1, "", "_static_random_uniform"], [101, 0, 1, "", "_static_shuffle"], [101, 0, 1, "", "multinomial"], [101, 0, 1, "", "randint"], [101, 0, 1, "", "random_normal"], [101, 0, 1, "", "random_uniform"], [101, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[102, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "_static_argmax"], [102, 0, 1, "", "_static_argmin"], [102, 0, 1, "", "_static_argwhere"], [102, 0, 1, "", "_static_nonzero"], [102, 0, 1, "", "_static_where"], [102, 0, 1, "", "argmax"], [102, 0, 1, "", "argmin"], [102, 0, 1, "", "argwhere"], [102, 0, 1, "", "nonzero"], [102, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[103, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "_static_unique_all"], [103, 0, 1, "", "_static_unique_counts"], [103, 0, 1, "", "_static_unique_inverse"], [103, 0, 1, "", "_static_unique_values"], [103, 0, 1, "", "unique_all"], [103, 0, 1, "", "unique_counts"], [103, 0, 1, "", "unique_inverse"], [103, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[104, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "_static_argsort"], [104, 0, 1, "", "_static_searchsorted"], [104, 0, 1, "", "_static_sort"], [104, 0, 1, "", "argsort"], [104, 0, 1, "", "msort"], [104, 0, 1, "", "searchsorted"], [104, 0, 1, "", "sort"], [104, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[105, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "_static_cumprod"], [105, 0, 1, "", "_static_cumsum"], [105, 0, 1, "", "_static_min"], [105, 0, 1, "", "_static_prod"], [105, 0, 1, "", "_static_sum"], [105, 0, 1, "", "_static_var"], [105, 0, 1, "", "cumprod"], [105, 0, 1, "", "cumsum"], [105, 0, 1, "", "einsum"], [105, 0, 1, "", "max"], [105, 0, 1, "", "mean"], [105, 0, 1, "", "min"], [105, 0, 1, "", "prod"], [105, 0, 1, "", "std"], [105, 0, 1, "", "sum"], [105, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[106, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "_static_all"], [106, 0, 1, "", "_static_any"], [106, 0, 1, "", "all"], [106, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[107, 2, 1, "", "_wrap_function"], [107, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[108, 3, 0, "-", "base"], [109, 3, 0, "-", "cp_tensor"], [110, 3, 0, "-", "parafac2_tensor"], [111, 3, 0, "-", "tr_tensor"], [112, 3, 0, "-", "tt_tensor"], [113, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[108, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[108, 0, 1, "", "__init__"], [108, 4, 1, "", "_abc_impl"], [108, 0, 1, "", "mode_dot"], [108, 0, 1, "", "norm"], [108, 0, 1, "", "to_tensor"], [108, 0, 1, "", "to_unfolded"], [108, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[109, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[109, 0, 1, "", "__init__"], [109, 4, 1, "", "_abc_impl"], [109, 0, 1, "", "cp_copy"], [109, 0, 1, "", "cp_flip_sign"], [109, 0, 1, "", "cp_lstsq_grad"], [109, 0, 1, "", "cp_mode_dot"], [109, 0, 1, "", "cp_n_param"], [109, 0, 1, "", "cp_norm"], [109, 0, 1, "", "cp_normalize"], [109, 0, 1, "", "cp_to_tensor"], [109, 0, 1, "", "cp_to_unfolded"], [109, 0, 1, "", "cp_to_vec"], [109, 0, 1, "", "mode_dot"], [109, 5, 1, "", "n_param"], [109, 0, 1, "", "norm"], [109, 0, 1, "", "normalize"], [109, 0, 1, "", "to_tensor"], [109, 0, 1, "", "to_unfolded"], [109, 0, 1, "", "to_vec"], [109, 0, 1, "", "unfolding_dot_khatri_rao"], [109, 0, 1, "", "validate_cp_rank"], [109, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[110, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[110, 0, 1, "", "__init__"], [110, 4, 1, "", "_abc_impl"], [110, 0, 1, "", "apply_parafac2_projections"], [110, 0, 1, "", "from_CPTensor"], [110, 5, 1, "", "n_param"], [110, 0, 1, "", "parafac2_normalise"], [110, 0, 1, "", "parafac2_to_slice"], [110, 0, 1, "", "parafac2_to_slices"], [110, 0, 1, "", "parafac2_to_tensor"], [110, 0, 1, "", "parafac2_to_unfolded"], [110, 0, 1, "", "parafac2_to_vec"], [110, 0, 1, "", "to_tensor"], [110, 0, 1, "", "to_unfolded"], [110, 0, 1, "", "to_vec"], [110, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[111, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[111, 0, 1, "", "__init__"], [111, 4, 1, "", "_abc_impl"], [111, 5, 1, "", "n_param"], [111, 0, 1, "", "to_tensor"], [111, 0, 1, "", "to_unfolded"], [111, 0, 1, "", "to_vec"], [111, 0, 1, "", "tr_n_param"], [111, 0, 1, "", "tr_to_tensor"], [111, 0, 1, "", "tr_to_unfolded"], [111, 0, 1, "", "tr_to_vec"], [111, 0, 1, "", "validate_tr_rank"], [111, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[112, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[112, 0, 1, "", "__init__"], [112, 4, 1, "", "_abc_impl"], [112, 0, 1, "", "_tt_n_param"], [112, 0, 1, "", "index_update"], [112, 5, 1, "", "n_param"], [112, 0, 1, "", "pad_tt_rank"], [112, 0, 1, "", "to_tensor"], [112, 0, 1, "", "to_unfolding"], [112, 0, 1, "", "to_vec"], [112, 0, 1, "", "tt_to_tensor"], [112, 0, 1, "", "tt_to_unfolded"], [112, 0, 1, "", "tt_to_vec"], [112, 0, 1, "", "validate_tt_rank"], [112, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[113, 1, 1, "", "TuckerTensor"], [113, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[113, 0, 1, "", "__init__"], [113, 4, 1, "", "_abc_impl"], [113, 0, 1, "", "mode_dot"], [113, 5, 1, "", "n_param"], [113, 0, 1, "", "to_tensor"], [113, 0, 1, "", "to_unfolded"], [113, 0, 1, "", "to_vec"], [113, 0, 1, "", "tucker_copy"], [113, 0, 1, "", "tucker_mode_dot"], [113, 0, 1, "", "tucker_n_param"], [113, 0, 1, "", "tucker_normalize"], [113, 0, 1, "", "tucker_to_tensor"], [113, 0, 1, "", "tucker_to_unfolded"], [113, 0, 1, "", "tucker_to_vec"], [113, 0, 1, "", "validate_tucker_rank"], [113, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[118, 3, 0, "-", "base"], [119, 3, 0, "-", "elementwise"], [117, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[118, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[118, 0, 1, "", "__init__"], [118, 4, 1, "", "_abc_impl"], [118, 0, 1, "", "broadcast_shapes"], [118, 5, 1, "", "data"], [118, 5, 1, "", "device"], [118, 5, 1, "", "dtype"], [118, 5, 1, "", "inner_shape"], [118, 5, 1, "", "ndim"], [118, 0, 1, "", "nested_array"], [118, 5, 1, "", "nested_rank"], [118, 0, 1, "", "ragged_map"], [118, 0, 1, "", "ragged_multi_map"], [118, 0, 1, "", "ragged_multi_map_in_function"], [118, 0, 1, "", "replace_ivy_arrays"], [118, 5, 1, "", "shape"], [118, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[119, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[119, 4, 1, "", "_abc_impl"], [119, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[117, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[117, 0, 1, "", "__init__"], [117, 0, 1, "", "from_row_lengths"], [117, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[638, 3, 0, "-", "activations"], [639, 3, 0, "-", "constants"], [640, 3, 0, "-", "control_flow_ops"], [641, 3, 0, "-", "creation"], [642, 3, 0, "-", "data_type"], [643, 3, 0, "-", "device"], [644, 3, 0, "-", "elementwise"], [645, 3, 0, "-", "experimental"], [646, 3, 0, "-", "general"], [647, 3, 0, "-", "gradients"], [648, 3, 0, "-", "layers"], [649, 3, 0, "-", "linear_algebra"], [650, 3, 0, "-", "losses"], [651, 3, 0, "-", "manipulation"], [652, 3, 0, "-", "meta"], [653, 3, 0, "-", "nest"], [654, 3, 0, "-", "norms"], [655, 3, 0, "-", "random"], [656, 3, 0, "-", "searching"], [657, 3, 0, "-", "set"], [658, 3, 0, "-", "sorting"], [659, 3, 0, "-", "statistical"], [660, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[379, 3, 0, "-", "activations"], [380, 3, 0, "-", "constants"], [381, 3, 0, "-", "creation"], [382, 3, 0, "-", "data_type"], [383, 3, 0, "-", "device"], [384, 3, 0, "-", "elementwise"], [385, 3, 0, "-", "general"], [386, 3, 0, "-", "gradients"], [387, 3, 0, "-", "layers"], [388, 3, 0, "-", "linear_algebra"], [389, 3, 0, "-", "losses"], [390, 3, 0, "-", "manipulation"], [391, 3, 0, "-", "meta"], [392, 3, 0, "-", "nest"], [393, 3, 0, "-", "norms"], [394, 3, 0, "-", "random"], [395, 3, 0, "-", "searching"], [396, 3, 0, "-", "set"], [397, 3, 0, "-", "sorting"], [398, 3, 0, "-", "sparse_array"], [399, 3, 0, "-", "statistical"], [400, 3, 0, "-", "utility"]], "ivy.stateful": [[803, 3, 0, "-", "activations"], [804, 3, 0, "-", "converters"], [805, 3, 0, "-", "helpers"], [806, 3, 0, "-", "initializers"], [807, 3, 0, "-", "layers"], [808, 3, 0, "-", "losses"], [809, 3, 0, "-", "module"], [810, 3, 0, "-", "norms"], [811, 3, 0, "-", "optimizers"], [812, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[803, 1, 1, "", "ELU"], [803, 1, 1, "", "GEGLU"], [803, 1, 1, "", "GELU"], [803, 1, 1, "", "Hardswish"], [803, 1, 1, "", "LeakyReLU"], [803, 1, 1, "", "LogSigmoid"], [803, 1, 1, "", "LogSoftmax"], [803, 1, 1, "", "Logit"], [803, 1, 1, "", "Mish"], [803, 1, 1, "", "PReLU"], [803, 1, 1, "", "ReLU"], [803, 1, 1, "", "ReLU6"], [803, 1, 1, "", "SeLU"], [803, 1, 1, "", "SiLU"], [803, 1, 1, "", "Sigmoid"], [803, 1, 1, "", "Softmax"], [803, 1, 1, "", "Softplus"], [803, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[803, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[803, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[804, 1, 1, "", "ModuleConverters"], [804, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[804, 0, 1, "", "from_flax_module"], [804, 0, 1, "", "from_haiku_module"], [804, 0, 1, "", "from_keras_module"], [804, 0, 1, "", "from_paddle_module"], [804, 0, 1, "", "from_torch_module"], [804, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[805, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[806, 1, 1, "", "Constant"], [806, 1, 1, "", "FirstLayerSiren"], [806, 1, 1, "", "GlorotUniform"], [806, 1, 1, "", "Initializer"], [806, 1, 1, "", "KaimingNormal"], [806, 1, 1, "", "Ones"], [806, 1, 1, "", "RandomNormal"], [806, 1, 1, "", "Siren"], [806, 1, 1, "", "Uniform"], [806, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[806, 0, 1, "", "__init__"], [806, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[806, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[806, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[806, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[806, 0, 1, "", "__init__"], [806, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[806, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[806, 0, 1, "", "__init__"], [806, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[806, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[806, 0, 1, "", "__init__"], [806, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[807, 1, 1, "", "AdaptiveAvgPool1d"], [807, 1, 1, "", "AdaptiveAvgPool2d"], [807, 1, 1, "", "AvgPool1D"], [807, 1, 1, "", "AvgPool2D"], [807, 1, 1, "", "AvgPool3D"], [807, 1, 1, "", "Conv1D"], [807, 1, 1, "", "Conv1DTranspose"], [807, 1, 1, "", "Conv2D"], [807, 1, 1, "", "Conv2DTranspose"], [807, 1, 1, "", "Conv3D"], [807, 1, 1, "", "Conv3DTranspose"], [807, 1, 1, "", "Dct"], [807, 1, 1, "", "DepthwiseConv2D"], [807, 1, 1, "", "Dropout"], [807, 1, 1, "", "Embedding"], [807, 1, 1, "", "FFT"], [807, 1, 1, "", "IDct"], [807, 1, 1, "", "IFFT"], [807, 1, 1, "", "Identity"], [807, 1, 1, "", "LSTM"], [807, 1, 1, "", "Linear"], [807, 1, 1, "", "MaxPool1D"], [807, 1, 1, "", "MaxPool2D"], [807, 1, 1, "", "MaxPool3D"], [807, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.IDct": [[807, 0, 1, "", "__init__"], [807, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[807, 0, 1, "", "__init__"], [807, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[807, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[807, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[808, 1, 1, "", "BinaryCrossEntropyLoss"], [808, 1, 1, "", "CrossEntropyLoss"], [808, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[808, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[808, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[808, 0, 1, "", "__init__"]], "ivy.stateful.module": [[809, 1, 1, "", "Module"], [809, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[809, 0, 1, "", "__call__"], [809, 0, 1, "", "__init__"], [809, 5, 1, "", "buffers"], [809, 0, 1, "", "build"], [809, 5, 1, "", "build_mode"], [809, 5, 1, "", "built"], [809, 5, 1, "", "device"], [809, 5, 1, "", "dtype"], [809, 0, 1, "", "eval"], [809, 0, 1, "", "load"], [809, 5, 1, "", "module_dict"], [809, 0, 1, "", "register_buffer"], [809, 0, 1, "", "register_parameter"], [809, 0, 1, "", "save"], [809, 0, 1, "", "save_weights"], [809, 0, 1, "", "show_graph"], [809, 5, 1, "", "state_dict"], [809, 0, 1, "", "to_device"], [809, 0, 1, "", "trace_graph"], [809, 0, 1, "", "train"], [809, 5, 1, "", "training"], [809, 5, 1, "", "v"]], "ivy.stateful.norms": [[810, 1, 1, "", "BatchNorm2D"], [810, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[810, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[811, 1, 1, "", "Adam"], [811, 1, 1, "", "AdamW"], [811, 1, 1, "", "LAMB"], [811, 1, 1, "", "LARS"], [811, 1, 1, "", "Optimizer"], [811, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "set_state"], [811, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[811, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "set_state"], [811, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "set_state"], [811, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "set_state"], [811, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "set_state"], [811, 5, 1, "", "state"]], "ivy.stateful.sequential": [[812, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[812, 0, 1, "", "__init__"]], "ivy.utils": [[813, 3, 0, "-", "assertions"], [814, 3, 0, "-", "backend"], [818, 3, 0, "-", "binaries"], [819, 3, 0, "-", "decorator_utils"], [820, 3, 0, "-", "dynamic_import"], [821, 3, 0, "-", "einsum_parser"], [822, 3, 0, "-", "einsum_path_helpers"], [823, 3, 0, "-", "exceptions"], [824, 3, 0, "-", "inspection"], [825, 3, 0, "-", "logging"], [826, 3, 0, "-", "profiler"], [827, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[813, 2, 1, "", "check_all"], [813, 2, 1, "", "check_all_or_any_fn"], [813, 2, 1, "", "check_any"], [813, 2, 1, "", "check_dev_correct_formatting"], [813, 2, 1, "", "check_dimensions"], [813, 2, 1, "", "check_elem_in_list"], [813, 2, 1, "", "check_equal"], [813, 2, 1, "", "check_exists"], [813, 2, 1, "", "check_false"], [813, 2, 1, "", "check_gather_input_valid"], [813, 2, 1, "", "check_gather_nd_input_valid"], [813, 2, 1, "", "check_greater"], [813, 2, 1, "", "check_inplace_sizes_valid"], [813, 2, 1, "", "check_isinstance"], [813, 2, 1, "", "check_kernel_padding_size"], [813, 2, 1, "", "check_less"], [813, 2, 1, "", "check_one_way_broadcastable"], [813, 2, 1, "", "check_same_dtype"], [813, 2, 1, "", "check_shape"], [813, 2, 1, "", "check_shapes_broadcastable"], [813, 2, 1, "", "check_true"], [813, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[815, 3, 0, "-", "ast_helpers"], [816, 3, 0, "-", "handler"], [817, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[815, 1, 1, "", "ImportTransformer"], [815, 1, 1, "", "IvyLoader"], [815, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "impersonate_import"], [815, 0, 1, "", "visit_Import"], [815, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[815, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[816, 1, 1, "", "ContextManager"], [816, 2, 1, "", "choose_random_backend"], [816, 2, 1, "", "current_backend"], [816, 2, 1, "", "dynamic_backend_converter"], [816, 2, 1, "", "prevent_access_locally"], [816, 2, 1, "", "previous_backend"], [816, 2, 1, "", "set_backend"], [816, 2, 1, "", "set_backend_to_specific_version"], [816, 2, 1, "", "set_jax_backend"], [816, 2, 1, "", "set_mxnet_backend"], [816, 2, 1, "", "set_numpy_backend"], [816, 2, 1, "", "set_paddle_backend"], [816, 2, 1, "", "set_tensorflow_backend"], [816, 2, 1, "", "set_torch_backend"], [816, 2, 1, "", "unset_backend"], [816, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[816, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[817, 2, 1, "", "clear_sub_backends"], [817, 2, 1, "", "find_available_sub_backends"], [817, 2, 1, "", "fn_name_from_version_specific_fn_name"], [817, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [817, 2, 1, "", "set_sub_backend"], [817, 2, 1, "", "set_sub_backend_to_specific_version"], [817, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[818, 2, 1, "", "check_for_binaries"], [818, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[819, 1, 1, "", "CallVisitor"], [819, 1, 1, "", "TransposeType"], [819, 2, 1, "", "apply_transpose"], [819, 2, 1, "", "dummy_inplace_update"], [819, 2, 1, "", "get_next_func"], [819, 2, 1, "", "handle_get_item"], [819, 2, 1, "", "handle_methods"], [819, 2, 1, "", "handle_set_item"], [819, 2, 1, "", "handle_transpose_in_input_and_output"], [819, 2, 1, "", "retrieve_object"], [819, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[819, 0, 1, "", "__init__"], [819, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[819, 4, 1, "", "CONV1D"], [819, 4, 1, "", "CONV2D"], [819, 4, 1, "", "CONV3D"], [819, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[820, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[821, 2, 1, "", "convert_interleaved_input"], [821, 2, 1, "", "convert_subscripts"], [821, 2, 1, "", "find_output_shape"], [821, 2, 1, "", "find_output_str"], [821, 2, 1, "", "gen_unused_symbols"], [821, 2, 1, "", "get_symbol"], [821, 2, 1, "", "has_valid_einsum_chars_only"], [821, 2, 1, "", "is_valid_einsum_char"], [821, 2, 1, "", "legalise_einsum_expr"], [821, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[822, 2, 1, "", "can_dot"], [822, 2, 1, "", "compute_size_by_dict"], [822, 2, 1, "", "find_contraction"], [822, 2, 1, "", "flop_count"], [822, 2, 1, "", "greedy_path"], [822, 2, 1, "", "optimal_path"], [822, 2, 1, "", "parse_einsum_input"], [822, 2, 1, "", "parse_possible_contraction"], [822, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[823, 7, 1, "", "InplaceUpdateException"], [823, 7, 1, "", "IvyAttributeError"], [823, 7, 1, "", "IvyBackendException"], [823, 7, 1, "", "IvyBroadcastShapeError"], [823, 7, 1, "", "IvyDeviceError"], [823, 7, 1, "", "IvyDtypePromotionError"], [823, 7, 1, "", "IvyError"], [823, 7, 1, "", "IvyException"], [823, 7, 1, "", "IvyIndexError"], [823, 7, 1, "", "IvyInvalidBackendException"], [823, 7, 1, "", "IvyNotImplementedException"], [823, 7, 1, "", "IvyValueError"], [823, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[823, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[823, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[824, 2, 1, "", "add_array_specs"], [824, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[825, 2, 1, "", "set_logging_mode"], [825, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[826, 1, 1, "", "Profiler"], [826, 2, 1, "", "tensorflow_profile_start"], [826, 2, 1, "", "tensorflow_profile_stop"], [826, 2, 1, "", "torch_profiler_init"], [826, 2, 1, "", "torch_profiler_start"], [826, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[826, 0, 1, "", "__init__"], [826, 4, 1, "", "print_stats"], [826, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[827, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[786, 3, 0, "-", "assertions"], [787, 3, 0, "-", "available_frameworks"], [788, 3, 0, "-", "function_testing"], [789, 3, 0, "-", "globals"], [790, 3, 0, "-", "hypothesis_helpers"], [795, 3, 0, "-", "multiprocessing"], [796, 3, 0, "-", "pipeline_helper"], [797, 3, 0, "-", "structs"], [798, 3, 0, "-", "test_parameter_flags"], [799, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[786, 2, 1, "", "assert_all_close"], [786, 2, 1, "", "assert_same_type"], [786, 2, 1, "", "assert_same_type_and_shape"], [786, 2, 1, "", "check_unsupported_device"], [786, 2, 1, "", "check_unsupported_device_and_dtype"], [786, 2, 1, "", "check_unsupported_dtype"], [786, 2, 1, "", "test_unsupported_function"], [786, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[788, 2, 1, "", "args_to_container"], [788, 2, 1, "", "args_to_frontend"], [788, 2, 1, "", "arrays_to_frontend"], [788, 2, 1, "", "as_lists"], [788, 2, 1, "", "convtrue"], [788, 2, 1, "", "create_args_kwargs"], [788, 2, 1, "", "flatten"], [788, 2, 1, "", "flatten_and_to_np"], [788, 2, 1, "", "flatten_frontend"], [788, 2, 1, "", "flatten_frontend_fw_to_np"], [788, 2, 1, "", "flatten_frontend_to_np"], [788, 2, 1, "", "get_frontend_ret"], [788, 2, 1, "", "get_ret_and_flattened_np_array"], [788, 2, 1, "", "gradient_incompatible_function"], [788, 2, 1, "", "gradient_test"], [788, 2, 1, "", "gradient_unsupported_dtypes"], [788, 2, 1, "", "kwargs_to_args_n_kwargs"], [788, 2, 1, "", "test_frontend_function"], [788, 2, 1, "", "test_frontend_method"], [788, 2, 1, "", "test_function"], [788, 2, 1, "", "test_function_backend_computation"], [788, 2, 1, "", "test_function_ground_truth_computation"], [788, 2, 1, "", "test_gradient_backend_computation"], [788, 2, 1, "", "test_gradient_ground_truth_computation"], [788, 2, 1, "", "test_method"], [788, 2, 1, "", "test_method_backend_computation"], [788, 2, 1, "", "test_method_ground_truth_computation"], [788, 2, 1, "", "traced_if_required"], [788, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[789, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [789, 7, 1, "", "InterruptedTest"], [789, 1, 1, "", "TestData"], [789, 2, 1, "", "setup_api_test"], [789, 2, 1, "", "setup_frontend_test"], [789, 2, 1, "", "teardown_api_test"], [789, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[789, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[789, 0, 1, "", "__init__"], [789, 4, 1, "", "fn_name"], [789, 4, 1, "", "fn_tree"], [789, 4, 1, "", "is_method"], [789, 4, 1, "", "supported_device_dtypes"], [789, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[791, 3, 0, "-", "array_helpers"], [792, 3, 0, "-", "dtype_helpers"], [793, 3, 0, "-", "general_helpers"], [794, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[791, 2, 1, "", "array_and_broadcastable_shape"], [791, 2, 1, "", "array_bools"], [791, 2, 1, "", "array_helpers_dtype_info_helper"], [791, 2, 1, "", "array_indices_axis"], [791, 2, 1, "", "array_indices_put_along_axis"], [791, 2, 1, "", "array_values"], [791, 2, 1, "", "arrays_and_axes"], [791, 2, 1, "", "arrays_for_pooling"], [791, 2, 1, "", "broadcast_shapes"], [791, 2, 1, "", "cond_data_gen_helper"], [791, 2, 1, "", "create_concatenable_arrays_dtypes"], [791, 2, 1, "", "create_nested_input"], [791, 2, 1, "", "dtype_and_values"], [791, 2, 1, "", "dtype_array_query"], [791, 2, 1, "", "dtype_array_query_val"], [791, 2, 1, "", "dtype_values_axis"], [791, 2, 1, "", "einsum_helper"], [791, 2, 1, "", "get_first_solve_batch_matrix"], [791, 2, 1, "", "get_first_solve_matrix"], [791, 2, 1, "", "get_second_solve_batch_matrix"], [791, 2, 1, "", "get_second_solve_matrix"], [791, 2, 1, "", "list_of_size"], [791, 2, 1, "", "lists"], [791, 2, 1, "", "mutually_broadcastable_shapes"], [791, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[792, 2, 1, "", "array_dtypes"], [792, 2, 1, "", "cast_filter"], [792, 2, 1, "", "cast_filter_helper"], [792, 2, 1, "", "get_castable_dtype"], [792, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[793, 7, 1, "", "BroadcastError"], [793, 2, 1, "", "apply_safety_factor"], [793, 2, 1, "", "broadcast_shapes"], [793, 2, 1, "", "dims_and_offset"], [793, 2, 1, "", "embedding_helper"], [793, 2, 1, "", "general_helpers_dtype_info_helper"], [793, 2, 1, "", "get_axis"], [793, 2, 1, "", "get_bounds"], [793, 2, 1, "", "get_mean_std"], [793, 2, 1, "", "get_shape"], [793, 2, 1, "", "matrix_is_stable"], [793, 2, 1, "", "reshape_shapes"], [793, 2, 1, "", "sizes_"], [793, 2, 1, "", "subsets"], [793, 2, 1, "", "two_broadcastable_shapes"], [793, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[794, 2, 1, "", "floats"], [794, 2, 1, "", "ints"], [794, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[795, 2, 1, "", "backend_proc"], [795, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[796, 1, 1, "", "BackendHandler"], [796, 1, 1, "", "BackendHandlerMode"], [796, 1, 1, "", "WithBackendContext"], [796, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[796, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[796, 4, 1, "", "SetBackend"], [796, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[796, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[797, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[797, 0, 1, "", "__init__"], [797, 4, 1, "", "framework_init_module"], [797, 4, 1, "", "init_name"], [797, 4, 1, "", "ivy_init_module"], [797, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[798, 1, 1, "", "DynamicFlag"], [798, 1, 1, "", "FrontendFunctionTestFlags"], [798, 1, 1, "", "FrontendInitTestFlags"], [798, 1, 1, "", "FrontendMethodTestFlags"], [798, 1, 1, "", "FunctionTestFlags"], [798, 1, 1, "", "InitMethodTestFlags"], [798, 1, 1, "", "MethodTestFlags"], [798, 1, 1, "", "TestFlags"], [798, 2, 1, "", "build_flag"], [798, 2, 1, "", "frontend_function_flags"], [798, 2, 1, "", "frontend_init_flags"], [798, 2, 1, "", "frontend_method_flags"], [798, 2, 1, "", "function_flags"], [798, 2, 1, "", "init_method_flags"], [798, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[798, 0, 1, "", "__init__"], [798, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[798, 0, 1, "", "__init__"], [798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[798, 0, 1, "", "__init__"], [798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[798, 0, 1, "", "__init__"], [798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[798, 0, 1, "", "__init__"], [798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[798, 0, 1, "", "__init__"], [798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[798, 0, 1, "", "__init__"], [798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[798, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[799, 2, 1, "", "handle_example"], [799, 2, 1, "", "handle_frontend_method"], [799, 2, 1, "", "handle_frontend_test"], [799, 2, 1, "", "handle_method"], [799, 2, 1, "", "handle_test"], [799, 2, 1, "", "num_positional_args"], [799, 2, 1, "", "num_positional_args_helper"], [799, 2, 1, "", "num_positional_args_method"], [799, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 8, 9, 12, 13, 21, 22, 30, 38, 41, 59, 61, 828, 830, 834, 835, 839, 855, 858, 868, 874, 875], "ivi": [0, 4, 5, 6, 7, 12, 13, 21, 22, 30, 33, 41, 43, 44, 55, 56, 58, 59, 61, 828, 834, 836, 840, 842, 844, 847, 849, 855, 857, 858, 859, 860, 861, 862, 865, 866, 868, 874, 875, 876, 880], "framework": [0, 8, 9, 23, 43, 49, 55, 787, 800, 828, 855, 858, 878], "librari": [0, 39, 43, 44, 59, 61, 828, 875], "instal": [0, 4, 5, 6, 7, 21, 22, 23, 33, 55, 56, 58, 828, 868], "import": [0, 6, 7, 12, 13, 21, 22, 26, 33, 55, 56, 59, 820], "configur": [0, 849, 858], "environ": [0, 835], "load": [0, 12, 13, 21, 22, 23, 26, 784], "dataset": [0, 57, 59], "preview": 0, "inspect": [0, 824], "end": [0, 59], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 858], "transact": 0, "class": [0, 120, 800, 828, 840, 849, 857], "distribut": 0, "separ": 0, "data": [0, 4, 5, 6, 7, 12, 13, 21, 22, 23, 26, 33, 43, 55, 66, 89, 120, 382, 642, 657, 764, 765, 766, 767, 845, 857, 860, 867], "analysi": 0, "statist": [0, 82, 105, 399, 659], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 8, 9, 10, 11, 23, 26, 880], "metric": [0, 26, 59], "under": 0, "sampl": [0, 56], "balanc": [0, 863], "creat": [0, 1, 55, 56, 834], "split": [0, 723], "featur": [0, 860], "target": [0, 55], "train": [0, 23, 26, 55, 57, 59], "test": [0, 26, 57, 788, 798, 799, 802, 834, 835, 836, 839, 844, 850, 858, 860], "set": [0, 8, 9, 21, 22, 23, 51, 55, 56, 80, 103, 396, 657, 835, 841, 850, 862], "convert": [0, 8, 9, 10, 11, 23, 804, 828], "arrai": [0, 114, 117, 139, 398, 791, 839, 840, 844, 852, 874], "displai": [0, 60], "dimens": 0, "prepar": [0, 4, 5, 6, 7, 12, 13, 21, 22], "function": [0, 12, 13, 33, 42, 43, 44, 55, 56, 57, 59, 61, 121, 788, 828, 834, 843, 845, 846, 849, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 867, 875], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 67, 90, 383, 643, 846, 852, 857], "mode": [0, 51, 845, 849, 862], "xgboost": [0, 26], "classifi": [0, 21, 22], "benchmark": 0, "model": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 40, 41, 43, 44, 55, 56, 57, 58, 59, 61, 867], "time": [0, 26], "base": [0, 86, 108, 118], "predict": 0, "perform": 0, "implement": [0, 4, 5, 12, 13, 844, 855, 857], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 863], "classif": [0, 6, 7], "report": 0, "evalu": [0, 26], "ivyclassifi": 0, "xgbclassifi": [0, 26], "visual": [0, 23, 60], "comparison": [0, 26], "demo": [1, 3, 4, 5, 6, 7, 31, 43, 57, 58], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 12, 13, 21, 22, 26, 31, 51, 847, 852, 855, 858, 860, 863, 874, 875, 876], "alexnet": [4, 5], "infer": [4, 5, 6, 7, 12, 13, 21, 22, 854], "torch": [4, 5, 6, 7, 12, 13, 21, 22, 51, 58, 878, 879], "tensorflow": [4, 5, 6, 7, 8, 9, 12, 13, 23, 26, 29, 42, 51, 58, 59, 60, 878], "jax": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 26, 51, 58, 878], "appendix": [4, 5, 12, 13], "code": [4, 5, 33, 34, 35, 36, 44, 55, 828, 851, 859, 861], "bert": [6, 7], "dependeci": [6, 7], "modul": [6, 7, 809, 828, 845, 846, 875], "sequenc": [6, 7, 852], "your": [8, 9, 12, 13, 21, 22, 23, 836, 860], "pytorch": [8, 9, 10, 11, 23, 24, 25, 26, 27, 42, 57, 878], "project": [8, 9, 23], "incompat": [8, 9, 23], "transpil": [8, 9, 10, 11, 23, 27, 28, 29, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 57, 61, 828, 865, 866, 872, 875], "about": [8, 9, 10, 11, 23, 55], "up": [8, 9, 23, 27, 29, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 57, 835, 850, 859], "sourc": [8, 9, 23, 865, 866, 868], "from": [8, 9, 10, 11, 23, 42, 51, 58, 868], "result": [8, 9, 10, 11, 23, 56], "fine": [8, 9, 10, 11, 23], "tune": [8, 9, 10, 11, 23], "conclus": [8, 9, 10, 11, 23], "how": [10, 11, 38, 828, 834, 842, 850, 859, 860], "To": [10, 11, 61, 836], "paddlepaddl": [10, 11], "imag": [12, 13, 21, 22, 23, 72, 95, 265, 830, 842], "segment": [12, 13], "unet": [12, 13], "custom": [12, 13, 840, 842, 855, 859, 867], "preprocess": [12, 13], "visualis": [12, 13, 21, 22], "initi": [12, 13, 21, 22, 806], "nativ": [12, 13, 21, 22, 840, 863], "pretrain": [12, 13, 21, 22], "weight": [12, 13, 21, 22], "mask": [12, 13], "backend": [12, 13, 26, 33, 43, 55, 56, 58, 59, 814, 817, 834, 841, 845, 855, 861, 865, 867], "acceler": [19, 20, 24, 25, 26], "mmpretrain": [19, 20], "resnet": [21, 22, 23, 62], "label": [21, 22], "resnet34": [21, 22], "resnet50": [21, 22], "few": 23, "pre": [23, 835, 851], "xgb_frontend": 26, "xgb": 26, "more": [26, 835, 863], "exhaust": 26, "v": [26, 37, 48, 51, 851, 867, 874], "number": [26, 794, 852], "boost": 26, "round": [26, 27, 29, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 57, 295, 859], "fraction": 26, "build": [27, 28, 29, 59, 830, 842, 865], "top": [27, 28, 29, 837, 844], "haiku": 28, "develop": 30, "convolut": 30, "network": [30, 56, 59], "tutori": [31, 59], "And": 31, "learn": [31, 32, 828, 878], "basic": [31, 32, 55, 56, 836, 857], "write": [33, 41, 857, 860], "content": [33, 57], "handler": [33, 43, 816, 817, 865], "structur": [33, 43, 842, 855, 867], "api": [33, 43, 44, 834, 839, 843, 844, 855, 861, 865, 874, 875, 876], "state": [33, 43, 44, 867, 874], "unifi": [34, 37, 45, 48, 49, 50, 55, 876], "trace": [35, 37, 38, 44, 703, 849], "lazi": [37, 48, 874], "eager": [37, 48, 874], "decor": [38, 50, 819, 849, 854, 860], "graph": [38, 43, 60, 866, 879], "ani": [39, 40, 43, 44, 783], "odsc": 43, "tracer": [43, 866, 874, 879], "quickstart": 44, "get": [44, 828, 836, 868], "familiar": 44, "0": [45, 46, 47, 48, 52, 53], "1": [46, 48, 49, 50, 51, 54, 61, 878], "compil": [46, 48, 49, 50, 56, 874], "2": [47, 50, 52, 61, 878], "select": 49, "As": 50, "3": [51, 53, 54, 61], "dynam": [51, 59, 820, 841, 867], "static": 51, "todo": [51, 836], "explain": 51, "via": 51, "why": [51, 860, 872], "i": [51, 828, 842, 863], "true": 51, "default": [51, 556], "when": 51, "numpi": [51, 58, 857, 878], "fals": 51, "kornia": 52, "perceiv": 53, "stabl": 54, "diffus": 54, "oper": [55, 852, 862, 867], "ml": [55, 871], "chang": 55, "one": 55, "line": [55, 836], "No": [55, 835], "need": [55, 860], "worri": 55, "type": [55, 66, 89, 382, 642, 845, 853, 857, 867], "differ": 55, "them": 55, "all": [55, 782], "standalon": [55, 853], "defin": [55, 56, 57, 59], "optim": [55, 811], "input": [55, 56, 852], "loss": [55, 75, 98, 389, 650, 808], "loop": [55, 59], "check": [56, 851, 867], "simpl": 56, "neural": 56, "deepmind": [57, 58], "": [57, 59, 834, 842, 859], "perceiverio": [57, 58], "tabl": [57, 842, 845], "construct": 57, "some": 57, "helper": [57, 790, 791, 792, 793, 794, 796, 799, 805, 815, 822, 858, 860, 861], "pipelin": [57, 59, 796, 842, 844, 860, 867], "download": 57, "dataload": 57, "gpu": [58, 867], "introduct": [58, 61, 857, 858], "python3": 58, "8": 58, "setup": [58, 851], "kernel": 58, "clone": [58, 835, 844], "repo": [58, 835], "ivy_model": 58, "run": [58, 836, 839, 842, 850, 860], "let": 59, "we": [59, 860], "ar": 59, "mnist": 59, "thi": 59, "temporari": 59, "loader": 59, "util": [59, 83, 106, 400, 660, 801, 819], "plot": 59, "save": [59, 785], "huggingfac": 60, "deit": 60, "can": [60, 828], "html": 60, "file": 60, "browser": [60, 836], "interfac": 61, "telemetri": 61, "18": 62, "activ": [63, 85, 379, 638, 803], "convers": [64, 87, 854], "creation": [65, 88, 381, 641], "elementwis": [68, 91, 119, 384, 644], "experiment": [69, 92, 645, 834], "gener": [70, 93, 385, 646, 793, 855, 860, 863, 874], "gradient": [71, 94, 361, 386, 647, 855], "layer": [73, 96, 387, 648, 807], "linear": [74, 97, 388, 649, 672], "algebra": [74, 97, 388, 649], "manipul": [76, 99, 390, 651], "norm": [77, 100, 393, 654, 810], "random": [78, 101, 394, 655], "search": [79, 102, 395, 656], "sort": [81, 104, 397, 658, 771], "wrap": [84, 107, 854], "cp": 109, "tensor": [109, 110, 111, 112, 113, 116], "parafac2": 110, "tr": 111, "tt": 112, "tucker": [113, 463], "contain": [115, 836, 843], "factor": 116, "nest": [117, 392, 653], "gelu": 122, "hardswish": 123, "leaky_relu": 124, "log_softmax": 125, "mish": 126, "relu": 127, "sigmoid": 128, "softmax": 129, "softplu": 130, "softsign": 131, "cmp_i": 132, "cmp_isnot": 133, "for_loop": 134, "if_els": 135, "try_except": 136, "while_loop": 137, "arang": 138, "asarrai": 140, "copy_arrai": 141, "empti": 142, "empty_lik": 143, "ey": 144, "from_dlpack": 145, "note": [145, 156, 641], "frombuff": 146, "full": [147, 858], "full_lik": 148, "linspac": 149, "logspac": 150, "meshgrid": 151, "native_arrai": 152, "one_hot": 153, "ones": 154, "ones_lik": 155, "to_dlpack": 156, "tril": 157, "triu": 158, "triu_indic": 159, "zero": 160, "zeros_lik": 161, "as_ivy_dtyp": 162, "as_native_dtyp": 163, "astyp": 164, "broadcast_arrai": 165, "broadcast_to": 166, "can_cast": 167, "check_float": 168, "closest_valid_dtyp": 169, "default_complex_dtyp": 170, "default_dtyp": 171, "default_float_dtyp": 172, "default_int_dtyp": 173, "default_uint_dtyp": 174, "dtype": [175, 792, 852], "dtype_bit": 176, "finfo": 177, "function_supported_dtyp": 178, "function_unsupported_dtyp": 179, "iinfo": 180, "infer_default_dtyp": 181, "invalid_dtyp": 182, "is_bool_dtyp": 183, "is_complex_dtyp": 184, "is_float_dtyp": 185, "is_hashable_dtyp": 186, "is_int_dtyp": 187, "is_native_dtyp": 188, "is_uint_dtyp": 189, "promote_typ": 190, "promote_types_of_input": 191, "result_typ": 192, "set_default_complex_dtyp": 193, "set_default_dtyp": 194, "set_default_float_dtyp": 195, "set_default_int_dtyp": 196, "set_default_uint_dtyp": 197, "type_promote_arrai": 198, "unset_default_complex_dtyp": 199, "unset_default_dtyp": 200, "unset_default_float_dtyp": 201, "unset_default_int_dtyp": 202, "unset_default_uint_dtyp": 203, "valid_dtyp": 204, "as_ivy_dev": 205, "as_native_dev": 206, "clear_cached_mem_on_dev": 207, "default_devic": 208, "dev": 209, "dev_util": 210, "function_supported_devic": 211, "function_unsupported_devic": 212, "get_all_ivy_arrays_on_dev": 213, "gpu_is_avail": 214, "handle_soft_device_vari": 215, "num_cpu_cor": 216, "num_gpu": 217, "num_ivy_arrays_on_dev": 218, "percent_used_mem_on_dev": 219, "print_all_ivy_arrays_on_dev": 220, "set_default_devic": 221, "set_soft_device_mod": 222, "paramet": [222, 590, 591, 596, 597, 599, 600, 643, 646, 798, 803, 862], "set_split_factor": 223, "split_factor": 224, "split_func_cal": 225, "to_devic": 226, "total_mem_on_dev": 227, "tpu_is_avail": 228, "unset_default_devic": 229, "unset_soft_device_mod": 230, "used_mem_on_dev": 231, "ab": 232, "aco": 233, "acosh": 234, "add": [235, 847, 858], "angl": 236, "asin": 237, "asinh": 238, "atan": 239, "atan2": 240, "atanh": 241, "bitwise_and": 242, "bitwise_invert": 243, "bitwise_left_shift": 244, "bitwise_or": 245, "bitwise_right_shift": 246, "bitwise_xor": 247, "ceil": 248, "co": 249, "cosh": 250, "deg2rad": 251, "divid": 252, "equal": 253, "erf": 254, "exp": 255, "exp2": 256, "expm1": 257, "floor": 258, "floor_divid": 259, "fmin": 260, "fmod": 261, "gcd": 262, "greater": 263, "greater_equ": 264, "isfinit": 266, "isinf": 267, "isnan": 268, "isreal": 269, "lcm": 270, "less": 271, "less_equ": 272, "log": [273, 825, 835], "log10": 274, "log1p": 275, "log2": 276, "logaddexp": 277, "logaddexp2": 278, "logical_and": 279, "logical_not": 280, "logical_or": 281, "logical_xor": 282, "maximum": 283, "minimum": 284, "multipli": 285, "nan_to_num": 286, "neg": 287, "not_equ": 288, "posit": [289, 852], "pow": 290, "rad2deg": 291, "real": 292, "reciproc": 293, "remaind": 294, "sign": 296, "sin": 297, "sinh": 298, "sqrt": 299, "squar": 300, "subtract": 301, "tan": [302, 847, 858], "tanh": 303, "trapz": 304, "trunc": 305, "trunc_divid": 306, "celu": 307, "elu": 308, "hardshrink": 309, "hardsilu": 310, "hardtanh": 311, "logit": 312, "logsigmoid": 313, "prelu": 314, "relu6": 315, "scaled_tanh": 316, "selu": 317, "silu": 318, "softshrink": 319, "stanh": 320, "tanhshrink": 321, "threshold": 322, "thresholded_relu": 323, "blackman_window": 324, "eye_lik": 325, "hamming_window": 326, "hann_window": 327, "indic": 328, "kaiser_bessel_derived_window": 329, "kaiser_window": 330, "mel_weight_matrix": 331, "ndenumer": 332, "ndindex": 333, "polyv": 334, "random_cp": 335, "random_parafac2": 336, "random_tr": 337, "random_tt": 338, "random_tuck": 339, "tril_indic": 340, "trilu": 341, "unsorted_segment_mean": 342, "unsorted_segment_min": 343, "unsorted_segment_sum": 344, "vorbis_window": 345, "allclos": 346, "amax": 347, "amin": 348, "binar": 349, "conj": 350, "copysign": 351, "count_nonzero": 352, "diff": 353, "digamma": 354, "erfc": 355, "erfinv": 356, "fix": [357, 834, 850], "float_pow": 358, "fmax": 359, "frexp": 360, "hypot": 362, "isclos": 363, "ldexp": 364, "lerp": 365, "lgamma": 366, "modf": 367, "nansum": 368, "nextaft": 369, "signbit": 370, "sinc": 371, "sparsify_tensor": 372, "xlogi": 373, "zeta": 374, "reduc": 375, "bind_custom_gradient_funct": 376, "jvp": 377, "vjp": 378, "constant": [380, 639], "meta": [391, 652], "spars": 398, "adaptive_avg_pool1d": 401, "adaptive_avg_pool2d": 402, "adaptive_max_pool2d": 403, "adaptive_max_pool3d": 404, "area_interpol": 405, "avg_pool1d": 406, "avg_pool2d": 407, "avg_pool3d": 408, "dct": 409, "dft": 410, "dropout1d": 411, "dropout2d": 412, "dropout3d": 413, "embed": 414, "fft": 415, "fft2": 416, "generate_einsum_equ": 417, "get_interpolate_kernel": 418, "idct": 419, "ifft": 420, "ifftn": 421, "interp": 422, "interpol": 423, "max_pool1d": 424, "max_pool2d": 425, "max_pool3d": 426, "max_unpool1d": 427, "nearest_interpol": 428, "pool": 429, "reduce_window": 430, "rfft": 431, "rfftn": 432, "rnn": 433, "sliding_window": 434, "stft": 435, "adjoint": 436, "batched_out": 437, "cond": 438, "diagflat": 439, "dot": 440, "eig": [441, 684], "eigh_tridiagon": 442, "eigval": 443, "general_inner_product": 444, "higher_order_mo": 445, "initialize_tuck": 446, "khatri_rao": 447, "kron": 448, "kroneck": 449, "lu_factor": 450, "lu_solv": 451, "make_svd_non_neg": 452, "matrix_exp": 453, "mode_dot": 454, "multi_dot": 455, "multi_mode_dot": 456, "partial_tuck": 457, "solve_triangular": 458, "svd_flip": 459, "tensor_train": 460, "truncated_svd": 461, "tt_matrix_to_tensor": 462, "hinge_embedding_loss": 464, "huber_loss": 465, "kl_div": 466, "l1_loss": 467, "log_poisson_loss": 468, "poisson_nll_loss": 469, "smooth_l1_loss": 470, "soft_margin_loss": 471, "as_strid": 472, "associative_scan": 473, "atleast_1d": 474, "atleast_2d": 475, "atleast_3d": 476, "broadcast_shap": 477, "check_scalar": 478, "choos": 479, "column_stack": 480, "concat_from_sequ": 481, "dsplit": 482, "dstack": 483, "expand": 484, "fill_diagon": 485, "flatten": 486, "fliplr": 487, "flipud": 488, "fold": 489, "heavisid": 490, "hsplit": 491, "hstack": 492, "i0": 493, "matric": 494, "moveaxi": 495, "pad": 496, "partial_fold": 497, "partial_tensor_to_vec": 498, "partial_unfold": 499, "partial_vec_to_tensor": 500, "put_along_axi": 501, "rot90": 502, "soft_threshold": 503, "take": 504, "take_along_axi": 505, "top_k": 506, "trim_zero": 507, "unflatten": 508, "unfold": 509, "unique_consecut": 510, "vsplit": 511, "vstack": 512, "batch_norm": 513, "group_norm": 514, "instance_norm": 515, "l1_normal": 516, "l2_normal": 517, "local_response_norm": 518, "lp_normal": 519, "bernoulli": 520, "beta": 521, "dirichlet": 522, "gamma": 523, "poisson": 524, "unravel_index": 525, "invert_permut": 526, "lexsort": 527, "is_ivy_sparse_arrai": 528, "is_native_sparse_arrai": 529, "native_sparse_arrai": 530, "native_sparse_array_to_indices_values_and_shap": 531, "bincount": 532, "corrcoef": 533, "cov": 534, "cummax": 535, "cummin": 536, "histogram": 537, "igamma": 538, "median": 539, "nanmean": 540, "nanmedian": 541, "nanmin": 542, "nanprod": 543, "quantil": 544, "optional_get_el": 545, "all_equ": 546, "arg_info": 547, "arg_nam": 548, "array_equ": 549, "assert_supports_inplac": 550, "cache_fn": 551, "clip_matrix_norm": 552, "clip_vector_norm": 553, "container_typ": 554, "current_backend_str": 555, "einops_rearrang": 557, "einops_reduc": 558, "einops_repeat": 559, "exist": [560, 830, 859], "fourier_encod": 561, "function_supported_devices_and_dtyp": 562, "function_unsupported_devices_and_dtyp": 563, "gather": 564, "gather_nd": 565, "get_all_arrays_in_memori": 566, "get_item": 567, "get_num_dim": 568, "get_referrers_recurs": 569, "has_nan": 570, "inplace_arrays_support": 571, "inplace_decr": 572, "inplace_incr": 573, "inplace_upd": 574, "inplace_variables_support": 575, "is_arrai": 576, "is_ivy_arrai": 577, "is_ivy_contain": 578, "is_ivy_nested_arrai": 579, "is_native_arrai": 580, "isin": 581, "isscalar": 582, "items": 583, "match_kwarg": 584, "multiprocess": [585, 795], "num_arrays_in_memori": 586, "print_all_arrays_in_memori": 587, "scatter_flat": 588, "scatter_nd": 589, "set_array_mod": 590, "set_exception_trace_mod": 591, "set_inplace_mod": 592, "set_item": 593, "set_min_bas": 594, "set_min_denomin": 595, "set_nestable_mod": 596, "set_precise_mod": 597, "set_queue_timeout": 598, "set_shape_array_mod": 599, "set_show_func_wrapper_trace_mod": 600, "set_tmp_dir": 601, "shape": [602, 657, 764, 765, 766, 767, 854, 867], "size": [603, 867], "stable_divid": 604, "stable_pow": 605, "stride": 606, "supports_inplace_upd": 607, "to_ivy_shap": 608, "to_list": 609, "to_native_shap": 610, "to_numpi": 611, "to_scalar": 612, "try_else_non": 613, "unset_array_mod": 614, "unset_exception_trace_mod": 615, "unset_inplace_mod": 616, "unset_min_bas": 617, "unset_min_denomin": 618, "unset_nestable_mod": 619, "unset_precise_mod": 620, "unset_queue_timeout": 621, "unset_shape_array_mod": 622, "unset_show_func_wrapper_trace_mod": 623, "unset_tmp_dir": 624, "value_is_nan": 625, "vmap": 626, "adam_step": 627, "adam_upd": 628, "execute_with_gradi": [629, 855], "grad": 630, "gradient_descent_upd": 631, "jac": 632, "lamb_upd": 633, "lars_upd": 634, "optimizer_upd": 635, "stop_gradi": 636, "value_and_grad": 637, "control": [640, 867], "flow": [640, 867], "op": 640, "depend": [657, 764, 765, 766, 767], "output": [657, 764, 765, 766, 767], "conv": 661, "conv1d": 662, "conv1d_transpos": 663, "conv2d": 664, "conv2d_transpos": 665, "conv3d": 666, "conv3d_transpos": 667, "conv_general_dil": 668, "conv_general_transpos": 669, "depthwise_conv2d": 670, "dropout": 671, "lstm": 673, "lstm_updat": 674, "multi_head_attent": 675, "nm": 676, "roi_align": 677, "scaled_dot_product_attent": 678, "choleski": 679, "cross": 680, "det": 681, "diag": 682, "diagon": 683, "eigh": 685, "eigvalsh": 686, "inner": 687, "inv": 688, "matmul": 689, "matrix_norm": 690, "matrix_pow": 691, "matrix_rank": 692, "matrix_transpos": 693, "outer": 694, "pinv": 695, "qr": 696, "slogdet": 697, "solv": 698, "svd": 699, "svdval": 700, "tensordot": 701, "tensorsolv": 702, "vander": 704, "vecdot": 705, "vector_norm": 706, "vector_to_skew_symmetric_matrix": 707, "binary_cross_entropi": 708, "cross_entropi": 709, "sparse_cross_entropi": 710, "ssim_loss": 711, "wasserstein_loss_discrimin": 712, "wasserstein_loss_gener": 713, "clip": 714, "concat": 715, "constant_pad": 716, "expand_dim": 717, "flip": 718, "permute_dim": 719, "repeat": 720, "reshap": 721, "roll": [722, 847], "squeez": 724, "stack": [725, 849], "swapax": 726, "tile": 727, "unstack": 728, "zero_pad": 729, "fomaml_step": 730, "maml_step": 731, "reptile_step": 732, "all_nested_indic": 733, "copy_nest": 734, "duplicate_array_index_chain": 735, "index_nest": 736, "insert_into_nest_at_index": 737, "insert_into_nest_at_indic": 738, "map": [739, 844], "map_nest_at_index": 740, "map_nest_at_indic": 741, "multi_index_nest": 742, "nested_ani": 743, "nested_argwher": 744, "nested_map": 745, "nested_multi_map": 746, "prune_empti": 747, "prune_nest_at_index": 748, "prune_nest_at_indic": 749, "set_nest_at_index": 750, "set_nest_at_indic": 751, "layer_norm": 752, "multinomi": 753, "randint": 754, "random_norm": 755, "random_uniform": 756, "seed": 757, "shuffl": 758, "argmax": 759, "argmin": 760, "argwher": 761, "nonzero": 762, "where": [763, 834, 850], "unique_al": 764, "unique_count": 765, "unique_invers": 766, "unique_valu": 767, "argsort": 768, "msort": 769, "searchsort": 770, "cumprod": 772, "cumsum": 773, "einsum": [774, 821, 822], "max": 775, "mean": 776, "min": 777, "prod": 778, "std": 779, "sum": 780, "var": 781, "assert": [786, 813, 849], "avail": 787, "global": [789, 862], "hypothesi": [790, 835, 858, 860], "struct": 797, "flag": 798, "sequenti": 812, "ast": 815, "sub": 817, "binari": [818, 835], "parser": 821, "path": 822, "except": [823, 849, 854], "profil": 826, "verbos": 827, "machin": 828, "between": 828, "support": [828, 841, 845, 854, 857, 867], "start": [828, 868], "work": [828, 859, 877], "eagerli": 828, "provid": 828, "lazili": 828, "trace_graph": [828, 874], "document": 828, "contribut": [828, 829, 834, 859], "commun": 828, "citat": 828, "doc": [830, 842], "docker": [830, 835, 836, 842, 868], "conveni": [830, 842, 853], "script": [830, 842], "hub": 830, "local": [830, 836, 851], "without": [830, 858], "contributor": [831, 837], "reward": 831, "badg": 831, "tier": 831, "error": [832, 849, 850], "handl": [832, 840, 846, 849, 854, 867], "help": [833, 836, 850], "resourc": 833, "open": 834, "task": 834, "fail": [834, 850, 860], "frontend": [834, 841, 857, 858, 865], "place": 834, "checklist": 834, "format": [834, 851], "extend": [834, 860, 863], "an": [834, 855], "issu": [834, 836, 851, 868], "github": [834, 835], "templat": 834, "fork": [835, 836], "commit": [835, 836, 844, 851], "pycharm": [835, 836, 851], "virtual": 835, "miniconda": 835, "venv": 835, "interpret": 835, "window": 835, "maco": 835, "ubuntu": 835, "detail": 835, "free": 835, "wsl": 835, "codespac": 835, "The": [835, 836, 842, 855, 857, 867], "list": 836, "manag": 836, "who": 836, "ask": [836, 850], "With": 836, "command": 836, "pull": [836, 844], "request": [836, 844], "small": 836, "often": 836, "interact": 836, "most": 836, "out": [836, 852, 854, 856], "id": [836, 839], "program": 837, "core": 837, "rise": 837, "deep": 838, "dive": 838, "termin": 839, "regener": 839, "failur": 839, "skip": 839, "integr": [840, 844, 851, 859, 860], "version": [841, 861, 867], "builder": 842, "being": 842, "option": 842, "index": 842, "rst": 842, "partial_conf": 842, "py": 842, "prebuild": 842, "sh": 842, "extens": 842, "custom_autosummari": 842, "hide": 842, "discussion_link": 842, "skippable_funct": 842, "ivy_data": 842, "instanc": [843, 857, 858], "method": [843, 857, 858], "special": [843, 845, 857], "nestabl": [843, 852, 853, 854], "continu": [844, 851], "push": 844, "pr": 844, "trigger": 844, "A": [844, 863], "down": 844, "view": [844, 854, 856], "store": 844, "retriev": 844, "repositori": 844, "nitti": 844, "gritti": 844, "storag": 844, "space": 844, "unifyai": 844, "determin": 844, "coverag": 844, "workflow": 844, "multipl": 844, "runner": 844, "race": 844, "condit": 844, "period": 844, "manual": 844, "dispatch": 844, "ci": 844, "dashboard": 844, "promot": [845, 857], "precis": 845, "non": [845, 863], "argument": [845, 846, 852, 854, 856, 857], "other": [845, 846], "unsupport": 845, "attribut": [845, 862], "case": 845, "bug": 845, "cast": [845, 857], "superset": [845, 863], "docstr": [847, 848], "func_wrapp": 849, "prune": 849, "handle_except": 849, "consist": [849, 860], "prerequir": 850, "common": [850, 851], "lint": [851, 859], "keyword": 852, "integ": 852, "primari": 853, "composit": 853, "mix": [853, 854, 860], "partial": [853, 854, 860], "order": 854, "wrapper": 854, "miscellan": 854, "overview": [855, 859], "usag": [855, 859, 863, 876], "signatur": 855, "design": [855, 861, 864], "our": 855, "polici": [855, 857], "specif": 855, "consider": 855, "inplac": 856, "updat": 856, "copi": 856, "short": 857, "unus": 857, "rule": 857, "duplic": [857, 863], "alia": 858, "formatt": 859, "functionorderingformatt": 859, "own": 860, "strategi": 860, "ad": 860, "explicit": 860, "do": 860, "effect": 860, "bonu": 860, "self": 860, "test_array_funct": 860, "re": 860, "navig": 861, "categor": 861, "submodul": 861, "unpin": 861, "properti": 862, "getter": 862, "setter": 862, "set_": 862, "unset_": 862, "behaviour": 863, "what": 863, "effici": 863, "maxim": 863, "block": 865, "faq": 867, "maintain": 867, "deploy": 867, "auto": 867, "differenti": 867, "replica": 867, "parallel": 867, "altern": 867, "pip": 868, "folder": 868, "question": 868, "glossari": 869, "motiv": 870, "explos": 871, "One": 873, "liner": 873, "cach": 874, "sharp": [874, 875, 876], "bit": [874, 875, 876], "relat": 877, "matlab": 878, "scipi": 878, "scikit": 878, "theano": 878, "panda": 878, "julia": 878, "apach": 878, "spark": 878, "mllib": 878, "caff": 878, "chainer": 878, "mxnet": 878, "cntk": 878, "flux": 878, "dex": 878, "languag": 878, "tf": 879, "jaxpr": 879, "jit": 879, "fx": 879, "onnx": 880}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"full_like": [[148, "full-like"]], "asarray": [[140, "asarray"]], "triu_indices": [[159, "triu-indices"]], "invalid_dtype": [[182, "invalid-dtype"]], "ones_like": [[155, "ones-like"]], "broadcast_to": [[166, "broadcast-to"]], "default_int_dtype": [[173, "default-int-dtype"]], "check_float": [[168, "check-float"]], "default_uint_dtype": [[174, "default-uint-dtype"]], "eye": [[144, "eye"]], "as_native_dtype": [[163, "as-native-dtype"]], "closest_valid_dtype": [[169, "closest-valid-dtype"]], "default_float_dtype": [[172, "default-float-dtype"]], "broadcast_arrays": [[165, "broadcast-arrays"]], "function_unsupported_dtypes": [[179, "function-unsupported-dtypes"]], "infer_default_dtype": [[181, "infer-default-dtype"]], "ones": [[154, "ones"]], "zeros_like": [[161, "zeros-like"]], "triu": [[158, "triu"]], "dtype": [[175, "dtype"]], "array": [[139, "array"]], "frombuffer": [[146, "frombuffer"]], "meshgrid": [[151, "meshgrid"]], "astype": [[164, "astype"]], "as_ivy_dtype": [[162, "as-ivy-dtype"]], "iinfo": [[180, "iinfo"]], "dtype_bits": [[176, "dtype-bits"]], "empty_like": [[143, "empty-like"]], "linspace": [[149, "linspace"]], "logspace": [[150, "logspace"]], "from_dlpack": [[145, "from-dlpack"]], "Note": [[145, null], [156, null], [641, null], [641, null]], "tril": [[157, "tril"]], "native_array": [[152, "native-array"]], "arange": [[138, "arange"]], "default_complex_dtype": [[170, "default-complex-dtype"]], "default_dtype": [[171, "default-dtype"]], "zeros": [[160, "zeros"]], "empty": [[142, "empty"]], "is_bool_dtype": [[183, "is-bool-dtype"]], "to_dlpack": [[156, "to-dlpack"]], "copy_array": [[141, "copy-array"]], "finfo": [[177, "finfo"]], "one_hot": [[153, "one-hot"]], "function_supported_dtypes": [[178, "function-supported-dtypes"]], "can_cast": [[167, "can-cast"]], "full": [[147, "full"]], "Graph Tracers": [[879, "graph-tracers"]], "tf.Graph": [[879, "tf-graph"]], "Jaxpr": [[879, "jaxpr"]], "torch.jit": [[879, "torch-jit"]], "torch.fx": [[879, "torch-fx"]], "Comparing Ivy with ONNX": [[880, "comparing-ivy-with-onnx"]], "ONNX onnx": [[880, "onnx-onnx"]], "ivy": [[880, "ivy"]], "ivy.transpile()": [[875, "ivy-transpile"]], "Transpiler API": [[875, "transpiler-api"]], "Using the transpiler": [[875, "using-the-transpiler"]], "Transpiling functions": [[875, "transpiling-functions"]], "Transpiling Libraries": [[875, "transpiling-libraries"]], "Transpiling Modules": [[875, "transpiling-modules"]], "Sharp bits": [[875, "sharp-bits"], [874, "sharp-bits"], [876, "sharp-bits"]], "Examples": [[875, "examples"], [874, "examples"], [876, "examples"], [852, "examples"]], "Related Work": [[877, "related-work"]], "Frameworks": [[878, "frameworks"]], "MATLAB matlab": [[878, "matlab-matlab"]], "SciPy scipy": [[878, "scipy-scipy"]], "Torch torch": [[878, "torch-torch"]], "NumPy numpy": [[878, "numpy-numpy"]], "SciKit Learn scikit-learn": [[878, "scikit-learn-scikit-learn"]], "Theano theano": [[878, "theano-theano"]], "Pandas pandas": [[878, "pandas-pandas"]], "Julia julia": [[878, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[878, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[878, "caffe-caffe"]], "Chainer chainer": [[878, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[878, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[878, "mxnet-mxnet"]], "CNTK cntk": [[878, "cntk-cntk"]], "PyTorch pytorch": [[878, "pytorch-pytorch"]], "Flux flux": [[878, "flux-flux"]], "JAX jax": [[878, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[878, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[878, "dex-language-dex-language"]], "ivy.trace_graph()": [[874, "ivy-trace-graph"]], "Tracer API": [[874, "tracer-api"]], "Using the tracer": [[874, "using-the-tracer"]], "Eager vs lazy Compilation": [[874, "eager-vs-lazy-compilation"]], "Array caching": [[874, "array-caching"]], "Generators": [[874, "generators"]], "Stateful": [[874, "stateful"]], "ivy.unify()": [[876, "ivy-unify"]], "Unify API": [[876, "unify-api"]], "Usage": [[876, "usage"]], "Fix Failing Tests:": [[850, "fix-failing-tests"]], "Prerequirement:": [[850, "prerequirement"]], "Setting Up": [[850, "setting-up"], [835, "setting-up"]], "How to run tests": [[850, "how-to-run-tests"]], "Common Errors": [[850, "common-errors"]], "Where to ask for Help": [[850, "where-to-ask-for-help"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[859, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[859, "overview"], [855, "overview"]], "Existing Formatters": [[859, "existing-formatters"]], "FunctionOrderingFormatter": [[859, "functionorderingformatter"]], "How the Formatter Works:": [[859, "how-the-formatter-works"]], "Integration and Usage": [[859, "integration-and-usage"]], "Contribution": [[859, "contribution"]], "Round Up": [[859, "round-up"], [47, "Round-Up"], [48, "Round-Up"], [50, "Round-Up"], [46, "Round-Up"], [49, "Round-Up"], [57, "Round-Up"], [44, "Round-Up"], [45, "Round-Up"], [34, "Round-Up"], [37, "Round-Up"], [36, "Round-Up"], [35, "Round-Up"], [39, "Round-Up"], [33, "Round-Up"], [29, "Round-Up"], [27, "Round-Up"]], "Function Arguments": [[852, "function-arguments"]], "Positional and Keyword Arguments": [[852, "positional-and-keyword-arguments"]], "Input Arrays": [[852, "input-arrays"]], "out Argument": [[852, "out-argument"]], "dtype and device arguments": [[852, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[852, "numbers-in-operator-functions"]], "Integer Sequences": [[852, "integer-sequences"]], "Nestable Functions": [[852, "nestable-functions"], [843, "nestable-functions"], [853, "nestable-functions"]], "Error Handling": [[832, "error-handling"]], "Superset Behaviour": [[863, "superset-behaviour"]], "Extending the Standard": [[863, "extending-the-standard"]], "What is the Superset?": [[863, "what-is-the-superset"]], "A Non-Duplicate Superset": [[863, "a-non-duplicate-superset"]], "What is not the Superset?": [[863, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[863, "balancing-generalization-with-efficiency"]], "More Examples": [[863, "more-examples"]], "Maximizing Usage of Native Functionality": [[863, "maximizing-usage-of-native-functionality"]], "Backend Setting": [[841, "backend-setting"]], "Dynamic Backend Setting": [[841, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[841, "backend-and-frontend-version-support"]], "Glossary": [[869, "glossary"]], "ML Explosion": [[871, "ml-explosion"]], "Containers": [[843, "containers"]], "Container Instance Methods": [[843, "container-instance-methods"]], "API Instance Methods": [[843, "api-instance-methods"]], "API Special Methods": [[843, "api-special-methods"]], "Operating Modes": [[862, "operating-modes"]], "Global Parameter Properties": [[862, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[862, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[862, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Docstring Examples": [[847, "docstring-examples"]], "ivy.tan": [[847, "ivy-tan"]], "ivy.roll": [[847, "ivy-roll"]], "ivy.add": [[847, "ivy-add"]], "Exception Handling": [[849, "exception-handling"], [854, "exception-handling"]], "Ivy Exception Class": [[849, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[849, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[849, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[849, "handle-exceptions-decorator"]], "Consistency in Errors": [[849, "consistency-in-errors"]], "Assertion Function": [[849, "assertion-function"]], "Building the Docs Pipeline": [[842, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[842, "how-the-doc-builder-is-being-run"]], "The convenience script": [[842, "the-convenience-script"]], "Options": [[842, "options"]], "The Docker image": [[842, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[842, "how-ivy-s-docs-is-structured"]], "index.rst": [[842, "index-rst"]], "partial_conf.py": [[842, "partial-conf-py"]], "prebuild.sh": [[842, "prebuild-sh"]], "Custom Extensions": [[842, "custom-extensions"]], "custom_autosummary": [[842, "custom-autosummary"]], ":hide-table:": [[842, "hide-table"]], "discussion_linker": [[842, "discussion-linker"]], "skippable_function": [[842, "skippable-function"]], "ivy_data": [[842, "ivy-data"]], "Formatting": [[851, "formatting"]], "Lint Checks": [[851, "lint-checks"], [851, "id2"]], "Setup Formatting Locally": [[851, "setup-formatting-locally"]], "Pre-commit": [[851, "pre-commit"]], "VS Code": [[851, "vs-code"]], "PyCharm": [[851, "pycharm"], [835, "pycharm"]], "Common Issues with Pre-Commit": [[851, "common-issues-with-pre-commit"]], "Continuous Integration": [[851, "continuous-integration"], [844, "continuous-integration"]], "Lint Formatting": [[851, "lint-formatting"]], "Array API Tests": [[839, "array-api-tests"], [844, "array-api-tests"]], "Running the Tests": [[839, "running-the-tests"]], "Using Terminal": [[839, "using-terminal"]], "Using the IDE": [[839, "using-the-ide"]], "Regenerating Test Failures": [[839, "regenerating-test-failures"]], "Test Skipping": [[839, "test-skipping"]], "Commit (Push/PR) Triggered Testing": [[844, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[844, "ivy-tests"], [860, "ivy-tests"]], "Implementation": [[844, "implementation"]], "A Top-Down View": [[844, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[844, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[844, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[844, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[844, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[844, "determine-test-coverage-workflow"]], "Multiple Runners": [[844, "multiple-runners"]], "Race Condition": [[844, "race-condition"]], "Periodic Testing": [[844, "periodic-testing"]], "Manually Dispatched Workflows": [[844, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[844, "ci-pipeline"]], "Push": [[844, "push"]], "Pull Request": [[844, "pull-request"]], "Dashboard": [[844, "dashboard"]], "Helpful Resources": [[833, "helpful-resources"]], "Data Types": [[845, "data-types"]], "Data Type Module": [[845, "data-type-module"]], "Data Type Promotion": [[845, "data-type-promotion"]], "Precise Mode": [[845, "precise-mode"]], "Precise Promotion Table": [[845, "precise-promotion-table"]], "Non-Precise Promotion Table": [[845, "non-precise-promotion-table"]], "Arguments in other Functions": [[845, "arguments-in-other-functions"], [846, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[845, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[845, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[845, "special-case"]], "Backend Data Type Bugs": [[845, "backend-data-type-bugs"]], "Data Type Casting Modes": [[845, "data-type-casting-modes"]], "Superset Data Type Support": [[845, "superset-data-type-support"]], "Navigating the Code": [[861, "navigating-the-code"]], "Categorization": [[861, "categorization"]], "Submodule Design": [[861, "submodule-design"]], "Ivy API": [[861, "ivy-api"]], "Backend API": [[861, "backend-api"]], "Submodule Helper Functions": [[861, "submodule-helper-functions"]], "Version Unpinning": [[861, "version-unpinning"]], "Docstrings": [[848, "docstrings"]], "Contributing": [[829, "contributing"], [828, "contributing"]], "Design": [[864, "design"]], "Contributor Program": [[837, "contributor-program"]], "Contributor": [[837, "contributor"]], "Core Contributor": [[837, "core-contributor"]], "Rising Contributor": [[837, "rising-contributor"]], "Top Contributor": [[837, "top-contributor"]], "Convert Machine Learning Code Between Frameworks": [[828, "convert-machine-learning-code-between-frameworks"]], "Installing ivy": [[828, "installing-ivy"]], "Supported Frameworks": [[828, "supported-frameworks"]], "Getting started": [[828, "getting-started"]], "Using ivy": [[828, "using-ivy"]], "How ivy works?": [[828, "how-ivy-works"]], "ivy.transpile will eagerly transpile if a class or function is provided": [[828, "ivy-transpile-will-eagerly-transpile-if-a-class-or-function-is-provided"]], "ivy.transpile will lazily transpile if a module (library) is provided": [[828, "ivy-transpile-will-lazily-transpile-if-a-module-library-is-provided"]], "ivy.trace_graph can be used eagerly or lazily": [[828, "ivy-trace-graph-can-be-used-eagerly-or-lazily"]], "Documentation": [[828, "documentation"]], "Community": [[828, "community"]], "Citation": [[828, "citation"]], "Ivy as a Transpiler": [[866, "ivy-as-a-transpiler"], [44, "Ivy-as-a-Transpiler"], [43, "Ivy-as-a-Transpiler"]], "Source-to-Source Transpiler \u2705": [[866, "source-to-source-transpiler"], [865, "source-to-source-transpiler"]], "Graph Tracer \u2705": [[866, "graph-tracer"]], "Deep Dive": [[838, "deep-dive"]], "Open Tasks": [[834, "open-tasks"]], "Fixing Failing Tests": [[834, "fixing-failing-tests"]], "How to Contribute": [[834, "how-to-contribute"]], "Frontend APIs": [[834, "frontend-apis"]], "Where to place a frontend function": [[834, "where-to-place-a-frontend-function"]], "Frontend checklist": [[834, "frontend-checklist"]], "Function Formatting": [[834, "function-formatting"]], "Formatting checklist": [[834, "formatting-checklist"]], "Ivy Experimental API": [[834, "ivy-experimental-api"]], "Extending the Ivy API": [[834, "extending-the-ivy-api"]], "Where to place a backend function": [[834, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[834, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Testing Pipeline": [[860, "testing-pipeline"]], "Hypothesis": [[860, "id2"]], "Data Generation": [[860, "id3"]], "Writing your own strategy": [[860, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[860, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[860, "ivy-test-decorators"]], "Writing Ivy Tests": [[860, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[860, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[860, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[860, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[860, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[860, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[860, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[860, "self-consistent-and-explicit-testing"]], "test_array_function": [[860, "id5"]], "Running Ivy Tests": [[860, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[860, "re-running-failed-ivy-tests"]], "Inplace Updates": [[856, "inplace-updates"]], "out argument": [[856, "out-argument"]], "copy argument": [[856, "copy-argument"]], "Views": [[856, "views"]], "The Basics": [[836, "the-basics"]], "Getting Help": [[836, "getting-help"]], "ToDo List Issues": [[836, "todo-list-issues"]], "Managing Your Fork": [[836, "managing-your-fork"]], "Who To Ask": [[836, "who-to-ask"]], "With Command Line:": [[836, "with-command-line"]], "With Browser:": [[836, "with-browser"]], "Pull Requests": [[836, "pull-requests"]], "Small Commits Often": [[836, "small-commits-often"]], "Interactive Ivy Docker Container": [[836, "interactive-ivy-docker-container"]], "Running Tests Locally": [[836, "running-tests-locally"]], "With Docker": [[836, "with-docker"]], "Getting the most out of IDE": [[836, "getting-the-most-out-of-ide"]], "with PyCharm": [[836, "with-pycharm"]], "Why Transpile?": [[872, "why-transpile"]], "Arrays": [[840, "arrays"]], "Native Array": [[840, "native-array"]], "Ivy Array": [[840, "ivy-array"]], "Array Handling": [[840, "array-handling"]], "Integrating custom classes with Ivy": [[840, "integrating-custom-classes-with-ivy"]], "Contributor Rewards": [[831, "contributor-rewards"]], "Badges": [[831, "badges"]], "Badge Tiers": [[831, "badge-tiers"]], "Building the Docs": [[830, "building-the-docs"]], "Building the Docs using Docker": [[830, "building-the-docs-using-docker"]], "Using convenience script": [[830, "using-convenience-script"]], "Using existing image on Docker Hub": [[830, "using-existing-image-on-docker-hub"]], "Building the image locally": [[830, "building-the-image-locally"]], "Building the Docs without Docker": [[830, "building-the-docs-without-docker"]], "Forking and cloning the repo": [[835, "forking-and-cloning-the-repo"]], "Pre-Commit": [[835, "pre-commit"]], "Virtual environments - No Docker": [[835, "virtual-environments-no-docker"]], "Using miniconda": [[835, "using-miniconda"]], "Using venv": [[835, "using-venv"]], "Docker Interpreter with PyCharm": [[835, "docker-interpreter-with-pycharm"]], "Windows": [[835, "windows"], [835, "id6"]], "MacOS": [[835, "macos"]], "Ubuntu": [[835, "ubuntu"], [835, "id8"]], "Setting Up Testing in PyCharm": [[835, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[835, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[835, "setting-up-for-free"]], "WSL": [[835, "wsl"]], "GitHub Codespaces": [[835, "github-codespaces"]], "The Binaries": [[835, "the-binaries"]], "Ivy Frontends": [[857, "ivy-frontends"]], "Introduction": [[857, "introduction"], [858, "introduction"], [58, "Introduction"]], "The Frontend Basics": [[857, "the-frontend-basics"]], "Writing Frontend Functions": [[857, "writing-frontend-functions"]], "Short Frontend Implementations": [[857, "short-frontend-implementations"]], "Unused Arguments": [[857, "unused-arguments"]], "Supported Data Types and Devices": [[857, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[857, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[857, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[857, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[857, "frontends-duplicate-policy"]], "Motivation": [[870, "motivation"]], "Function Types": [[853, "function-types"]], "Primary Functions": [[853, "primary-functions"]], "Compositional Functions": [[853, "compositional-functions"]], "Mixed Functions": [[853, "mixed-functions"]], "Partial Mixed Functions": [[853, "partial-mixed-functions"]], "Standalone Functions": [[853, "standalone-functions"]], "Convenience Functions": [[853, "convenience-functions"]], "Function Wrapping": [[854, "function-wrapping"]], "Decorator order": [[854, "decorator-order"]], "Conversion Wrappers": [[854, "conversion-wrappers"]], "Inference Wrappers": [[854, "inference-wrappers"]], "Out Argument Support": [[854, "out-argument-support"]], "Nestable Support": [[854, "nestable-support"]], "Partial Mixed Function Support": [[854, "partial-mixed-function-support"]], "Shape Conversion": [[854, "shape-conversion"]], "View Handling": [[854, "view-handling"]], "Miscellaneous Wrappers": [[854, "miscellaneous-wrappers"]], "Devices": [[846, "devices"]], "Device Module": [[846, "device-module"]], "Device handling": [[846, "device-handling"]], "Get Started": [[868, "get-started"]], "Installing using pip": [[868, "installing-using-pip"]], "Installing from source": [[868, "installing-from-source"]], "Docker": [[868, "docker"]], "Ivy Folder": [[868, "ivy-folder"]], "Issues and Questions": [[868, "issues-and-questions"]], "Building Blocks": [[865, "building-blocks"]], "Backend Functional APIs \u2705": [[865, "backend-functional-apis"]], "Ivy Functional API \u2705": [[865, "ivy-functional-api"]], "Frontend Functional APIs \u2705": [[865, "frontend-functional-apis"]], "Backend Handler \u2705": [[865, "backend-handler"]], "Ivy Frontend Tests": [[858, "ivy-frontend-tests"]], "Frontend Test Examples": [[858, "frontend-test-examples"]], "ivy.tan()": [[858, "ivy-tan"]], "ivy.full()": [[858, "ivy-full"]], "Testing Without Using Tests Values": [[858, "testing-without-using-tests-values"]], "Alias functions": [[858, "alias-functions"]], "Frontend Instance Method Tests": [[858, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[858, "frontend-instance-method-test-examples"]], "ivy.add()": [[858, "ivy-add"]], "Hypothesis Helpers": [[858, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[858, "frontend-framework-testing-configuration"]], "One liners": [[873, "one-liners"]], "Gradients": [[855, "gradients"], [94, "module-ivy.data_classes.container.gradients"], [647, "gradients"], [71, "module-ivy.data_classes.array.gradients"], [386, "gradients"]], "Example Usage of the Gradient API": [[855, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[855, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[855, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[855, "custom-gradient-functions"]], "Design of the Gradient API": [[855, "design-of-the-gradient-api"]], "Our policy on gradients": [[855, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[855, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[855, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[855, "framework-specific-considerations"]], "FAQ": [[867, "faq"]], "Maintaining Backend Versions": [[867, "maintaining-backend-versions"]], "Dynamic Sizes": [[867, "dynamic-sizes"]], "Type and Shape Checking": [[867, "type-and-shape-checking"]], "GPU handling": [[867, "gpu-handling"]], "Model Deployment": [[867, "model-deployment"]], "Dynamic Control Flow": [[867, "dynamic-control-flow"]], "Auto-Differentiation": [[867, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[867, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[867, "support-for-functions"]], "Alternative Data Structures": [[867, "alternative-data-structures"]], "Custom Operations": [[867, "custom-operations"]], "The Pipeline": [[867, "the-pipeline"]], "State": [[867, "state"]], "Logging": [[825, "module-ivy.utils.logging"]], "Optimizers": [[811, "module-ivy.stateful.optimizers"]], "Available frameworks": [[787, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Activations": [[803, "module-ivy.stateful.activations"], [638, "activations"], [63, "module-ivy.data_classes.array.activations"], [85, "module-ivy.data_classes.container.activations"], [379, "activations"]], "Parameter": [[803, "parameter"], [803, "id1"], [599, "parameter"], [600, "parameter"], [643, "parameter"], [646, "parameter"], [646, "id1"], [646, "id2"], [646, "id3"], [646, "id4"], [646, "id5"], [596, "parameter"], [597, "parameter"], [591, "parameter"], [590, "parameter"], [222, "parameter"]], "Testing": [[802, "testing"], [57, "Testing"]], "Structs": [[797, "module-ivy_tests.test_ivy.helpers.structs"]], "Function testing": [[788, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Array helpers": [[791, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Utils": [[801, "utils"]], "Profiler": [[826, "module-ivy.utils.profiler"]], "Binaries": [[818, "module-ivy.utils.binaries"]], "Exceptions": [[823, "module-ivy.utils.exceptions"]], "Einsum parser": [[821, "module-ivy.utils.einsum_parser"]], "Converters": [[804, "module-ivy.stateful.converters"]], "Dtype helpers": [[792, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "load": [[784, "load"]], "General helpers": [[793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Multiprocessing": [[795, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "Assertions": [[813, "module-ivy.utils.assertions"], [786, "module-ivy_tests.test_ivy.helpers.assertions"]], "Decorator utils": [[819, "module-ivy.utils.decorator_utils"]], "any": [[783, "any"]], "Globals": [[789, "module-ivy_tests.test_ivy.helpers.globals"]], "Hypothesis helpers": [[790, "hypothesis-helpers"]], "Verbosity": [[827, "module-ivy.utils.verbosity"]], "Test parameter flags": [[798, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "all": [[782, "all"]], "Helpers": [[805, "module-ivy.stateful.helpers"]], "Inspection": [[824, "module-ivy.utils.inspection"]], "Layers": [[807, "module-ivy.stateful.layers"], [96, "module-ivy.data_classes.container.layers"], [648, "layers"], [73, "module-ivy.data_classes.array.layers"], [387, "layers"]], "Einsum path helpers": [[822, "module-ivy.utils.einsum_path_helpers"]], "Losses": [[808, "module-ivy.stateful.losses"], [98, "module-ivy.data_classes.container.losses"], [650, "losses"], [75, "module-ivy.data_classes.array.losses"], [389, "losses"]], "Initializers": [[806, "module-ivy.stateful.initializers"]], "Module": [[809, "module-ivy.stateful.module"]], "Testing helpers": [[799, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Sub backend handler": [[817, "module-ivy.utils.backend.sub_backend_handler"]], "Ast helpers": [[815, "module-ivy.utils.backend.ast_helpers"]], "Norms": [[810, "module-ivy.stateful.norms"], [100, "module-ivy.data_classes.container.norms"], [654, "norms"], [77, "module-ivy.data_classes.array.norms"], [393, "norms"]], "Handler": [[816, "module-ivy.utils.backend.handler"]], "Number helpers": [[794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Framework classes": [[800, "framework-classes"]], "Pipeline helper": [[796, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Dynamic import": [[820, "module-ivy.utils.dynamic_import"]], "Backend": [[814, "backend"]], "Sequential": [[812, "module-ivy.stateful.sequential"]], "save": [[785, "save"]], "prune_nest_at_indices": [[749, "prune-nest-at-indices"]], "index_nest": [[736, "index-nest"]], "argmin": [[760, "argmin"]], "nested_map": [[745, "nested-map"]], "set_nest_at_index": [[750, "set-nest-at-index"]], "argmax": [[759, "argmax"]], "unique_counts": [[765, "unique-counts"]], "Data-dependent output shape": [[765, null], [764, null], [767, null], [766, null], [657, null], [657, null], [657, null], [657, null]], "argsort": [[768, "argsort"]], "randint": [[754, "randint"]], "unique_all": [[764, "unique-all"]], "nested_argwhere": [[744, "nested-argwhere"]], "map_nest_at_index": [[740, "map-nest-at-index"]], "nested_any": [[743, "nested-any"]], "searchsorted": [[770, "searchsorted"]], "multinomial": [[753, "multinomial"]], "nested_multi_map": [[746, "nested-multi-map"]], "insert_into_nest_at_index": [[737, "insert-into-nest-at-index"]], "multi_index_nest": [[742, "multi-index-nest"]], "layer_norm": [[752, "layer-norm"]], "prod": [[778, "prod"]], "shuffle": [[758, "shuffle"]], "mean": [[776, "mean"]], "prune_empty": [[747, "prune-empty"]], "cumsum": [[773, "cumsum"]], "cumprod": [[772, "cumprod"]], "unique_values": [[767, "unique-values"]], "set_nest_at_indices": [[751, "set-nest-at-indices"]], "std": [[779, "std"]], "max": [[775, "max"]], "map_nest_at_indices": [[741, "map-nest-at-indices"]], "prune_nest_at_index": [[748, "prune-nest-at-index"]], "nonzero": [[762, "nonzero"]], "einsum": [[774, "einsum"]], "unique_inverse": [[766, "unique-inverse"]], "var": [[781, "var"]], "msort": [[769, "msort"]], "sort": [[771, "sort"]], "random_uniform": [[756, "random-uniform"]], "min": [[777, "min"]], "insert_into_nest_at_indices": [[738, "insert-into-nest-at-indices"]], "random_normal": [[755, "random-normal"]], "where": [[763, "where"]], "map": [[739, "map"]], "sum": [[780, "sum"]], "seed": [[757, "seed"]], "argwhere": [[761, "argwhere"]], "cross_entropy": [[709, "cross-entropy"]], "maml_step": [[731, "maml-step"]], "permute_dims": [[719, "permute-dims"]], "wasserstein_loss_generator": [[713, "wasserstein-loss-generator"]], "flip": [[718, "flip"]], "svdvals": [[700, "svdvals"]], "all_nested_indices": [[733, "all-nested-indices"]], "slogdet": [[697, "slogdet"]], "ssim_loss": [[711, "ssim-loss"]], "vector_norm": [[706, "vector-norm"]], "matrix_norm": [[690, "matrix-norm"]], "tile": [[727, "tile"]], "matrix_power": [[691, "matrix-power"]], "fomaml_step": [[730, "fomaml-step"]], "sparse_cross_entropy": [[710, "sparse-cross-entropy"]], "stack": [[725, "stack"]], "matrix_transpose": [[693, "matrix-transpose"]], "tensordot": [[701, "tensordot"]], "reshape": [[721, "reshape"]], "squeeze": [[724, "squeeze"]], "svd": [[699, "svd"]], "qr": [[696, "qr"]], "unstack": [[728, "unstack"]], "duplicate_array_index_chains": [[735, "duplicate-array-index-chains"]], "vector_to_skew_symmetric_matrix": [[707, "vector-to-skew-symmetric-matrix"]], "roll": [[722, "roll"]], "solve": [[698, "solve"]], "matrix_rank": [[692, "matrix-rank"]], "tensorsolve": [[702, "tensorsolve"]], "clip": [[714, "clip"]], "expand_dims": [[717, "expand-dims"]], "swapaxes": [[726, "swapaxes"]], "zero_pad": [[729, "zero-pad"]], "reptile_step": [[732, "reptile-step"]], "trace": [[703, "trace"]], "concat": [[715, "concat"]], "vander": [[704, "vander"]], "wasserstein_loss_discriminator": [[712, "wasserstein-loss-discriminator"]], "pinv": [[695, "pinv"]], "repeat": [[720, "repeat"]], "outer": [[694, "outer"]], "split": [[723, "split"]], "copy_nest": [[734, "copy-nest"]], "vecdot": [[705, "vecdot"]], "constant_pad": [[716, "constant-pad"]], "binary_cross_entropy": [[708, "binary-cross-entropy"]], "Utility": [[106, "module-ivy.data_classes.container.utility"], [660, "utility"], [83, "module-ivy.data_classes.array.utility"], [400, "utility"]], "log_softmax": [[125, "log-softmax"]], "Random": [[101, "module-ivy.data_classes.container.random"], [655, "random"], [78, "module-ivy.data_classes.array.random"], [394, "random"]], "Array": [[114, "array"]], "Elementwise": [[119, "module-ivy.data_classes.nested_array.elementwise"], [644, "elementwise"], [91, "module-ivy.data_classes.container.elementwise"], [68, "module-ivy.data_classes.array.elementwise"], [384, "elementwise"]], "sigmoid": [[128, "sigmoid"]], "Linear algebra": [[97, "module-ivy.data_classes.container.linear_algebra"], [649, "linear-algebra"], [74, "module-ivy.data_classes.array.linear_algebra"], [388, "linear-algebra"]], "gelu": [[122, "gelu"]], "Nested array": [[117, "nested-array"]], "softmax": [[129, "softmax"]], "Functions": [[121, "functions"]], "Base": [[118, "module-ivy.data_classes.nested_array.base"], [108, "module-ivy.data_classes.factorized_tensor.base"], [86, "module-ivy.data_classes.container.base"]], "Tr tensor": [[111, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "mish": [[126, "mish"]], "Manipulation": [[99, "module-ivy.data_classes.container.manipulation"], [651, "manipulation"], [76, "module-ivy.data_classes.array.manipulation"], [390, "manipulation"]], "cmp_is": [[132, "cmp-is"]], "Data classes": [[120, "data-classes"]], "Wrapping": [[107, "module-ivy.data_classes.container.wrapping"], [84, "module-ivy.data_classes.array.wrapping"]], "Searching": [[102, "module-ivy.data_classes.container.searching"], [656, "searching"], [79, "module-ivy.data_classes.array.searching"], [395, "searching"]], "Cp tensor": [[109, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Sorting": [[104, "module-ivy.data_classes.container.sorting"], [658, "sorting"], [81, "module-ivy.data_classes.array.sorting"], [397, "sorting"]], "Tucker tensor": [[113, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "softsign": [[131, "softsign"]], "try_except": [[136, "try-except"]], "if_else": [[135, "if-else"]], "Image": [[95, "module-ivy.data_classes.container.image"], [72, "module-ivy.data_classes.array.image"]], "cmp_isnot": [[133, "cmp-isnot"]], "Parafac2 tensor": [[110, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Statistical": [[105, "module-ivy.data_classes.container.statistical"], [659, "statistical"], [82, "module-ivy.data_classes.array.statistical"], [399, "statistical"]], "General": [[93, "module-ivy.data_classes.container.general"], [646, "general"], [70, "module-ivy.data_classes.array.general"], [385, "general"]], "relu": [[127, "relu"]], "hardswish": [[123, "hardswish"]], "Factorized tensor": [[116, "factorized-tensor"]], "softplus": [[130, "softplus"]], "for_loop": [[134, "for-loop"]], "Set": [[103, "module-ivy.data_classes.container.set"], [657, "set"], [80, "module-ivy.data_classes.array.set"], [396, "module-ivy.functional.ivy.experimental.set"]], "Tt tensor": [[112, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Container": [[115, "container"]], "leaky_relu": [[124, "leaky-relu"]], "Experimental": [[92, "module-ivy.data_classes.container.experimental"], [645, "experimental"], [69, "module-ivy.data_classes.array.experimental"]], "while_loop": [[137, "while-loop"]], "to_list": [[609, "to-list"]], "to_scalar": [[612, "to-scalar"]], "execute_with_gradients": [[629, "execute-with-gradients"]], "lamb_update": [[633, "lamb-update"]], "unset_min_denominator": [[618, "unset-min-denominator"]], "set_queue_timeout": [[598, "set-queue-timeout"]], "unset_nestable_mode": [[619, "unset-nestable-mode"]], "to_native_shape": [[610, "to-native-shape"]], "unset_shape_array_mode": [[622, "unset-shape-array-mode"]], "stable_divide": [[604, "stable-divide"]], "adam_step": [[627, "adam-step"]], "try_else_none": [[613, "try-else-none"]], "Creation": [[641, "creation"], [65, "module-ivy.data_classes.array.creation"], [88, "module-ivy.data_classes.container.creation"], [381, "creation"]], "stable_pow": [[605, "stable-pow"]], "to_ivy_shape": [[608, "to-ivy-shape"]], "set_tmp_dir": [[601, "set-tmp-dir"]], "Constants": [[639, "module-ivy.functional.ivy.constants"], [380, "module-ivy.functional.ivy.experimental.constants"]], "Control flow ops": [[640, "control-flow-ops"]], "set_shape_array_mode": [[599, "set-shape-array-mode"]], "unset_exception_trace_mode": [[615, "unset-exception-trace-mode"]], "vmap": [[626, "vmap"]], "value_is_nan": [[625, "value-is-nan"]], "set_show_func_wrapper_trace_mode": [[600, "set-show-func-wrapper-trace-mode"]], "grad": [[630, "grad"]], "Device": [[643, "device"], [90, "module-ivy.data_classes.container.device"], [67, "module-ivy.data_classes.array.device"], [383, "module-ivy.functional.ivy.experimental.device"]], "size": [[603, "size"]], "unset_queue_timeout": [[621, "unset-queue-timeout"]], "jac": [[632, "jac"]], "lars_update": [[634, "lars-update"]], "unset_inplace_mode": [[616, "unset-inplace-mode"]], "supports_inplace_updates": [[607, "supports-inplace-updates"]], "unset_show_func_wrapper_trace_mode": [[623, "unset-show-func-wrapper-trace-mode"]], "unset_precise_mode": [[620, "unset-precise-mode"]], "shape": [[602, "shape"]], "unset_tmp_dir": [[624, "unset-tmp-dir"]], "gradient_descent_update": [[631, "gradient-descent-update"]], "Data type": [[642, "data-type"], [89, "module-ivy.data_classes.container.data_type"], [66, "module-ivy.data_classes.array.data_type"], [382, "module-ivy.functional.ivy.experimental.data_type"]], "strides": [[606, "strides"]], "optimizer_update": [[635, "optimizer-update"]], "unset_min_base": [[617, "unset-min-base"]], "adam_update": [[628, "adam-update"]], "unset_array_mode": [[614, "unset-array-mode"]], "value_and_grad": [[637, "value-and-grad"]], "stop_gradient": [[636, "stop-gradient"]], "to_numpy": [[611, "to-numpy"]], "conv": [[661, "conv"]], "cross": [[680, "cross"]], "cholesky": [[679, "cholesky"]], "dropout": [[671, "dropout"]], "multi_head_attention": [[675, "multi-head-attention"]], "inv": [[688, "inv"]], "eigh": [[685, "eigh"]], "eigvalsh": [[686, "eigvalsh"]], "inner": [[687, "inner"]], "conv_general_transpose": [[669, "conv-general-transpose"]], "diag": [[682, "diag"]], "Nest": [[653, "nest"], [392, "module-ivy.functional.ivy.experimental.nest"]], "conv_general_dilated": [[668, "conv-general-dilated"]], "scaled_dot_product_attention": [[678, "scaled-dot-product-attention"]], "conv1d": [[662, "conv1d"]], "nms": [[676, "nms"]], "lstm": [[673, "lstm"]], "linear": [[672, "linear"]], "conv2d_transpose": [[665, "conv2d-transpose"]], "conv3d": [[666, "conv3d"]], "lstm_update": [[674, "lstm-update"]], "Meta": [[652, "meta"], [391, "module-ivy.functional.ivy.experimental.meta"]], "depthwise_conv2d": [[670, "depthwise-conv2d"]], "conv2d": [[664, "conv2d"]], "roi_align": [[677, "roi-align"]], "det": [[681, "det"]], "conv1d_transpose": [[663, "conv1d-transpose"]], "matmul": [[689, "matmul"]], "eig": [[684, "eig"], [441, "eig"]], "conv3d_transpose": [[667, "conv3d-transpose"]], "diagonal": [[683, "diagonal"]], "einops_repeat": [[559, "einops-repeat"]], "is_ivy_nested_array": [[579, "is-ivy-nested-array"]], "is_native_array": [[580, "is-native-array"]], "inplace_variables_supported": [[575, "inplace-variables-supported"]], "gather_nd": [[565, "gather-nd"]], "current_backend_str": [[555, "current-backend-str"]], "multiprocessing": [[585, "multiprocessing"]], "inplace_decrement": [[572, "inplace-decrement"]], "print_all_arrays_in_memory": [[587, "print-all-arrays-in-memory"]], "scatter_nd": [[589, "scatter-nd"]], "set_min_base": [[594, "set-min-base"]], "get_num_dims": [[568, "get-num-dims"]], "is_ivy_array": [[577, "is-ivy-array"]], "set_inplace_mode": [[592, "set-inplace-mode"]], "gather": [[564, "gather"]], "einops_rearrange": [[557, "einops-rearrange"]], "default": [[556, "default"]], "inplace_update": [[574, "inplace-update"]], "is_ivy_container": [[578, "is-ivy-container"]], "inplace_increment": [[573, "inplace-increment"]], "num_arrays_in_memory": [[586, "num-arrays-in-memory"]], "set_nestable_mode": [[596, "set-nestable-mode"]], "set_min_denominator": [[595, "set-min-denominator"]], "get_item": [[567, "get-item"]], "isin": [[581, "isin"]], "itemsize": [[583, "itemsize"]], "clip_vector_norm": [[553, "clip-vector-norm"]], "fourier_encode": [[561, "fourier-encode"]], "function_unsupported_devices_and_dtypes": [[563, "function-unsupported-devices-and-dtypes"]], "match_kwargs": [[584, "match-kwargs"]], "scatter_flat": [[588, "scatter-flat"]], "set_item": [[593, "set-item"]], "container_types": [[554, "container-types"]], "inplace_arrays_supported": [[571, "inplace-arrays-supported"]], "clip_matrix_norm": [[552, "clip-matrix-norm"]], "function_supported_devices_and_dtypes": [[562, "function-supported-devices-and-dtypes"]], "set_precise_mode": [[597, "set-precise-mode"]], "is_array": [[576, "is-array"]], "einops_reduce": [[558, "einops-reduce"]], "has_nans": [[570, "has-nans"]], "set_exception_trace_mode": [[591, "set-exception-trace-mode"]], "get_all_arrays_in_memory": [[566, "get-all-arrays-in-memory"]], "isscalar": [[582, "isscalar"]], "get_referrers_recursive": [[569, "get-referrers-recursive"]], "exists": [[560, "exists"]], "set_array_mode": [[590, "set-array-mode"]], "Compilation of a Basic Function": [[56, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[56, "Installs-\ud83d\udcbe"], [55, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[56, "Imports-\ud83d\udec3"], [55, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[56, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[56, "Function-compilation-\ud83d\udee0"]], "Set backend": [[56, "Set-backend"]], "Sample input": [[56, "Sample-input"]], "Define function to compile": [[56, "Define-function-to-compile"]], "Compile the function": [[56, "Compile-the-function"]], "Check results": [[56, "Check-results"], [56, "id1"]], "Compiling simple neural network \ud83e\udde0": [[56, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[56, "Define-Model"], [55, "Define-Model"]], "Create model": [[56, "Create-model"]], "Define input": [[56, "Define-input"]], "Compile network": [[56, "Compile-network"]], "0.2: Transpile": [[47, "0.2:-Transpile"]], "1.0: Lazy vs Eager": [[48, "1.0:-Lazy-vs-Eager"]], "Unify": [[48, "Unify"], [50, "Unify"], [49, "Unify"], [37, "Unify"]], "Compile": [[48, "Compile"], [50, "Compile"], [49, "Compile"]], "Transpile": [[48, "Transpile"], [50, "Transpile"], [49, "Transpile"], [37, "Transpile"]], "3.0: Perceiver": [[53, "3.0:-Perceiver"]], "HuggingFace Tensorflow DeiT": [[60, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[60, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "2.0: Kornia": [[52, "2.0:-Kornia"]], "Conversions": [[87, "module-ivy.data_classes.container.conversions"], [64, "module-ivy.data_classes.array.conversions"]], "1.2: As a Decorator": [[50, "1.2:-As-a-Decorator"]], "0.1: Compile": [[46, "0.1:-Compile"]], "End-to-End Training Pipeline in Ivy": [[59, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[59, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[59, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[59, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[59, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[59, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[59, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[59, "Plotting-the-training-metrics"]], "Save the trained Model": [[59, "Save-the-trained-Model"]], "Resnet 18": [[62, "Resnet-18"]], "Ivy as a Transpiler Introduction": [[61, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[61, "To-use-the-transpiler:"]], "Transpiler Interface": [[61, "Transpiler-Interface"]], "Telemetry": [[61, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[61, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[61, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[61, "3.-Transpile-Models-\ud83c\udf10"]], "3.1: Stable Diffusion": [[54, "3.1:-Stable-Diffusion"]], "1.1: Framework Selection": [[49, "1.1:-Framework-Selection"]], "Basic Operations with Ivy": [[55, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[55, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[55, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[55, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[55, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[55, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[55, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[55, "Set-Backend-Framework"]], "Create Model": [[55, "Create-Model"]], "Create Optimizer": [[55, "Create-Optimizer"]], "Input and Target": [[55, "Input-and-Target"]], "Loss Function": [[55, "Loss-Function"]], "Training Loop": [[55, "Training-Loop"]], "Deepmind PerceiverIO on GPU": [[58, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[58, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[58, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[58, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[58, "Run-the-demo..."]], "\u2026with torch backend": [[58, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[58, "....with-tensorflow-backend"]], "\u2026with jax backend": [[58, "...with-jax-backend"]], "\u2026with numpy backend": [[58, "...with-numpy-backend"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[57, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[57, "Table-of-Contents"]], "Defining the model": [[57, "Defining-the-model"]], "Model construction": [[57, "Model-construction"]], "Some helper functions": [[57, "Some-helper-functions"]], "Transpiling the model": [[57, "Transpiling-the-model"]], "PyTorch pipeline": [[57, "PyTorch-pipeline"]], "Dataset download": [[57, "Dataset-download"]], "DataLoader": [[57, "DataLoader"]], "Training": [[57, "Training"]], "1.3: Dynamic vs Static": [[51, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[51, "Dynamic"]], "Static": [[51, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[51, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "cov": [[534, "cov"]], "gamma": [[523, "gamma"]], "assert_supports_inplace": [[550, "assert-supports-inplace"]], "unfold": [[509, "unfold"]], "local_response_norm": [[518, "local-response-norm"]], "group_norm": [[514, "group-norm"]], "beta": [[521, "beta"]], "dirichlet": [[522, "dirichlet"]], "top_k": [[506, "top-k"]], "nanprod": [[543, "nanprod"]], "nanmedian": [[541, "nanmedian"]], "instance_norm": [[515, "instance-norm"]], "l2_normalize": [[517, "l2-normalize"]], "optional_get_element": [[545, "optional-get-element"]], "bincount": [[532, "bincount"]], "invert_permutation": [[526, "invert-permutation"]], "unique_consecutive": [[510, "unique-consecutive"]], "batch_norm": [[513, "batch-norm"]], "nanmean": [[540, "nanmean"]], "is_native_sparse_array": [[529, "is-native-sparse-array"]], "lexsort": [[527, "lexsort"]], "corrcoef": [[533, "corrcoef"]], "cummin": [[536, "cummin"]], "median": [[539, "median"]], "array_equal": [[549, "array-equal"]], "lp_normalize": [[519, "lp-normalize"]], "unravel_index": [[525, "unravel-index"]], "unflatten": [[508, "unflatten"]], "l1_normalize": [[516, "l1-normalize"]], "native_sparse_array": [[530, "native-sparse-array"]], "arg_info": [[547, "arg-info"]], "trim_zeros": [[507, "trim-zeros"]], "arg_names": [[548, "arg-names"]], "quantile": [[544, "quantile"]], "all_equal": [[546, "all-equal"]], "vsplit": [[511, "vsplit"]], "vstack": [[512, "vstack"]], "bernoulli": [[520, "bernoulli"]], "cache_fn": [[551, "cache-fn"]], "igamma": [[538, "igamma"]], "nanmin": [[542, "nanmin"]], "poisson": [[524, "poisson"]], "native_sparse_array_to_indices_values_and_shape": [[531, "native-sparse-array-to-indices-values-and-shape"]], "is_ivy_sparse_array": [[528, "is-ivy-sparse-array"]], "cummax": [[535, "cummax"]], "histogram": [[537, "histogram"]], "flatten": [[486, "flatten"]], "pad": [[496, "pad"]], "partial_fold": [[497, "partial-fold"]], "soft_margin_loss": [[471, "soft-margin-loss"]], "flipud": [[488, "flipud"]], "fill_diagonal": [[485, "fill-diagonal"]], "hinge_embedding_loss": [[464, "hinge-embedding-loss"]], "l1_loss": [[467, "l1-loss"]], "soft_thresholding": [[503, "soft-thresholding"]], "take_along_axis": [[505, "take-along-axis"]], "fliplr": [[487, "fliplr"]], "atleast_3d": [[476, "atleast-3d"]], "put_along_axis": [[501, "put-along-axis"]], "poisson_nll_loss": [[469, "poisson-nll-loss"]], "partial_unfold": [[499, "partial-unfold"]], "tt_matrix_to_tensor": [[462, "tt-matrix-to-tensor"]], "take": [[504, "take"]], "check_scalar": [[478, "check-scalar"]], "hsplit": [[491, "hsplit"]], "hstack": [[492, "hstack"]], "heaviside": [[490, "heaviside"]], "fold": [[489, "fold"]], "moveaxis": [[495, "moveaxis"]], "partial_vec_to_tensor": [[500, "partial-vec-to-tensor"]], "tensor_train": [[460, "tensor-train"]], "partial_tensor_to_vec": [[498, "partial-tensor-to-vec"]], "dsplit": [[482, "dsplit"]], "column_stack": [[480, "column-stack"]], "kl_div": [[466, "kl-div"]], "atleast_1d": [[474, "atleast-1d"]], "choose": [[479, "choose"]], "dstack": [[483, "dstack"]], "atleast_2d": [[475, "atleast-2d"]], "truncated_svd": [[461, "truncated-svd"]], "concat_from_sequence": [[481, "concat-from-sequence"]], "matricize": [[494, "matricize"]], "i0": [[493, "i0"]], "smooth_l1_loss": [[470, "smooth-l1-loss"]], "log_poisson_loss": [[468, "log-poisson-loss"]], "associative_scan": [[473, "associative-scan"]], "as_strided": [[472, "as-strided"]], "broadcast_shapes": [[477, "broadcast-shapes"]], "huber_loss": [[465, "huber-loss"]], "expand": [[484, "expand"]], "tucker": [[463, "tucker"]], "rot90": [[502, "rot90"]], "nearest_interpolate": [[428, "nearest-interpolate"]], "kron": [[448, "kron"]], "lu_factor": [[450, "lu-factor"]], "matrix_exp": [[453, "matrix-exp"]], "svd_flip": [[459, "svd-flip"]], "general_inner_product": [[444, "general-inner-product"]], "khatri_rao": [[447, "khatri-rao"]], "adjoint": [[436, "adjoint"]], "mode_dot": [[454, "mode-dot"]], "generate_einsum_equation": [[417, "generate-einsum-equation"]], "embedding": [[414, "embedding"]], "max_pool3d": [[426, "max-pool3d"]], "pool": [[429, "pool"]], "higher_order_moment": [[445, "higher-order-moment"]], "cond": [[438, "cond"]], "ifft": [[420, "ifft"]], "batched_outer": [[437, "batched-outer"]], "eigvals": [[443, "eigvals"]], "max_pool1d": [[424, "max-pool1d"]], "rfft": [[431, "rfft"]], "ifftn": [[421, "ifftn"]], "multi_dot": [[455, "multi-dot"]], "lu_solve": [[451, "lu-solve"]], "diagflat": [[439, "diagflat"]], "solve_triangular": [[458, "solve-triangular"]], "dot": [[440, "dot"]], "idct": [[419, "idct"]], "multi_mode_dot": [[456, "multi-mode-dot"]], "reduce_window": [[430, "reduce-window"]], "kronecker": [[449, "kronecker"]], "sliding_window": [[434, "sliding-window"]], "stft": [[435, "stft"]], "max_unpool1d": [[427, "max-unpool1d"]], "rfftn": [[432, "rfftn"]], "interp": [[422, "interp"]], "fft": [[415, "fft"]], "initialize_tucker": [[446, "initialize-tucker"]], "fft2": [[416, "fft2"]], "rnn": [[433, "rnn"]], "get_interpolate_kernel": [[418, "get-interpolate-kernel"]], "max_pool2d": [[425, "max-pool2d"]], "partial_tucker": [[457, "partial-tucker"]], "interpolate": [[423, "interpolate"]], "eigh_tridiagonal": [[442, "eigh-tridiagonal"]], "make_svd_non_negative": [[452, "make-svd-non-negative"]], "diff": [[353, "diff"]], "count_nonzero": [[352, "count-nonzero"]], "hamming_window": [[326, "hamming-window"]], "hann_window": [[327, "hann-window"]], "indices": [[328, "indices"]], "isclose": [[363, "isclose"]], "blackman_window": [[324, "blackman-window"]], "thresholded_relu": [[323, "thresholded-relu"]], "fix": [[357, "fix"]], "unsorted_segment_sum": [[344, "unsorted-segment-sum"]], "random_tt": [[338, "random-tt"]], "digamma": [[354, "digamma"]], "frexp": [[360, "frexp"]], "copysign": [[351, "copysign"]], "random_cp": [[335, "random-cp"]], "random_tr": [[337, "random-tr"]], "polyval": [[334, "polyval"]], "random_parafac2": [[336, "random-parafac2"]], "binarizer": [[349, "binarizer"]], "erfc": [[355, "erfc"]], "lgamma": [[366, "lgamma"]], "kaiser_bessel_derived_window": [[329, "kaiser-bessel-derived-window"]], "ndenumerate": [[332, "ndenumerate"]], "eye_like": [[325, "eye-like"]], "threshold": [[322, "threshold"]], "mel_weight_matrix": [[331, "mel-weight-matrix"]], "float_power": [[358, "float-power"]], "modf": [[367, "modf"]], "vorbis_window": [[345, "vorbis-window"]], "kaiser_window": [[330, "kaiser-window"]], "amax": [[347, "amax"]], "lerp": [[365, "lerp"]], "trilu": [[341, "trilu"]], "fmax": [[359, "fmax"]], "hypot": [[362, "hypot"]], "allclose": [[346, "allclose"]], "gradient": [[361, "gradient"]], "random_tucker": [[339, "random-tucker"]], "unsorted_segment_min": [[343, "unsorted-segment-min"]], "amin": [[348, "amin"]], "ldexp": [[364, "ldexp"]], "conj": [[350, "conj"]], "ndindex": [[333, "ndindex"]], "tril_indices": [[340, "tril-indices"]], "unsorted_segment_mean": [[342, "unsorted-segment-mean"]], "erfinv": [[356, "erfinv"]], "tanhshrink": [[321, "tanhshrink"]], "nan_to_num": [[286, "nan-to-num"]], "pow": [[290, "pow"]], "maximum": [[283, "maximum"]], "hardsilu": [[310, "hardsilu"]], "hardtanh": [[311, "hardtanh"]], "logical_and": [[279, "logical-and"]], "trapz": [[304, "trapz"]], "prelu": [[314, "prelu"]], "sinh": [[298, "sinh"]], "trunc_divide": [[306, "trunc-divide"]], "log2": [[276, "log2"]], "relu6": [[315, "relu6"]], "sign": [[296, "sign"]], "logical_or": [[281, "logical-or"]], "selu": [[317, "selu"]], "rad2deg": [[291, "rad2deg"]], "remainder": [[294, "remainder"]], "minimum": [[284, "minimum"]], "sin": [[297, "sin"]], "logaddexp2": [[278, "logaddexp2"]], "negative": [[287, "negative"]], "logit": [[312, "logit"]], "softshrink": [[319, "softshrink"]], "multiply": [[285, "multiply"]], "trunc": [[305, "trunc"]], "not_equal": [[288, "not-equal"]], "real": [[292, "real"]], "logsigmoid": [[313, "logsigmoid"]], "square": [[300, "square"]], "reciprocal": [[293, "reciprocal"]], "tanh": [[303, "tanh"]], "hardshrink": [[309, "hardshrink"]], "logaddexp": [[277, "logaddexp"]], "sqrt": [[299, "sqrt"]], "scaled_tanh": [[316, "scaled-tanh"]], "logical_not": [[280, "logical-not"]], "subtract": [[301, "subtract"]], "round": [[295, "round"]], "positive": [[289, "positive"]], "tan": [[302, "tan"]], "celu": [[307, "celu"]], "silu": [[318, "silu"]], "elu": [[308, "elu"]], "stanh": [[320, "stanh"]], "logical_xor": [[282, "logical-xor"]], "Quickstart": [[44, "Quickstart"]], "Get familiar with Ivy": [[44, "Get-familiar-with-Ivy"]], "Functional API": [[44, "Functional-API"]], "Stateful API": [[44, "Stateful-API"]], "Tracing code": [[44, "Tracing-code"]], "Any function": [[44, "Any-function"], [43, "Any-function"]], "Any library": [[44, "Any-library"], [43, "Any-library"]], "Any model": [[44, "Any-model"], [43, "Any-model"]], "0.0: Unify": [[45, "0.0:-Unify"]], "Image Segmentation with Ivy UNet": [[13, "Image-Segmentation-with-Ivy-UNet"], [12, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[13, "Imports"], [12, "Imports"], [22, "Imports"], [21, "Imports"], [26, "Imports"]], "Data Preparation": [[13, "Data-Preparation"], [4, "Data-Preparation"], [12, "Data-Preparation"], [22, "Data-Preparation"], [6, "Data-Preparation"], [5, "Data-Preparation"], [21, "Data-Preparation"], [7, "Data-Preparation"]], "Custom Preprocessing": [[13, "Custom-Preprocessing"], [12, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[13, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [12, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [22, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [21, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[13, "Visualise-image"], [12, "Visualise-image"], [22, "Visualise-image"], [21, "Visualise-image"]], "Model Inference": [[13, "Model-Inference"], [12, "Model-Inference"]], "Initializing Native Torch UNet": [[13, "Initializing-Native-Torch-UNet"], [12, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[13, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"], [12, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[13, "Custom-masking-function"], [12, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[13, "Use-the-model-to-segment-your-images-\ud83d\ude80"], [12, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[13, "TensorFlow-backend"], [12, "TensorFlow-backend"]], "JAX": [[13, "JAX"], [12, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[13, "Appendix:-the-Ivy-native-implementation-of-UNet"], [12, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "How To Convert Models from PyTorch to PaddlePaddle": [[11, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"], [10, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[11, "About-the-Model"], [10, "About-the-Model"]], "Transpiling the Model": [[11, "Transpiling-the-Model"], [10, "Transpiling-the-Model"]], "Comparing the results": [[11, "Comparing-the-results"], [8, "Comparing-the-results"], [9, "Comparing-the-results"], [23, "Comparing-the-results"], [10, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[11, "Fine-tuning-the-transpiled-model"], [8, "Fine-tuning-the-transpiled-model"], [9, "Fine-tuning-the-transpiled-model"], [23, "Fine-tuning-the-transpiled-model"], [10, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[11, "Conclusion"], [8, "Conclusion"], [9, "Conclusion"], [23, "Conclusion"], [10, "Conclusion"]], "Unify code": [[34, "Unify-code"]], "Lazy vs Eager": [[37, "Lazy-vs-Eager"]], "Trace": [[37, "Trace"], [38, "Trace"]], "Transpiling a haiku model to build on top": [[28, "Transpiling-a-haiku-model-to-build-on-top"]], "Transpile code": [[36, "Transpile-code"]], "Accelerating PyTorch models with JAX": [[25, "Accelerating-PyTorch-models-with-JAX"], [24, "Accelerating-PyTorch-models-with-JAX"]], "Trace code": [[35, "Trace-code"]], "Learn the basics": [[32, "learn-the-basics"], [31, "learn-the-basics"]], "Ivy AlexNet demo": [[4, "Ivy-AlexNet-demo"], [5, "Ivy-AlexNet-demo"]], "Installation": [[4, "Installation"], [23, "Installation"], [22, "Installation"], [5, "Installation"], [21, "Installation"]], "Ivy AlexNet inference in Torch": [[4, "Ivy-AlexNet-inference-in-Torch"], [5, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[4, "TensorFlow-inference"], [5, "TensorFlow-inference"]], "JAX inference": [[4, "JAX-inference"], [5, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[4, "Appendix-(Ivy-code-for-AlexNet-implementation)"], [5, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Tutorials And Examples": [[31, "tutorials-and-examples"]], "Examples and Demos": [[31, "examples-and-demos"], [3, "examples-and-demos"]], "Transpile any library": [[39, "Transpile-any-library"]], "Transpiling Functions from PyTorch to TensorFlow": [[42, "Transpiling-Functions-from-PyTorch-to-TensorFlow"]], "Write a model using Ivy": [[41, "Write-a-model-using-Ivy"]], "Using TensorFlow Models in your PyTorch Projects": [[8, "Using-TensorFlow-Models-in-your-PyTorch-Projects"], [9, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Framework Incompatibility": [[8, "Framework-Incompatibility"], [9, "Framework-Incompatibility"], [23, "Framework-Incompatibility"]], "Transpiling a TensorFlow model to PyTorch": [[8, "Transpiling-a-TensorFlow-model-to-PyTorch"], [9, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "About the transpiled model": [[8, "About-the-transpiled-model"], [9, "About-the-transpiled-model"], [23, "About-the-transpiled-model"]], "Setting-up the source model": [[8, "Setting-up-the-source-model"], [9, "Setting-up-the-source-model"], [23, "Setting-up-the-source-model"]], "Converting the model from TensorFlow to PyTorch": [[8, "Converting-the-model-from-TensorFlow-to-PyTorch"], [9, "Converting-the-model-from-TensorFlow-to-PyTorch"], [23, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Transpile any model": [[40, "Transpile-any-model"]], "Round up": [[40, "Round-up"]], "Accelerating MMPreTrain models with JAX": [[20, "Accelerating-MMPreTrain-models-with-JAX"], [19, "Accelerating-MMPreTrain-models-with-JAX"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "ODSC Ivy Demo": [[43, "ODSC-Ivy-Demo"]], "Ivy as a Framework": [[43, "Ivy-as-a-Framework"]], "Ivy Backend Handler": [[43, "Ivy-Backend-Handler"], [33, "Ivy-Backend-Handler"]], "Data Structures": [[43, "Data-Structures"], [33, "Data-Structures"]], "Ivy Functional API": [[43, "Ivy-Functional-API"], [33, "Ivy-Functional-API"]], "Ivy Stateful API": [[43, "Ivy-Stateful-API"], [33, "Ivy-Stateful-API"]], "Graph Tracer": [[43, "Graph-Tracer"]], "Write Ivy code": [[33, "Write-Ivy-code"]], "Contents": [[33, "Contents"]], "Installing Ivy": [[33, "Installing-Ivy"]], "Importing Ivy": [[33, "Importing-Ivy"], [0, "Importing-Ivy"]], "How to use decorators": [[38, "How-to-use-decorators"]], "Graph Transpile": [[38, "Graph-Transpile"]], "Transpile \ud83d\udea7": [[38, "Transpile-\ud83d\udea7"]], "Training PyTorch ResNet in your TensorFlow Projects": [[23, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Transpiling a PyTorch model to TensorFlow": [[23, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "Load the Data": [[23, "Load-the-Data"]], "Visualize a few images": [[23, "Visualize-a-few-images"]], "Load the pre-trained model": [[23, "Load-the-pre-trained-model"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Using Ivy ResNet": [[22, "Using-Ivy-ResNet"], [21, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[22, "Prepare-the-set-of-labels"], [21, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[22, "Model-Inference-ResNet34"], [21, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[22, "Initializing-Native-Torch-ResNet34"], [21, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[22, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"], [21, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[22, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [22, "id1"], [21, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [21, "id1"]], "Model Inference ResNet50": [[22, "Model-Inference-ResNet50"], [21, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[22, "Initializing-Native-Torch-ResNet50"], [21, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[22, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"], [21, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "# Ivy Bert Demo": [[6, "#-Ivy-Bert-Demo"], [7, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[6, "Install-the-dependecies"], [7, "Install-the-dependecies"]], "Import the modules": [[6, "Import-the-modules"], [7, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[6, "Ivy-inference-with-Sequence-Classification"], [7, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[6, "Ivy-model-inference-with-tensorflow"], [7, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[6, "Ivy-model-inference-with-Jax"], [7, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[6, "Ivy-model-inference-with-torch"], [7, "Ivy-model-inference-with-torch"]], "Transpiling a Tensorflow model to build on top": [[29, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Transpiling a PyTorch model to build on top": [[27, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Accelerating XGBoost with JAX": [[26, "Accelerating-XGBoost-with-JAX"]], "Tests": [[26, "Tests"]], "Loading the Data": [[26, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[26, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[26, "JAX-backend"]], "Tensorflow backend": [[26, "Tensorflow-backend"]], "PyTorch backend": [[26, "PyTorch-backend"]], "More exhaustive example": [[26, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[26, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[26, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[26, "Comparison-of-Metrics"]], "Developing a convolutional network using Ivy": [[30, "Developing-a-convolutional-network-using-Ivy"]], "dev_util": [[210, "dev-util"]], "is_complex_dtype": [[184, "is-complex-dtype"]], "set_default_device": [[221, "set-default-device"]], "is_uint_dtype": [[189, "is-uint-dtype"]], "unset_default_complex_dtype": [[199, "unset-default-complex-dtype"]], "unset_default_dtype": [[200, "unset-default-dtype"]], "set_default_float_dtype": [[195, "set-default-float-dtype"]], "is_float_dtype": [[185, "is-float-dtype"]], "set_split_factor": [[223, "set-split-factor"]], "get_all_ivy_arrays_on_dev": [[213, "get-all-ivy-arrays-on-dev"]], "set_default_int_dtype": [[196, "set-default-int-dtype"]], "is_hashable_dtype": [[186, "is-hashable-dtype"]], "set_default_dtype": [[194, "set-default-dtype"]], "promote_types": [[190, "promote-types"]], "percent_used_mem_on_dev": [[219, "percent-used-mem-on-dev"]], "type_promote_arrays": [[198, "type-promote-arrays"]], "result_type": [[192, "result-type"]], "print_all_ivy_arrays_on_dev": [[220, "print-all-ivy-arrays-on-dev"]], "default_device": [[208, "default-device"]], "gpu_is_available": [[214, "gpu-is-available"]], "unset_default_int_dtype": [[202, "unset-default-int-dtype"]], "handle_soft_device_variable": [[215, "handle-soft-device-variable"]], "set_soft_device_mode": [[222, "set-soft-device-mode"]], "dev": [[209, "dev"]], "unset_default_float_dtype": [[201, "unset-default-float-dtype"]], "promote_types_of_inputs": [[191, "promote-types-of-inputs"]], "split_factor": [[224, "split-factor"]], "total_mem_on_dev": [[227, "total-mem-on-dev"]], "unset_default_uint_dtype": [[203, "unset-default-uint-dtype"]], "num_cpu_cores": [[216, "num-cpu-cores"]], "to_device": [[226, "to-device"]], "split_func_call": [[225, "split-func-call"]], "tpu_is_available": [[228, "tpu-is-available"]], "as_native_dev": [[206, "as-native-dev"]], "clear_cached_mem_on_dev": [[207, "clear-cached-mem-on-dev"]], "num_gpus": [[217, "num-gpus"]], "valid_dtype": [[204, "valid-dtype"]], "num_ivy_arrays_on_dev": [[218, "num-ivy-arrays-on-dev"]], "is_int_dtype": [[187, "is-int-dtype"]], "set_default_uint_dtype": [[197, "set-default-uint-dtype"]], "as_ivy_dev": [[205, "as-ivy-dev"]], "function_unsupported_devices": [[212, "function-unsupported-devices"]], "function_supported_devices": [[211, "function-supported-devices"]], "set_default_complex_dtype": [[193, "set-default-complex-dtype"]], "unset_default_device": [[229, "unset-default-device"]], "is_native_dtype": [[188, "is-native-dtype"]], "log": [[273, "log"]], "divide": [[252, "divide"]], "expm1": [[257, "expm1"]], "bitwise_right_shift": [[246, "bitwise-right-shift"]], "abs": [[232, "abs"]], "greater_equal": [[264, "greater-equal"]], "exp": [[255, "exp"]], "isnan": [[268, "isnan"]], "less": [[271, "less"]], "isinf": [[267, "isinf"]], "used_mem_on_dev": [[231, "used-mem-on-dev"]], "log1p": [[275, "log1p"]], "fmod": [[261, "fmod"]], "bitwise_left_shift": [[244, "bitwise-left-shift"]], "bitwise_invert": [[243, "bitwise-invert"]], "imag": [[265, "imag"]], "atan": [[239, "atan"]], "ceil": [[248, "ceil"]], "bitwise_or": [[245, "bitwise-or"]], "exp2": [[256, "exp2"]], "floor": [[258, "floor"]], "asinh": [[238, "asinh"]], "fmin": [[260, "fmin"]], "cosh": [[250, "cosh"]], "lcm": [[270, "lcm"]], "cos": [[249, "cos"]], "equal": [[253, "equal"]], "atan2": [[240, "atan2"]], "atanh": [[241, "atanh"]], "erf": [[254, "erf"]], "bitwise_xor": [[247, "bitwise-xor"]], "less_equal": [[272, "less-equal"]], "unset_soft_device_mode": [[230, "unset-soft-device-mode"]], "greater": [[263, "greater"]], "log10": [[274, "log10"]], "gcd": [[262, "gcd"]], "add": [[235, "add"]], "isfinite": [[266, "isfinite"]], "isreal": [[269, "isreal"]], "acosh": [[234, "acosh"]], "bitwise_and": [[242, "bitwise-and"]], "acos": [[233, "acos"]], "floor_divide": [[259, "floor-divide"]], "angle": [[236, "angle"]], "asin": [[237, "asin"]], "deg2rad": [[251, "deg2rad"]], "adaptive_max_pool2d": [[403, "adaptive-max-pool2d"]], "dropout2d": [[412, "dropout2d"]], "signbit": [[370, "signbit"]], "avg_pool3d": [[408, "avg-pool3d"]], "sinc": [[371, "sinc"]], "avg_pool2d": [[407, "avg-pool2d"]], "nextafter": [[369, "nextafter"]], "dropout1d": [[411, "dropout1d"]], "dct": [[409, "dct"]], "area_interpolate": [[405, "area-interpolate"]], "reduce": [[375, "reduce"]], "dft": [[410, "dft"]], "dropout3d": [[413, "dropout3d"]], "nansum": [[368, "nansum"]], "vjp": [[378, "vjp"]], "adaptive_avg_pool2d": [[402, "adaptive-avg-pool2d"]], "jvp": [[377, "jvp"]], "xlogy": [[373, "xlogy"]], "Sparse array": [[398, "sparse-array"]], "adaptive_max_pool3d": [[404, "adaptive-max-pool3d"]], "sparsify_tensor": [[372, "sparsify-tensor"]], "adaptive_avg_pool1d": [[401, "adaptive-avg-pool1d"]], "avg_pool1d": [[406, "avg-pool1d"]], "zeta": [[374, "zeta"]], "bind_custom_gradient_function": [[376, "bind-custom-gradient-function"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[63, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[63, "module-ivy.data_classes.array.activations"], [64, "module-ivy.data_classes.array.conversions"], [65, "module-ivy.data_classes.array.creation"], [66, "module-ivy.data_classes.array.data_type"], [67, "module-ivy.data_classes.array.device"], [68, "module-ivy.data_classes.array.elementwise"], [69, "module-ivy.data_classes.array.experimental"], [69, "module-ivy.data_classes.array.experimental.activations"], [69, "module-ivy.data_classes.array.experimental.conversions"], [69, "module-ivy.data_classes.array.experimental.creation"], [69, "module-ivy.data_classes.array.experimental.data_type"], [69, "module-ivy.data_classes.array.experimental.device"], [69, "module-ivy.data_classes.array.experimental.elementwise"], [69, "module-ivy.data_classes.array.experimental.general"], [69, "module-ivy.data_classes.array.experimental.gradients"], [69, "module-ivy.data_classes.array.experimental.image"], [69, "module-ivy.data_classes.array.experimental.layers"], [69, "module-ivy.data_classes.array.experimental.linear_algebra"], [69, "module-ivy.data_classes.array.experimental.losses"], [69, "module-ivy.data_classes.array.experimental.manipulation"], [69, "module-ivy.data_classes.array.experimental.norms"], [69, "module-ivy.data_classes.array.experimental.random"], [69, "module-ivy.data_classes.array.experimental.searching"], [69, "module-ivy.data_classes.array.experimental.set"], [69, "module-ivy.data_classes.array.experimental.sorting"], [69, "module-ivy.data_classes.array.experimental.statistical"], [69, "module-ivy.data_classes.array.experimental.utility"], [70, "module-ivy.data_classes.array.general"], [71, "module-ivy.data_classes.array.gradients"], [72, "module-ivy.data_classes.array.image"], [73, "module-ivy.data_classes.array.layers"], [74, "module-ivy.data_classes.array.linear_algebra"], [75, "module-ivy.data_classes.array.losses"], [76, "module-ivy.data_classes.array.manipulation"], [77, "module-ivy.data_classes.array.norms"], [78, "module-ivy.data_classes.array.random"], [79, "module-ivy.data_classes.array.searching"], [80, "module-ivy.data_classes.array.set"], [81, "module-ivy.data_classes.array.sorting"], [82, "module-ivy.data_classes.array.statistical"], [83, "module-ivy.data_classes.array.utility"], [84, "module-ivy.data_classes.array.wrapping"], [85, "module-ivy.data_classes.container.activations"], [86, "module-ivy.data_classes.container.base"], [87, "module-ivy.data_classes.container.conversions"], [88, "module-ivy.data_classes.container.creation"], [89, "module-ivy.data_classes.container.data_type"], [90, "module-ivy.data_classes.container.device"], [91, "module-ivy.data_classes.container.elementwise"], [92, "module-ivy.data_classes.container.experimental"], [92, "module-ivy.data_classes.container.experimental.activations"], [92, "module-ivy.data_classes.container.experimental.conversions"], [92, "module-ivy.data_classes.container.experimental.creation"], [92, "module-ivy.data_classes.container.experimental.data_type"], [92, "module-ivy.data_classes.container.experimental.device"], [92, "module-ivy.data_classes.container.experimental.elementwise"], [92, "module-ivy.data_classes.container.experimental.general"], [92, "module-ivy.data_classes.container.experimental.gradients"], [92, "module-ivy.data_classes.container.experimental.image"], [92, "module-ivy.data_classes.container.experimental.layers"], [92, "module-ivy.data_classes.container.experimental.linear_algebra"], [92, "module-ivy.data_classes.container.experimental.losses"], [92, "module-ivy.data_classes.container.experimental.manipulation"], [92, "module-ivy.data_classes.container.experimental.norms"], [92, "module-ivy.data_classes.container.experimental.random"], [92, "module-ivy.data_classes.container.experimental.searching"], [92, "module-ivy.data_classes.container.experimental.set"], [92, "module-ivy.data_classes.container.experimental.sorting"], [92, "module-ivy.data_classes.container.experimental.statistical"], [92, "module-ivy.data_classes.container.experimental.utility"], [93, "module-ivy.data_classes.container.general"], [94, "module-ivy.data_classes.container.gradients"], [95, "module-ivy.data_classes.container.image"], [96, "module-ivy.data_classes.container.layers"], [97, "module-ivy.data_classes.container.linear_algebra"], [98, "module-ivy.data_classes.container.losses"], [99, "module-ivy.data_classes.container.manipulation"], [100, "module-ivy.data_classes.container.norms"], [101, "module-ivy.data_classes.container.random"], [102, "module-ivy.data_classes.container.searching"], [103, "module-ivy.data_classes.container.set"], [104, "module-ivy.data_classes.container.sorting"], [105, "module-ivy.data_classes.container.statistical"], [106, "module-ivy.data_classes.container.utility"], [107, "module-ivy.data_classes.container.wrapping"], [108, "module-ivy.data_classes.factorized_tensor.base"], [109, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [110, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [111, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [112, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [113, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [114, "module-ivy.data_classes.array.array"], [115, "module-ivy.data_classes.container.container"], [117, "module-ivy.data_classes.nested_array.nested_array"], [118, "module-ivy.data_classes.nested_array.base"], [119, "module-ivy.data_classes.nested_array.elementwise"], [379, "module-ivy.functional.ivy.experimental.activations"], [380, "module-ivy.functional.ivy.experimental.constants"], [381, "module-ivy.functional.ivy.experimental.creation"], [382, "module-ivy.functional.ivy.experimental.data_type"], [383, "module-ivy.functional.ivy.experimental.device"], [384, "module-ivy.functional.ivy.experimental.elementwise"], [385, "module-ivy.functional.ivy.experimental.general"], [386, "module-ivy.functional.ivy.experimental.gradients"], [387, "module-ivy.functional.ivy.experimental.layers"], [388, "module-ivy.functional.ivy.experimental.linear_algebra"], [389, "module-ivy.functional.ivy.experimental.losses"], [390, "module-ivy.functional.ivy.experimental.manipulation"], [391, "module-ivy.functional.ivy.experimental.meta"], [392, "module-ivy.functional.ivy.experimental.nest"], [393, "module-ivy.functional.ivy.experimental.norms"], [394, "module-ivy.functional.ivy.experimental.random"], [395, "module-ivy.functional.ivy.experimental.searching"], [396, "module-ivy.functional.ivy.experimental.set"], [397, "module-ivy.functional.ivy.experimental.sorting"], [398, "module-ivy.functional.ivy.experimental.sparse_array"], [399, "module-ivy.functional.ivy.experimental.statistical"], [400, "module-ivy.functional.ivy.experimental.utility"], [638, "module-ivy.functional.ivy.activations"], [639, "module-ivy.functional.ivy.constants"], [640, "module-ivy.functional.ivy.control_flow_ops"], [641, "module-ivy.functional.ivy.creation"], [642, "module-ivy.functional.ivy.data_type"], [643, "module-ivy.functional.ivy.device"], [644, "module-ivy.functional.ivy.elementwise"], [645, "module-ivy.functional.ivy.experimental"], [646, "module-ivy.functional.ivy.general"], [647, "module-ivy.functional.ivy.gradients"], [648, "module-ivy.functional.ivy.layers"], [649, "module-ivy.functional.ivy.linear_algebra"], [650, "module-ivy.functional.ivy.losses"], [651, "module-ivy.functional.ivy.manipulation"], [652, "module-ivy.functional.ivy.meta"], [653, "module-ivy.functional.ivy.nest"], [654, "module-ivy.functional.ivy.norms"], [655, "module-ivy.functional.ivy.random"], [656, "module-ivy.functional.ivy.searching"], [657, "module-ivy.functional.ivy.set"], [658, "module-ivy.functional.ivy.sorting"], [659, "module-ivy.functional.ivy.statistical"], [660, "module-ivy.functional.ivy.utility"], [786, "module-ivy_tests.test_ivy.helpers.assertions"], [787, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [788, "module-ivy_tests.test_ivy.helpers.function_testing"], [789, "module-ivy_tests.test_ivy.helpers.globals"], [790, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [791, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [792, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [795, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [796, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [797, "module-ivy_tests.test_ivy.helpers.structs"], [798, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [799, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [803, "module-ivy.stateful.activations"], [804, "module-ivy.stateful.converters"], [805, "module-ivy.stateful.helpers"], [806, "module-ivy.stateful.initializers"], [807, "module-ivy.stateful.layers"], [808, "module-ivy.stateful.losses"], [809, "module-ivy.stateful.module"], [810, "module-ivy.stateful.norms"], [811, "module-ivy.stateful.optimizers"], [812, "module-ivy.stateful.sequential"], [813, "module-ivy.utils.assertions"], [814, "module-ivy.utils.backend"], [815, "module-ivy.utils.backend.ast_helpers"], [816, "module-ivy.utils.backend.handler"], [817, "module-ivy.utils.backend.sub_backend_handler"], [818, "module-ivy.utils.binaries"], [819, "module-ivy.utils.decorator_utils"], [820, "module-ivy.utils.dynamic_import"], [821, "module-ivy.utils.einsum_parser"], [822, "module-ivy.utils.einsum_path_helpers"], [823, "module-ivy.utils.exceptions"], [824, "module-ivy.utils.inspection"], [825, "module-ivy.utils.logging"], [826, "module-ivy.utils.profiler"], [827, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[63, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_data_to_new_backend() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions._data_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[64, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[64, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[65, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[65, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[66, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[66, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[67, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[67, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[67, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[67, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[67, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[68, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[68, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[69, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[69, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[69, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[69, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[69, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[69, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[69, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[69, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[69, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[69, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[69, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[69, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[69, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[69, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[69, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[69, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[69, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[69, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[69, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[69, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[69, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[69, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[69, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[69, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[69, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[69, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[69, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[69, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[69, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[69, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[69, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[69, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[69, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[69, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[69, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[69, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[69, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[69, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[69, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[69, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[69, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[69, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[69, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[69, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[69, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[69, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[69, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[69, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[69, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[69, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[69, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[69, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[69, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[69, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[69, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[69, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[70, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[70, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[71, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[71, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[72, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[72, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[72, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[73, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[73, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[74, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[74, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[75, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[75, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[75, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[75, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[75, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[75, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[76, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[76, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[77, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[77, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[77, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[77, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[78, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[78, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[78, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[78, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[78, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[78, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[78, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[78, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[79, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[79, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[80, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[80, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[80, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[80, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[80, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[80, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[80, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[81, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[81, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[81, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[81, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[81, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[81, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[81, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[82, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[82, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[83, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[83, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[83, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[83, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[83, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[84, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[84, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[84, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[85, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[85, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[86, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[86, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[86, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[86, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[86, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[86, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[86, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[86, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[87, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[87, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[87, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[87, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[87, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[87, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[87, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[88, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[88, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[89, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[89, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[90, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[90, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[90, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[90, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[90, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[90, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[90, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[91, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[91, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[92, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[92, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[92, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[92, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[92, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[92, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[92, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[92, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[92, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[92, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[92, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[92, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[92, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[92, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[92, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[92, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[92, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[92, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[92, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[92, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[92, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[92, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[92, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[92, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[92, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[92, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[92, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[92, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[92, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[92, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[92, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[92, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[92, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[92, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[92, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[92, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[92, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[92, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[92, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[92, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[92, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[92, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[92, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[92, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[92, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[92, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[92, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[92, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[92, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[92, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[92, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[92, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[92, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[92, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[92, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[92, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[92, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[92, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[92, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[92, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[92, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[92, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[93, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[93, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[94, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[94, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[95, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[95, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[95, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[96, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[96, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[97, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[97, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[98, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[98, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[99, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[99, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[100, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[100, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[100, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[100, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[101, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[101, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[101, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[101, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[102, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[102, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[103, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[103, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[103, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[103, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[103, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[103, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[103, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[103, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[103, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[103, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[103, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[104, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[104, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[105, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[105, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[106, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[106, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[106, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[106, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[106, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[106, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[106, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[107, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[107, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[107, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[108, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[108, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[109, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[109, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[110, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[110, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[111, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[111, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[112, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[112, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[113, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[113, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[114, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[114, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[114, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[114, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[115, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[115, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[115, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[117, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[117, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[117, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[117, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[117, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[118, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[118, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[119, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[119, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[119, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[119, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[122, "ivy.gelu"], [638, "ivy.gelu"]], "gelu() (ivy.array method)": [[122, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[122, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[123, "ivy.hardswish"], [638, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[123, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[123, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[124, "ivy.leaky_relu"], [638, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[124, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[124, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[125, "ivy.log_softmax"], [638, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[125, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[125, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[126, "ivy.mish"], [638, "ivy.mish"]], "mish() (ivy.array method)": [[126, "ivy.Array.mish"]], "mish() (ivy.container method)": [[126, "ivy.Container.mish"]], "relu() (in module ivy)": [[127, "ivy.relu"], [638, "ivy.relu"]], "relu() (ivy.array method)": [[127, "ivy.Array.relu"]], "relu() (ivy.container method)": [[127, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[128, "ivy.sigmoid"], [638, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[128, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[128, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[129, "ivy.softmax"], [638, "ivy.softmax"]], "softmax() (ivy.array method)": [[129, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[129, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[130, "ivy.softplus"], [638, "ivy.softplus"]], "softplus() (ivy.array method)": [[130, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[130, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[131, "ivy.softsign"], [638, "ivy.softsign"]], "cmp_is() (in module ivy)": [[132, "ivy.cmp_is"], [640, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[133, "ivy.cmp_isnot"], [640, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[134, "ivy.for_loop"], [640, "ivy.for_loop"]], "if_else() (in module ivy)": [[135, "ivy.if_else"], [640, "ivy.if_else"]], "try_except() (in module ivy)": [[136, "ivy.try_except"], [640, "ivy.try_except"]], "while_loop() (in module ivy)": [[137, "ivy.while_loop"], [640, "ivy.while_loop"]], "arange() (in module ivy)": [[138, "ivy.arange"], [641, "ivy.arange"]], "array() (in module ivy)": [[139, "ivy.array"], [641, "ivy.array"]], "asarray() (in module ivy)": [[140, "ivy.asarray"], [641, "ivy.asarray"]], "asarray() (ivy.array method)": [[140, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[140, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[141, "ivy.copy_array"], [641, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[141, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[141, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[142, "ivy.empty"], [641, "ivy.empty"]], "empty_like() (in module ivy)": [[143, "ivy.empty_like"], [641, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[143, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[143, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[144, "ivy.eye"], [641, "ivy.eye"]], "from_dlpack() (in module ivy)": [[145, "ivy.from_dlpack"], [641, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[145, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[145, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[146, "ivy.frombuffer"], [641, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[146, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[147, "ivy.full"], [641, "ivy.full"]], "full_like() (in module ivy)": [[148, "ivy.full_like"], [641, "ivy.full_like"]], "full_like() (ivy.array method)": [[148, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[148, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[149, "ivy.linspace"], [641, "ivy.linspace"]], "linspace() (ivy.array method)": [[149, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[149, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[150, "ivy.logspace"], [641, "ivy.logspace"]], "logspace() (ivy.array method)": [[150, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[150, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[151, "ivy.meshgrid"], [641, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[151, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[151, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[152, "ivy.native_array"], [641, "ivy.native_array"]], "native_array() (ivy.array method)": [[152, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[152, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[153, "ivy.one_hot"], [641, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[153, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[153, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[154, "ivy.ones"], [641, "ivy.ones"]], "ones_like() (in module ivy)": [[155, "ivy.ones_like"], [641, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[155, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[155, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[156, "ivy.to_dlpack"], [641, "ivy.to_dlpack"]], "tril() (in module ivy)": [[157, "ivy.tril"], [641, "ivy.tril"]], "tril() (ivy.array method)": [[157, "ivy.Array.tril"]], "tril() (ivy.container method)": [[157, "ivy.Container.tril"]], "triu() (in module ivy)": [[158, "ivy.triu"], [641, "ivy.triu"]], "triu() (ivy.array method)": [[158, "ivy.Array.triu"]], "triu() (ivy.container method)": [[158, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[159, "ivy.triu_indices"], [641, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[159, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[160, "ivy.zeros"], [641, "ivy.zeros"]], "zeros_like() (in module ivy)": [[161, "ivy.zeros_like"], [641, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[161, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[161, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[162, "ivy.as_ivy_dtype"], [642, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[163, "ivy.as_native_dtype"], [642, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[164, "ivy.astype"], [642, "ivy.astype"]], "astype() (ivy.array method)": [[164, "ivy.Array.astype"]], "astype() (ivy.container method)": [[164, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[165, "ivy.broadcast_arrays"], [642, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[165, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[165, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[166, "ivy.broadcast_to"], [642, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[166, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[166, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[167, "ivy.can_cast"], [642, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[167, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[167, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[168, "ivy.check_float"], [642, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[169, "ivy.closest_valid_dtype"], [642, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[170, "ivy.default_complex_dtype"], [642, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[171, "ivy.default_dtype"], [642, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[172, "ivy.default_float_dtype"], [642, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[173, "ivy.default_int_dtype"], [642, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[174, "ivy.default_uint_dtype"], [642, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[175, "ivy.dtype"], [642, "ivy.dtype"]], "dtype() (ivy.array method)": [[175, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[175, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[176, "ivy.dtype_bits"], [642, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[177, "ivy.finfo"], [642, "ivy.finfo"]], "finfo() (ivy.array method)": [[177, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[177, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[178, "ivy.function_supported_dtypes"], [642, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[179, "ivy.function_unsupported_dtypes"], [642, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[180, "ivy.iinfo"], [642, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[180, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[180, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[181, "ivy.infer_default_dtype"], [642, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[182, "ivy.invalid_dtype"], [642, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[183, "ivy.is_bool_dtype"], [642, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[183, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[183, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[184, "ivy.is_complex_dtype"], [642, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[184, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[185, "ivy.is_float_dtype"], [642, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[185, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[185, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[186, "ivy.is_hashable_dtype"], [642, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[187, "ivy.is_int_dtype"], [642, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[187, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[187, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[188, "ivy.is_native_dtype"], [642, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[189, "ivy.is_uint_dtype"], [642, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[189, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[189, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[190, "ivy.promote_types"], [642, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[191, "ivy.promote_types_of_inputs"], [642, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[192, "ivy.result_type"], [642, "ivy.result_type"]], "result_type() (ivy.array method)": [[192, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[192, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[193, "ivy.set_default_complex_dtype"], [642, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[194, "ivy.set_default_dtype"], [642, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[195, "ivy.set_default_float_dtype"], [642, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[196, "ivy.set_default_int_dtype"], [642, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[197, "ivy.set_default_uint_dtype"], [642, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[198, "ivy.type_promote_arrays"], [642, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[199, "ivy.unset_default_complex_dtype"], [642, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[200, "ivy.unset_default_dtype"], [642, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[201, "ivy.unset_default_float_dtype"], [642, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[202, "ivy.unset_default_int_dtype"], [642, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[203, "ivy.unset_default_uint_dtype"], [642, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[204, "ivy.valid_dtype"], [642, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[205, "ivy.as_ivy_dev"], [643, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[206, "ivy.as_native_dev"], [643, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[207, "ivy.clear_cached_mem_on_dev"], [643, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[208, "ivy.default_device"], [643, "ivy.default_device"]], "dev() (in module ivy)": [[209, "ivy.dev"], [643, "ivy.dev"]], "dev() (ivy.array method)": [[209, "ivy.Array.dev"]], "dev() (ivy.container method)": [[209, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[210, "ivy.dev_util"], [643, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[211, "ivy.function_supported_devices"], [643, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[212, "ivy.function_unsupported_devices"], [643, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[213, "ivy.get_all_ivy_arrays_on_dev"], [643, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[214, "ivy.gpu_is_available"], [643, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[215, "ivy.handle_soft_device_variable"], [643, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[216, "ivy.num_cpu_cores"], [643, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[217, "ivy.num_gpus"], [643, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[218, "ivy.num_ivy_arrays_on_dev"], [643, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[219, "ivy.percent_used_mem_on_dev"], [643, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[220, "ivy.print_all_ivy_arrays_on_dev"], [643, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[221, "ivy.set_default_device"], [643, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[222, "ivy.set_soft_device_mode"], [643, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[223, "ivy.set_split_factor"], [643, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[224, "ivy.split_factor"], [643, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[225, "ivy.split_func_call"], [643, "ivy.split_func_call"]], "to_device() (in module ivy)": [[226, "ivy.to_device"], [643, "ivy.to_device"]], "to_device() (ivy.array method)": [[226, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[226, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[227, "ivy.total_mem_on_dev"], [643, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[228, "ivy.tpu_is_available"], [643, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[229, "ivy.unset_default_device"], [643, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[230, "ivy.unset_soft_device_mode"], [643, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[231, "ivy.used_mem_on_dev"], [643, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[232, "ivy.abs"], [644, "ivy.abs"]], "abs() (ivy.array method)": [[232, "ivy.Array.abs"]], "abs() (ivy.container method)": [[232, "ivy.Container.abs"]], "acos() (in module ivy)": [[233, "ivy.acos"], [644, "ivy.acos"]], "acos() (ivy.array method)": [[233, "ivy.Array.acos"]], "acos() (ivy.container method)": [[233, "ivy.Container.acos"]], "acosh() (in module ivy)": [[234, "ivy.acosh"], [644, "ivy.acosh"]], "acosh() (ivy.array method)": [[234, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[234, "ivy.Container.acosh"]], "add() (in module ivy)": [[235, "ivy.add"], [644, "ivy.add"]], "add() (ivy.array method)": [[235, "ivy.Array.add"]], "add() (ivy.container method)": [[235, "ivy.Container.add"]], "angle() (in module ivy)": [[236, "ivy.angle"], [644, "ivy.angle"]], "angle() (ivy.array method)": [[236, "ivy.Array.angle"]], "angle() (ivy.container method)": [[236, "ivy.Container.angle"]], "asin() (in module ivy)": [[237, "ivy.asin"], [644, "ivy.asin"]], "asin() (ivy.array method)": [[237, "ivy.Array.asin"]], "asin() (ivy.container method)": [[237, "ivy.Container.asin"]], "asinh() (in module ivy)": [[238, "ivy.asinh"], [644, "ivy.asinh"]], "asinh() (ivy.array method)": [[238, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[238, "ivy.Container.asinh"]], "atan() (in module ivy)": [[239, "ivy.atan"], [644, "ivy.atan"]], "atan() (ivy.array method)": [[239, "ivy.Array.atan"]], "atan() (ivy.container method)": [[239, "ivy.Container.atan"]], "atan2() (in module ivy)": [[240, "ivy.atan2"], [644, "ivy.atan2"]], "atan2() (ivy.array method)": [[240, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[240, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[241, "ivy.atanh"], [644, "ivy.atanh"]], "atanh() (ivy.array method)": [[241, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[241, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[242, "ivy.bitwise_and"], [644, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[242, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[242, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[243, "ivy.bitwise_invert"], [644, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[243, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[243, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[244, "ivy.bitwise_left_shift"], [644, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[244, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[244, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[245, "ivy.bitwise_or"], [644, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[245, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[245, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[246, "ivy.bitwise_right_shift"], [644, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[246, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[246, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[247, "ivy.bitwise_xor"], [644, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[247, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[247, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[248, "ivy.ceil"], [644, "ivy.ceil"]], "ceil() (ivy.array method)": [[248, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[248, "ivy.Container.ceil"]], "cos() (in module ivy)": [[249, "ivy.cos"], [644, "ivy.cos"]], "cos() (ivy.array method)": [[249, "ivy.Array.cos"]], "cos() (ivy.container method)": [[249, "ivy.Container.cos"]], "cosh() (in module ivy)": [[250, "ivy.cosh"], [644, "ivy.cosh"]], "cosh() (ivy.array method)": [[250, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[250, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[251, "ivy.deg2rad"], [644, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[251, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[251, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[252, "ivy.divide"], [644, "ivy.divide"]], "divide() (ivy.array method)": [[252, "ivy.Array.divide"]], "divide() (ivy.container method)": [[252, "ivy.Container.divide"]], "equal() (in module ivy)": [[253, "ivy.equal"], [644, "ivy.equal"]], "equal() (ivy.array method)": [[253, "ivy.Array.equal"]], "equal() (ivy.container method)": [[253, "ivy.Container.equal"]], "erf() (in module ivy)": [[254, "ivy.erf"], [644, "ivy.erf"]], "erf() (ivy.array method)": [[254, "ivy.Array.erf"]], "erf() (ivy.container method)": [[254, "ivy.Container.erf"]], "exp() (in module ivy)": [[255, "ivy.exp"], [644, "ivy.exp"]], "exp() (ivy.array method)": [[255, "ivy.Array.exp"]], "exp() (ivy.container method)": [[255, "ivy.Container.exp"]], "exp2() (in module ivy)": [[256, "ivy.exp2"], [644, "ivy.exp2"]], "exp2() (ivy.array method)": [[256, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[256, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[257, "ivy.expm1"], [644, "ivy.expm1"]], "expm1() (ivy.array method)": [[257, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[257, "ivy.Container.expm1"]], "floor() (in module ivy)": [[258, "ivy.floor"], [644, "ivy.floor"]], "floor() (ivy.array method)": [[258, "ivy.Array.floor"]], "floor() (ivy.container method)": [[258, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[259, "ivy.floor_divide"], [644, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[259, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[259, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[260, "ivy.fmin"], [644, "ivy.fmin"]], "fmin() (ivy.array method)": [[260, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[260, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[261, "ivy.fmod"], [644, "ivy.fmod"]], "fmod() (ivy.array method)": [[261, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[261, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[262, "ivy.gcd"], [644, "ivy.gcd"]], "gcd() (ivy.array method)": [[262, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[262, "ivy.Container.gcd"]], "greater() (in module ivy)": [[263, "ivy.greater"], [644, "ivy.greater"]], "greater() (ivy.array method)": [[263, "ivy.Array.greater"]], "greater() (ivy.container method)": [[263, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[264, "ivy.greater_equal"], [644, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[264, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[264, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[265, "ivy.imag"], [644, "ivy.imag"]], "imag() (ivy.array method)": [[265, "ivy.Array.imag"]], "imag() (ivy.container method)": [[265, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[266, "ivy.isfinite"], [644, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[266, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[266, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[267, "ivy.isinf"], [644, "ivy.isinf"]], "isinf() (ivy.array method)": [[267, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[267, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[268, "ivy.isnan"], [644, "ivy.isnan"]], "isnan() (ivy.array method)": [[268, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[268, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[269, "ivy.isreal"], [644, "ivy.isreal"]], "isreal() (ivy.array method)": [[269, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[269, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[270, "ivy.lcm"], [644, "ivy.lcm"]], "lcm() (ivy.array method)": [[270, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[270, "ivy.Container.lcm"]], "less() (in module ivy)": [[271, "ivy.less"], [644, "ivy.less"]], "less() (ivy.array method)": [[271, "ivy.Array.less"]], "less() (ivy.container method)": [[271, "ivy.Container.less"]], "less_equal() (in module ivy)": [[272, "ivy.less_equal"], [644, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[272, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[272, "ivy.Container.less_equal"]], "log() (in module ivy)": [[273, "ivy.log"], [644, "ivy.log"]], "log() (ivy.array method)": [[273, "ivy.Array.log"]], "log() (ivy.container method)": [[273, "ivy.Container.log"]], "log10() (in module ivy)": [[274, "ivy.log10"], [644, "ivy.log10"]], "log10() (ivy.array method)": [[274, "ivy.Array.log10"]], "log10() (ivy.container method)": [[274, "ivy.Container.log10"]], "log1p() (in module ivy)": [[275, "ivy.log1p"], [644, "ivy.log1p"]], "log1p() (ivy.array method)": [[275, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[275, "ivy.Container.log1p"]], "log2() (in module ivy)": [[276, "ivy.log2"], [644, "ivy.log2"]], "log2() (ivy.array method)": [[276, "ivy.Array.log2"]], "log2() (ivy.container method)": [[276, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[277, "ivy.logaddexp"], [644, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[277, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[277, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[278, "ivy.logaddexp2"], [644, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[278, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[278, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[279, "ivy.logical_and"], [644, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[279, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[279, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[280, "ivy.logical_not"], [644, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[280, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[280, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[281, "ivy.logical_or"], [644, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[281, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[281, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[282, "ivy.logical_xor"], [644, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[282, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[282, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[283, "ivy.maximum"], [644, "ivy.maximum"]], "maximum() (ivy.array method)": [[283, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[283, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[284, "ivy.minimum"], [644, "ivy.minimum"]], "minimum() (ivy.array method)": [[284, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[284, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[285, "ivy.multiply"], [644, "ivy.multiply"]], "multiply() (ivy.array method)": [[285, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[285, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[286, "ivy.nan_to_num"], [644, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[286, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[286, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[287, "ivy.negative"], [644, "ivy.negative"]], "negative() (ivy.array method)": [[287, "ivy.Array.negative"]], "negative() (ivy.container method)": [[287, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[288, "ivy.not_equal"], [644, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[288, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[288, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[289, "ivy.positive"], [644, "ivy.positive"]], "positive() (ivy.array method)": [[289, "ivy.Array.positive"]], "positive() (ivy.container method)": [[289, "ivy.Container.positive"]], "pow() (in module ivy)": [[290, "ivy.pow"], [644, "ivy.pow"]], "pow() (ivy.array method)": [[290, "ivy.Array.pow"]], "pow() (ivy.container method)": [[290, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[291, "ivy.rad2deg"], [644, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[291, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[291, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[292, "ivy.real"], [644, "ivy.real"]], "real() (ivy.array method)": [[292, "ivy.Array.real"]], "real() (ivy.container method)": [[292, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[293, "ivy.reciprocal"], [644, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[293, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[293, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[294, "ivy.remainder"], [644, "ivy.remainder"]], "remainder() (ivy.array method)": [[294, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[294, "ivy.Container.remainder"]], "round() (in module ivy)": [[295, "ivy.round"], [644, "ivy.round"]], "round() (ivy.array method)": [[295, "ivy.Array.round"]], "round() (ivy.container method)": [[295, "ivy.Container.round"]], "sign() (in module ivy)": [[296, "ivy.sign"], [644, "ivy.sign"]], "sign() (ivy.array method)": [[296, "ivy.Array.sign"]], "sign() (ivy.container method)": [[296, "ivy.Container.sign"]], "sin() (in module ivy)": [[297, "ivy.sin"], [644, "ivy.sin"]], "sin() (ivy.array method)": [[297, "ivy.Array.sin"]], "sin() (ivy.container method)": [[297, "ivy.Container.sin"]], "sinh() (in module ivy)": [[298, "ivy.sinh"], [644, "ivy.sinh"]], "sinh() (ivy.array method)": [[298, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[298, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[299, "ivy.sqrt"], [644, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[299, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[299, "ivy.Container.sqrt"]], "square() (in module ivy)": [[300, "ivy.square"], [644, "ivy.square"]], "square() (ivy.array method)": [[300, "ivy.Array.square"]], "square() (ivy.container method)": [[300, "ivy.Container.square"]], "subtract() (in module ivy)": [[301, "ivy.subtract"], [644, "ivy.subtract"]], "subtract() (ivy.array method)": [[301, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[301, "ivy.Container.subtract"]], "tan() (in module ivy)": [[302, "ivy.tan"], [644, "ivy.tan"]], "tan() (ivy.array method)": [[302, "ivy.Array.tan"]], "tan() (ivy.container method)": [[302, "ivy.Container.tan"]], "tanh() (in module ivy)": [[303, "ivy.tanh"], [644, "ivy.tanh"]], "tanh() (ivy.array method)": [[303, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[303, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[304, "ivy.trapz"], [644, "ivy.trapz"]], "trapz() (ivy.array method)": [[304, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[304, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[305, "ivy.trunc"], [644, "ivy.trunc"]], "trunc() (ivy.array method)": [[305, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[305, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[306, "ivy.trunc_divide"], [644, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[306, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[306, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[307, "ivy.celu"], [379, "ivy.celu"]], "celu() (ivy.array method)": [[307, "ivy.Array.celu"]], "celu() (ivy.container method)": [[307, "ivy.Container.celu"]], "elu() (in module ivy)": [[308, "ivy.elu"], [379, "ivy.elu"]], "elu() (ivy.array method)": [[308, "ivy.Array.elu"]], "elu() (ivy.container method)": [[308, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[309, "ivy.hardshrink"], [379, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[309, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[309, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[310, "ivy.hardsilu"], [379, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[310, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[310, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[311, "ivy.hardtanh"], [379, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[311, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[311, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[312, "ivy.logit"], [379, "ivy.logit"]], "logit() (ivy.array method)": [[312, "ivy.Array.logit"]], "logit() (ivy.container method)": [[312, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[313, "ivy.logsigmoid"], [379, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[313, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[313, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[314, "ivy.prelu"], [379, "ivy.prelu"]], "prelu() (ivy.array method)": [[314, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[314, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[315, "ivy.relu6"], [379, "ivy.relu6"]], "relu6() (ivy.array method)": [[315, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[315, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[316, "ivy.scaled_tanh"], [379, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[316, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[316, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[317, "ivy.selu"], [379, "ivy.selu"]], "selu() (ivy.array method)": [[317, "ivy.Array.selu"]], "selu() (ivy.container method)": [[317, "ivy.Container.selu"]], "silu() (in module ivy)": [[318, "ivy.silu"], [379, "ivy.silu"]], "silu() (ivy.array method)": [[318, "ivy.Array.silu"]], "silu() (ivy.container method)": [[318, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[319, "ivy.softshrink"], [379, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[319, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[319, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[320, "ivy.stanh"], [379, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[321, "ivy.tanhshrink"], [379, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[321, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[321, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[322, "ivy.threshold"], [379, "ivy.threshold"]], "threshold() (ivy.array method)": [[322, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[322, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[323, "ivy.thresholded_relu"], [379, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[323, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[323, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[324, "ivy.blackman_window"], [381, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[324, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[324, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[325, "ivy.eye_like"], [381, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[325, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[325, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[326, "ivy.hamming_window"], [381, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[326, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[327, "ivy.hann_window"], [381, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[327, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[328, "ivy.indices"], [381, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[329, "ivy.kaiser_bessel_derived_window"], [381, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[329, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[330, "ivy.kaiser_window"], [381, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[330, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[331, "ivy.mel_weight_matrix"], [381, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[331, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[331, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[332, "ivy.ndenumerate"], [381, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[333, "ivy.ndindex"], [381, "ivy.ndindex"]], "polyval() (in module ivy)": [[334, "ivy.polyval"], [381, "ivy.polyval"]], "polyval() (ivy.container method)": [[334, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[335, "ivy.random_cp"], [381, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[336, "ivy.random_parafac2"], [381, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[337, "ivy.random_tr"], [381, "ivy.random_tr"]], "random_tt() (in module ivy)": [[338, "ivy.random_tt"], [381, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[339, "ivy.random_tucker"], [381, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[340, "ivy.tril_indices"], [381, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[340, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[341, "ivy.trilu"], [381, "ivy.trilu"]], "trilu() (ivy.array method)": [[341, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[341, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[342, "ivy.unsorted_segment_mean"], [381, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[342, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[342, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[343, "ivy.unsorted_segment_min"], [381, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[343, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[343, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[344, "ivy.unsorted_segment_sum"], [381, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[344, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[344, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[345, "ivy.vorbis_window"], [381, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[345, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[346, "ivy.allclose"], [384, "ivy.allclose"]], "allclose() (ivy.array method)": [[346, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[346, "ivy.Container.allclose"]], "amax() (in module ivy)": [[347, "ivy.amax"], [384, "ivy.amax"]], "amax() (ivy.array method)": [[347, "ivy.Array.amax"]], "amax() (ivy.container method)": [[347, "ivy.Container.amax"]], "amin() (in module ivy)": [[348, "ivy.amin"], [384, "ivy.amin"]], "amin() (ivy.array method)": [[348, "ivy.Array.amin"]], "amin() (ivy.container method)": [[348, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[349, "ivy.binarizer"], [384, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[349, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[349, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[350, "ivy.conj"], [384, "ivy.conj"]], "conj() (ivy.array method)": [[350, "ivy.Array.conj"]], "conj() (ivy.container method)": [[350, "ivy.Container.conj"]], "copysign() (in module ivy)": [[351, "ivy.copysign"], [384, "ivy.copysign"]], "copysign() (ivy.array method)": [[351, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[351, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[352, "ivy.count_nonzero"], [384, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[352, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[352, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[353, "ivy.diff"], [384, "ivy.diff"]], "diff() (ivy.array method)": [[353, "ivy.Array.diff"]], "diff() (ivy.container method)": [[353, "ivy.Container.diff"]], "digamma() (in module ivy)": [[354, "ivy.digamma"], [384, "ivy.digamma"]], "digamma() (ivy.array method)": [[354, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[354, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[355, "ivy.erfc"], [384, "ivy.erfc"]], "erfc() (ivy.array method)": [[355, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[355, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[356, "ivy.erfinv"], [384, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[356, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[356, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[357, "ivy.fix"], [384, "ivy.fix"]], "fix() (ivy.array method)": [[357, "ivy.Array.fix"]], "fix() (ivy.container method)": [[357, "ivy.Container.fix"]], "float_power() (in module ivy)": [[358, "ivy.float_power"], [384, "ivy.float_power"]], "float_power() (ivy.array method)": [[358, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[358, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[359, "ivy.fmax"], [384, "ivy.fmax"]], "fmax() (ivy.array method)": [[359, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[359, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[360, "ivy.frexp"], [384, "ivy.frexp"]], "frexp() (ivy.array method)": [[360, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[360, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[361, "ivy.gradient"], [384, "ivy.gradient"]], "gradient() (ivy.array method)": [[361, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[361, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[362, "ivy.hypot"], [384, "ivy.hypot"]], "hypot() (ivy.array method)": [[362, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[362, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[363, "ivy.isclose"], [384, "ivy.isclose"]], "isclose() (ivy.array method)": [[363, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[363, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[364, "ivy.ldexp"], [384, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[364, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[364, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[365, "ivy.lerp"], [384, "ivy.lerp"]], "lerp() (ivy.array method)": [[365, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[365, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[366, "ivy.lgamma"], [384, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[366, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[366, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[367, "ivy.modf"], [384, "ivy.modf"]], "modf() (ivy.array method)": [[367, "ivy.Array.modf"]], "modf() (ivy.container method)": [[367, "ivy.Container.modf"]], "nansum() (in module ivy)": [[368, "ivy.nansum"], [384, "ivy.nansum"]], "nansum() (ivy.array method)": [[368, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[368, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[369, "ivy.nextafter"], [384, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[369, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[369, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[370, "ivy.signbit"], [384, "ivy.signbit"]], "signbit() (ivy.array method)": [[370, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[370, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[371, "ivy.sinc"], [384, "ivy.sinc"]], "sinc() (ivy.array method)": [[371, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[371, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[372, "ivy.sparsify_tensor"], [384, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[372, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[372, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[373, "ivy.xlogy"], [384, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[373, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[373, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[374, "ivy.zeta"], [384, "ivy.zeta"]], "zeta() (ivy.array method)": [[374, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[374, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[375, "ivy.reduce"], [385, "ivy.reduce"]], "reduce() (ivy.array method)": [[375, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[375, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[376, "ivy.bind_custom_gradient_function"], [386, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[377, "ivy.jvp"], [386, "ivy.jvp"]], "vjp() (in module ivy)": [[378, "ivy.vjp"], [386, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[379, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[380, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[381, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[382, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[383, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[384, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[385, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[386, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[387, "ivy.adaptive_avg_pool1d"], [401, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[387, "ivy.adaptive_avg_pool2d"], [402, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[387, "ivy.adaptive_max_pool2d"], [403, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[387, "ivy.adaptive_max_pool3d"], [404, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[387, "ivy.area_interpolate"], [405, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[387, "ivy.avg_pool1d"], [406, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[387, "ivy.avg_pool2d"], [407, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[387, "ivy.avg_pool3d"], [408, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[387, "ivy.dct"], [409, "ivy.dct"]], "dft() (in module ivy)": [[387, "ivy.dft"], [410, "ivy.dft"]], "dropout1d() (in module ivy)": [[387, "ivy.dropout1d"], [411, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[387, "ivy.dropout2d"], [412, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[387, "ivy.dropout3d"], [413, "ivy.dropout3d"]], "embedding() (in module ivy)": [[387, "ivy.embedding"], [414, "ivy.embedding"]], "fft() (in module ivy)": [[387, "ivy.fft"], [415, "ivy.fft"]], "fft2() (in module ivy)": [[387, "ivy.fft2"], [416, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[387, "ivy.generate_einsum_equation"], [417, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[387, "ivy.get_interpolate_kernel"], [418, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[387, "ivy.idct"], [419, "ivy.idct"]], "ifft() (in module ivy)": [[387, "ivy.ifft"], [420, "ivy.ifft"]], "ifftn() (in module ivy)": [[387, "ivy.ifftn"], [421, "ivy.ifftn"]], "interp() (in module ivy)": [[387, "ivy.interp"], [422, "ivy.interp"]], "interpolate() (in module ivy)": [[387, "ivy.interpolate"], [423, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[387, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[387, "ivy.max_pool1d"], [424, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[387, "ivy.max_pool2d"], [425, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[387, "ivy.max_pool3d"], [426, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[387, "ivy.max_unpool1d"], [427, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[387, "ivy.nearest_interpolate"], [428, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[387, "ivy.pool"], [429, "ivy.pool"]], "reduce_window() (in module ivy)": [[387, "ivy.reduce_window"], [430, "ivy.reduce_window"]], "rfft() (in module ivy)": [[387, "ivy.rfft"], [431, "ivy.rfft"]], "rfftn() (in module ivy)": [[387, "ivy.rfftn"], [432, "ivy.rfftn"]], "rnn() (in module ivy)": [[387, "ivy.rnn"], [433, "ivy.rnn"]], "sliding_window() (in module ivy)": [[387, "ivy.sliding_window"], [434, "ivy.sliding_window"]], "stft() (in module ivy)": [[387, "ivy.stft"], [435, "ivy.stft"]], "adjoint() (in module ivy)": [[388, "ivy.adjoint"], [436, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[388, "ivy.batched_outer"], [437, "ivy.batched_outer"]], "cond() (in module ivy)": [[388, "ivy.cond"], [438, "ivy.cond"]], "diagflat() (in module ivy)": [[388, "ivy.diagflat"], [439, "ivy.diagflat"]], "dot() (in module ivy)": [[388, "ivy.dot"], [440, "ivy.dot"]], "eig() (in module ivy)": [[388, "ivy.eig"], [441, "ivy.eig"], [649, "ivy.eig"], [684, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[388, "ivy.eigh_tridiagonal"], [442, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[388, "ivy.eigvals"], [443, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[388, "ivy.general_inner_product"], [444, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[388, "ivy.higher_order_moment"], [445, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[388, "ivy.initialize_tucker"], [446, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[388, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[388, "ivy.khatri_rao"], [447, "ivy.khatri_rao"]], "kron() (in module ivy)": [[388, "ivy.kron"], [448, "ivy.kron"]], "kronecker() (in module ivy)": [[388, "ivy.kronecker"], [449, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[388, "ivy.lu_factor"], [450, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[388, "ivy.lu_solve"], [451, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[388, "ivy.make_svd_non_negative"], [452, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[388, "ivy.matrix_exp"], [453, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[388, "ivy.mode_dot"], [454, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[388, "ivy.multi_dot"], [455, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[388, "ivy.multi_mode_dot"], [456, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[388, "ivy.partial_tucker"], [457, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[388, "ivy.solve_triangular"], [458, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[388, "ivy.svd_flip"], [459, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[388, "ivy.tensor_train"], [460, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[388, "ivy.truncated_svd"], [461, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[388, "ivy.tt_matrix_to_tensor"], [462, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[388, "ivy.tucker"], [463, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[389, "ivy.hinge_embedding_loss"], [464, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[389, "ivy.huber_loss"], [465, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[389, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[389, "ivy.kl_div"], [466, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[389, "ivy.l1_loss"], [467, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[389, "ivy.log_poisson_loss"], [468, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[389, "ivy.poisson_nll_loss"], [469, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[389, "ivy.smooth_l1_loss"], [470, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[389, "ivy.soft_margin_loss"], [471, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[390, "ivy.as_strided"], [472, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[390, "ivy.associative_scan"], [473, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[390, "ivy.atleast_1d"], [474, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[390, "ivy.atleast_2d"], [475, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[390, "ivy.atleast_3d"], [476, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[390, "ivy.broadcast_shapes"], [477, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[390, "ivy.check_scalar"], [478, "ivy.check_scalar"]], "choose() (in module ivy)": [[390, "ivy.choose"], [479, "ivy.choose"]], "column_stack() (in module ivy)": [[390, "ivy.column_stack"], [480, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[390, "ivy.concat_from_sequence"], [481, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[390, "ivy.dsplit"], [482, "ivy.dsplit"]], "dstack() (in module ivy)": [[390, "ivy.dstack"], [483, "ivy.dstack"]], "expand() (in module ivy)": [[390, "ivy.expand"], [484, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[390, "ivy.fill_diagonal"], [485, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[390, "ivy.flatten"], [486, "ivy.flatten"]], "fliplr() (in module ivy)": [[390, "ivy.fliplr"], [487, "ivy.fliplr"]], "flipud() (in module ivy)": [[390, "ivy.flipud"], [488, "ivy.flipud"]], "fold() (in module ivy)": [[390, "ivy.fold"], [489, "ivy.fold"]], "heaviside() (in module ivy)": [[390, "ivy.heaviside"], [490, "ivy.heaviside"]], "hsplit() (in module ivy)": [[390, "ivy.hsplit"], [491, "ivy.hsplit"]], "hstack() (in module ivy)": [[390, "ivy.hstack"], [492, "ivy.hstack"]], "i0() (in module ivy)": [[390, "ivy.i0"], [493, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[390, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[390, "ivy.matricize"], [494, "ivy.matricize"]], "moveaxis() (in module ivy)": [[390, "ivy.moveaxis"], [495, "ivy.moveaxis"]], "pad() (in module ivy)": [[390, "ivy.pad"], [496, "ivy.pad"]], "partial_fold() (in module ivy)": [[390, "ivy.partial_fold"], [497, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[390, "ivy.partial_tensor_to_vec"], [498, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[390, "ivy.partial_unfold"], [499, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[390, "ivy.partial_vec_to_tensor"], [500, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[390, "ivy.put_along_axis"], [501, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[390, "ivy.rot90"], [502, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[390, "ivy.soft_thresholding"], [503, "ivy.soft_thresholding"]], "take() (in module ivy)": [[390, "ivy.take"], [504, "ivy.take"]], "take_along_axis() (in module ivy)": [[390, "ivy.take_along_axis"], [505, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[390, "ivy.top_k"], [506, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[390, "ivy.trim_zeros"], [507, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[390, "ivy.unflatten"], [508, "ivy.unflatten"]], "unfold() (in module ivy)": [[390, "ivy.unfold"], [509, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[390, "ivy.unique_consecutive"], [510, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[390, "ivy.vsplit"], [511, "ivy.vsplit"]], "vstack() (in module ivy)": [[390, "ivy.vstack"], [512, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[391, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[392, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[393, "ivy.batch_norm"], [513, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[393, "ivy.group_norm"], [514, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[393, "ivy.instance_norm"], [515, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[393, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[393, "ivy.l1_normalize"], [516, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[393, "ivy.l2_normalize"], [517, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[393, "ivy.local_response_norm"], [518, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[393, "ivy.lp_normalize"], [519, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[394, "ivy.bernoulli"], [520, "ivy.bernoulli"]], "beta() (in module ivy)": [[394, "ivy.beta"], [521, "ivy.beta"]], "dirichlet() (in module ivy)": [[394, "ivy.dirichlet"], [522, "ivy.dirichlet"]], "gamma() (in module ivy)": [[394, "ivy.gamma"], [523, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[394, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[394, "ivy.poisson"], [524, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[395, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[395, "ivy.unravel_index"], [525, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[396, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[397, "ivy.invert_permutation"], [526, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[397, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[397, "ivy.lexsort"], [527, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[398, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[398, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[398, "ivy.is_ivy_sparse_array"], [528, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[398, "ivy.is_native_sparse_array"], [529, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[398, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[398, "ivy.native_sparse_array"], [530, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[398, "ivy.native_sparse_array_to_indices_values_and_shape"], [531, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[399, "ivy.bincount"], [532, "ivy.bincount"]], "corrcoef() (in module ivy)": [[399, "ivy.corrcoef"], [533, "ivy.corrcoef"]], "cov() (in module ivy)": [[399, "ivy.cov"], [534, "ivy.cov"]], "cummax() (in module ivy)": [[399, "ivy.cummax"], [535, "ivy.cummax"]], "cummin() (in module ivy)": [[399, "ivy.cummin"], [536, "ivy.cummin"]], "histogram() (in module ivy)": [[399, "ivy.histogram"], [537, "ivy.histogram"]], "igamma() (in module ivy)": [[399, "ivy.igamma"], [538, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[399, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[399, "ivy.median"], [539, "ivy.median"]], "nanmean() (in module ivy)": [[399, "ivy.nanmean"], [540, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[399, "ivy.nanmedian"], [541, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[399, "ivy.nanmin"], [542, "ivy.nanmin"]], "nanprod() (in module ivy)": [[399, "ivy.nanprod"], [543, "ivy.nanprod"]], "quantile() (in module ivy)": [[399, "ivy.quantile"], [544, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[400, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[400, "ivy.optional_get_element"], [545, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[401, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[401, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[402, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[402, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[403, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[403, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[404, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[404, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[406, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[406, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[407, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[407, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[408, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[408, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[409, "ivy.Array.dct"]], "dct() (ivy.container method)": [[409, "ivy.Container.dct"]], "dft() (ivy.array method)": [[410, "ivy.Array.dft"]], "dft() (ivy.container method)": [[410, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[411, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[411, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[412, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[412, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[413, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[413, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[414, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[414, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[415, "ivy.Array.fft"]], "fft() (ivy.container method)": [[415, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[416, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[419, "ivy.Array.idct"]], "idct() (ivy.container method)": [[419, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[420, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[420, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[421, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[421, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[423, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[423, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[424, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[424, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[425, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[425, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[426, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[426, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[427, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[427, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[430, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[430, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[431, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[431, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[432, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[432, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[434, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[434, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[435, "ivy.Array.stft"]], "stft() (ivy.container method)": [[435, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[436, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[436, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[437, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[437, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[438, "ivy.Array.cond"]], "cond() (ivy.container method)": [[438, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[439, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[439, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[440, "ivy.Array.dot"]], "dot() (ivy.container method)": [[440, "ivy.Container.dot"]], "eig() (ivy.array method)": [[441, "ivy.Array.eig"], [684, "ivy.Array.eig"]], "eig() (ivy.container method)": [[441, "ivy.Container.eig"], [684, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[442, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[442, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[443, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[443, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[444, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[444, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[445, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[445, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[446, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[446, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[448, "ivy.Array.kron"]], "kron() (ivy.container method)": [[448, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[452, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[452, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[453, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[453, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[454, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[454, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[455, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[455, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[456, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[456, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[457, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[457, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[459, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[459, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[460, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[460, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[461, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[461, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[462, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[462, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[463, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[463, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[464, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[464, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[465, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[465, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[466, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[466, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[467, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[467, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[468, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[468, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[469, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[469, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[470, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[470, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[471, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[471, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[472, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[472, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[473, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[473, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[474, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[474, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[475, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[475, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[476, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[476, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[477, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[480, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[480, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[481, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[481, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[482, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[482, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[483, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[483, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[484, "ivy.Array.expand"]], "expand() (ivy.container method)": [[484, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[485, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[485, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[486, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[486, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[487, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[487, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[488, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[488, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[489, "ivy.Array.fold"]], "fold() (ivy.container method)": [[489, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[490, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[490, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[491, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[491, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[492, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[492, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[493, "ivy.Array.i0"]], "i0() (ivy.container method)": [[493, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[494, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[494, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[495, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[495, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[496, "ivy.Array.pad"]], "pad() (ivy.container method)": [[496, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[497, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[497, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[498, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[498, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[499, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[499, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[500, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[500, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[501, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[501, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[502, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[502, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[503, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[503, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[504, "ivy.Array.take"]], "take() (ivy.container method)": [[504, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[505, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[505, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[506, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[506, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[507, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[507, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[508, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[508, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[509, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[509, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[510, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[510, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[511, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[511, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[512, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[512, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[513, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[513, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[514, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[514, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[515, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[515, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[516, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[516, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[517, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[517, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[519, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[519, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[520, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[520, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[521, "ivy.Array.beta"]], "beta() (ivy.container method)": [[521, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[522, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[522, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[523, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[523, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[524, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[524, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[525, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[525, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[526, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[527, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[527, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[532, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[532, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[533, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[533, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[534, "ivy.Array.cov"]], "cov() (ivy.container method)": [[534, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[535, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[535, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[536, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[536, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[537, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[537, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[538, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[538, "ivy.Container.igamma"]], "median() (ivy.array method)": [[539, "ivy.Array.median"]], "median() (ivy.container method)": [[539, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[540, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[540, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[541, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[541, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[542, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[542, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[543, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[543, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[544, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[544, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[545, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[545, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[546, "ivy.all_equal"], [646, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[546, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[546, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[547, "ivy.arg_info"], [646, "ivy.arg_info"]], "arg_names() (in module ivy)": [[548, "ivy.arg_names"], [646, "ivy.arg_names"]], "array_equal() (in module ivy)": [[549, "ivy.array_equal"], [646, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[549, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[549, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[550, "ivy.assert_supports_inplace"], [646, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[550, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[550, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[551, "ivy.cache_fn"], [646, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[552, "ivy.clip_matrix_norm"], [646, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[552, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[552, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[553, "ivy.clip_vector_norm"], [646, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[553, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[553, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[554, "ivy.container_types"], [646, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[555, "ivy.current_backend_str"], [646, "ivy.current_backend_str"]], "default() (in module ivy)": [[556, "ivy.default"], [646, "ivy.default"]], "default() (ivy.array method)": [[556, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[557, "ivy.einops_rearrange"], [646, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[557, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[557, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[558, "ivy.einops_reduce"], [646, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[558, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[558, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[559, "ivy.einops_repeat"], [646, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[559, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[559, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[560, "ivy.exists"], [646, "ivy.exists"]], "exists() (ivy.array method)": [[560, "ivy.Array.exists"]], "exists() (ivy.container method)": [[560, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[561, "ivy.fourier_encode"], [646, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[561, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[561, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[562, "ivy.function_supported_devices_and_dtypes"], [646, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[563, "ivy.function_unsupported_devices_and_dtypes"], [646, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[564, "ivy.gather"], [646, "ivy.gather"]], "gather() (ivy.array method)": [[564, "ivy.Array.gather"]], "gather() (ivy.container method)": [[564, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[565, "ivy.gather_nd"], [646, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[565, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[565, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[566, "ivy.get_all_arrays_in_memory"], [646, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[567, "ivy.get_item"], [646, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[568, "ivy.get_num_dims"], [646, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[568, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[568, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[569, "ivy.get_referrers_recursive"], [646, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[570, "ivy.has_nans"], [646, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[570, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[570, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[571, "ivy.inplace_arrays_supported"], [646, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[572, "ivy.inplace_decrement"], [646, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[572, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[572, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[573, "ivy.inplace_increment"], [646, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[573, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[573, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[574, "ivy.inplace_update"], [646, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[574, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[574, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[575, "ivy.inplace_variables_supported"], [646, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[576, "ivy.is_array"], [646, "ivy.is_array"]], "is_array() (ivy.array method)": [[576, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[576, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[577, "ivy.is_ivy_array"], [646, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[577, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[577, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[578, "ivy.is_ivy_container"], [646, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[578, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[579, "ivy.is_ivy_nested_array"], [646, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[580, "ivy.is_native_array"], [646, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[580, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[580, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[581, "ivy.isin"], [646, "ivy.isin"]], "isin() (ivy.array method)": [[581, "ivy.Array.isin"]], "isin() (ivy.container method)": [[581, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[582, "ivy.isscalar"], [646, "ivy.isscalar"]], "itemsize() (in module ivy)": [[583, "ivy.itemsize"], [646, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[583, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[583, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[584, "ivy.match_kwargs"], [646, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[585, "ivy.multiprocessing"], [646, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[586, "ivy.num_arrays_in_memory"], [646, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[587, "ivy.print_all_arrays_in_memory"], [646, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[588, "ivy.scatter_flat"], [646, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[588, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[588, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[589, "ivy.scatter_nd"], [646, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[589, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[589, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[590, "ivy.set_array_mode"], [646, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[591, "ivy.set_exception_trace_mode"], [646, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[592, "ivy.set_inplace_mode"], [646, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[593, "ivy.set_item"], [646, "ivy.set_item"]], "set_min_base() (in module ivy)": [[594, "ivy.set_min_base"], [646, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[595, "ivy.set_min_denominator"], [646, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[596, "ivy.set_nestable_mode"], [646, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[597, "ivy.set_precise_mode"], [646, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[598, "ivy.set_queue_timeout"], [646, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[599, "ivy.set_shape_array_mode"], [646, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[600, "ivy.set_show_func_wrapper_trace_mode"], [646, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[601, "ivy.set_tmp_dir"], [646, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[602, "ivy.shape"], [646, "ivy.shape"]], "shape() (ivy.array method)": [[602, "ivy.Array.shape"]], "size() (in module ivy)": [[603, "ivy.size"], [646, "ivy.size"]], "size() (ivy.array method)": [[603, "ivy.Array.size"]], "size() (ivy.container method)": [[603, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[604, "ivy.stable_divide"], [646, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[604, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[604, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[605, "ivy.stable_pow"], [646, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[605, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[605, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[606, "ivy.strides"], [646, "ivy.strides"]], "strides() (ivy.array method)": [[606, "ivy.Array.strides"]], "strides() (ivy.container method)": [[606, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[607, "ivy.supports_inplace_updates"], [646, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[607, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[607, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[608, "ivy.to_ivy_shape"], [646, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[609, "ivy.to_list"], [646, "ivy.to_list"]], "to_list() (ivy.array method)": [[609, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[609, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[610, "ivy.to_native_shape"], [646, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[611, "ivy.to_numpy"], [646, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[611, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[611, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[612, "ivy.to_scalar"], [646, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[612, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[612, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[613, "ivy.try_else_none"], [646, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[614, "ivy.unset_array_mode"], [646, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[615, "ivy.unset_exception_trace_mode"], [646, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[616, "ivy.unset_inplace_mode"], [646, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[617, "ivy.unset_min_base"], [646, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[618, "ivy.unset_min_denominator"], [646, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[619, "ivy.unset_nestable_mode"], [646, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[620, "ivy.unset_precise_mode"], [646, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[621, "ivy.unset_queue_timeout"], [646, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[622, "ivy.unset_shape_array_mode"], [646, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[623, "ivy.unset_show_func_wrapper_trace_mode"], [646, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[624, "ivy.unset_tmp_dir"], [646, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[625, "ivy.value_is_nan"], [646, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[625, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[625, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[626, "ivy.vmap"], [646, "ivy.vmap"]], "adam_step() (in module ivy)": [[627, "ivy.adam_step"], [647, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[627, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[627, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[628, "ivy.adam_update"], [647, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[628, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[628, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[629, "ivy.execute_with_gradients"], [647, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[630, "ivy.grad"], [647, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[631, "ivy.gradient_descent_update"], [647, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[631, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[631, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[632, "ivy.jac"], [647, "ivy.jac"]], "lamb_update() (in module ivy)": [[633, "ivy.lamb_update"], [647, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[633, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[633, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[634, "ivy.lars_update"], [647, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[634, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[634, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[635, "ivy.optimizer_update"], [647, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[635, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[635, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[636, "ivy.stop_gradient"], [647, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[636, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[636, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[637, "ivy.value_and_grad"], [647, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[638, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[639, "ivy.e"]], "inf (in module ivy)": [[639, "ivy.inf"]], "ivy.functional.ivy.constants": [[639, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[639, "ivy.nan"]], "newaxis (in module ivy)": [[639, "ivy.newaxis"]], "pi (in module ivy)": [[639, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[640, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[641, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[641, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[642, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[642, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[642, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[642, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[642, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[642, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[643, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[643, "ivy.Profiler"]], "ivy.functional.ivy.device": [[643, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[644, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[645, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[646, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[646, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[646, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[647, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[648, "ivy.conv"], [661, "ivy.conv"]], "conv1d() (in module ivy)": [[648, "ivy.conv1d"], [662, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[648, "ivy.conv1d_transpose"], [663, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[648, "ivy.conv2d"], [664, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[648, "ivy.conv2d_transpose"], [665, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[648, "ivy.conv3d"], [666, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[648, "ivy.conv3d_transpose"], [667, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[648, "ivy.conv_general_dilated"], [668, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[648, "ivy.conv_general_transpose"], [669, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[648, "ivy.depthwise_conv2d"], [670, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[648, "ivy.dropout"], [671, "ivy.dropout"]], "ivy.functional.ivy.layers": [[648, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[648, "ivy.linear"], [672, "ivy.linear"]], "lstm() (in module ivy)": [[648, "ivy.lstm"], [673, "ivy.lstm"]], "lstm_update() (in module ivy)": [[648, "ivy.lstm_update"], [674, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[648, "ivy.multi_head_attention"], [675, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[648, "ivy.nms"], [676, "ivy.nms"]], "roi_align() (in module ivy)": [[648, "ivy.roi_align"], [677, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[648, "ivy.scaled_dot_product_attention"], [678, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[649, "ivy.cholesky"], [679, "ivy.cholesky"]], "cross() (in module ivy)": [[649, "ivy.cross"], [680, "ivy.cross"]], "det() (in module ivy)": [[649, "ivy.det"], [681, "ivy.det"]], "diag() (in module ivy)": [[649, "ivy.diag"], [682, "ivy.diag"]], "diagonal() (in module ivy)": [[649, "ivy.diagonal"], [683, "ivy.diagonal"]], "eigh() (in module ivy)": [[649, "ivy.eigh"], [685, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[649, "ivy.eigvalsh"], [686, "ivy.eigvalsh"]], "inner() (in module ivy)": [[649, "ivy.inner"], [687, "ivy.inner"]], "inv() (in module ivy)": [[649, "ivy.inv"], [688, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[649, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[649, "ivy.matmul"], [689, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[649, "ivy.matrix_norm"], [690, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[649, "ivy.matrix_power"], [691, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[649, "ivy.matrix_rank"], [692, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[649, "ivy.matrix_transpose"], [693, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[649, "ivy.outer"], [694, "ivy.outer"]], "pinv() (in module ivy)": [[649, "ivy.pinv"], [695, "ivy.pinv"]], "qr() (in module ivy)": [[649, "ivy.qr"], [696, "ivy.qr"]], "slogdet() (in module ivy)": [[649, "ivy.slogdet"], [697, "ivy.slogdet"]], "solve() (in module ivy)": [[649, "ivy.solve"], [698, "ivy.solve"]], "svd() (in module ivy)": [[649, "ivy.svd"], [699, "ivy.svd"]], "svdvals() (in module ivy)": [[649, "ivy.svdvals"], [700, "ivy.svdvals"]], "tensordot() (in module ivy)": [[649, "ivy.tensordot"], [701, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[649, "ivy.tensorsolve"], [702, "ivy.tensorsolve"]], "trace() (in module ivy)": [[649, "ivy.trace"], [703, "ivy.trace"]], "vander() (in module ivy)": [[649, "ivy.vander"], [704, "ivy.vander"]], "vecdot() (in module ivy)": [[649, "ivy.vecdot"], [705, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[649, "ivy.vector_norm"], [706, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[649, "ivy.vector_to_skew_symmetric_matrix"], [707, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[650, "ivy.binary_cross_entropy"], [708, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[650, "ivy.cross_entropy"], [709, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[650, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[650, "ivy.sparse_cross_entropy"], [710, "ivy.sparse_cross_entropy"]], "ssim_loss() (in module ivy)": [[650, "ivy.ssim_loss"], [711, "ivy.ssim_loss"]], "wasserstein_loss_discriminator() (in module ivy)": [[650, "ivy.wasserstein_loss_discriminator"], [712, "ivy.wasserstein_loss_discriminator"]], "wasserstein_loss_generator() (in module ivy)": [[650, "ivy.wasserstein_loss_generator"], [713, "ivy.wasserstein_loss_generator"]], "clip() (in module ivy)": [[651, "ivy.clip"], [714, "ivy.clip"]], "concat() (in module ivy)": [[651, "ivy.concat"], [715, "ivy.concat"]], "constant_pad() (in module ivy)": [[651, "ivy.constant_pad"], [716, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[651, "ivy.expand_dims"], [717, "ivy.expand_dims"]], "flip() (in module ivy)": [[651, "ivy.flip"], [718, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[651, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[651, "ivy.permute_dims"], [719, "ivy.permute_dims"]], "repeat() (in module ivy)": [[651, "ivy.repeat"], [720, "ivy.repeat"]], "reshape() (in module ivy)": [[651, "ivy.reshape"], [721, "ivy.reshape"]], "roll() (in module ivy)": [[651, "ivy.roll"], [722, "ivy.roll"]], "split() (in module ivy)": [[651, "ivy.split"], [723, "ivy.split"]], "squeeze() (in module ivy)": [[651, "ivy.squeeze"], [724, "ivy.squeeze"]], "stack() (in module ivy)": [[651, "ivy.stack"], [725, "ivy.stack"]], "swapaxes() (in module ivy)": [[651, "ivy.swapaxes"], [726, "ivy.swapaxes"]], "tile() (in module ivy)": [[651, "ivy.tile"], [727, "ivy.tile"]], "unstack() (in module ivy)": [[651, "ivy.unstack"], [728, "ivy.unstack"]], "zero_pad() (in module ivy)": [[651, "ivy.zero_pad"], [729, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[652, "ivy.fomaml_step"], [730, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[652, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[652, "ivy.maml_step"], [731, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[652, "ivy.reptile_step"], [732, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[653, "ivy.all_nested_indices"], [733, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[653, "ivy.copy_nest"], [734, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[653, "ivy.duplicate_array_index_chains"], [735, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[653, "ivy.index_nest"], [736, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[653, "ivy.insert_into_nest_at_index"], [737, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[653, "ivy.insert_into_nest_at_indices"], [738, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[653, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[653, "ivy.map"], [739, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[653, "ivy.map_nest_at_index"], [740, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[653, "ivy.map_nest_at_indices"], [741, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[653, "ivy.multi_index_nest"], [742, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[653, "ivy.nested_any"], [743, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[653, "ivy.nested_argwhere"], [744, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[653, "ivy.nested_map"], [745, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[653, "ivy.nested_multi_map"], [746, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[653, "ivy.prune_empty"], [747, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[653, "ivy.prune_nest_at_index"], [748, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[653, "ivy.prune_nest_at_indices"], [749, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[653, "ivy.set_nest_at_index"], [750, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[653, "ivy.set_nest_at_indices"], [751, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[654, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[654, "ivy.layer_norm"], [752, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[655, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[655, "ivy.multinomial"], [753, "ivy.multinomial"]], "randint() (in module ivy)": [[655, "ivy.randint"], [754, "ivy.randint"]], "random_normal() (in module ivy)": [[655, "ivy.random_normal"], [755, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[655, "ivy.random_uniform"], [756, "ivy.random_uniform"]], "seed() (in module ivy)": [[655, "ivy.seed"], [757, "ivy.seed"]], "shuffle() (in module ivy)": [[655, "ivy.shuffle"], [758, "ivy.shuffle"]], "argmax() (in module ivy)": [[656, "ivy.argmax"], [759, "ivy.argmax"]], "argmin() (in module ivy)": [[656, "ivy.argmin"], [760, "ivy.argmin"]], "argwhere() (in module ivy)": [[656, "ivy.argwhere"], [761, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[656, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[656, "ivy.nonzero"], [762, "ivy.nonzero"]], "where() (in module ivy)": [[656, "ivy.where"], [763, "ivy.where"]], "ivy.functional.ivy.set": [[657, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[657, "ivy.unique_all"], [764, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[657, "ivy.unique_counts"], [765, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[657, "ivy.unique_inverse"], [766, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[657, "ivy.unique_values"], [767, "ivy.unique_values"]], "argsort() (in module ivy)": [[658, "ivy.argsort"], [768, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[658, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[658, "ivy.msort"], [769, "ivy.msort"]], "searchsorted() (in module ivy)": [[658, "ivy.searchsorted"], [770, "ivy.searchsorted"]], "sort() (in module ivy)": [[658, "ivy.sort"], [771, "ivy.sort"]], "cumprod() (in module ivy)": [[659, "ivy.cumprod"], [772, "ivy.cumprod"]], "cumsum() (in module ivy)": [[659, "ivy.cumsum"], [773, "ivy.cumsum"]], "einsum() (in module ivy)": [[659, "ivy.einsum"], [774, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[659, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[659, "ivy.max"], [775, "ivy.max"]], "mean() (in module ivy)": [[659, "ivy.mean"], [776, "ivy.mean"]], "min() (in module ivy)": [[659, "ivy.min"], [777, "ivy.min"]], "prod() (in module ivy)": [[659, "ivy.prod"], [778, "ivy.prod"]], "std() (in module ivy)": [[659, "ivy.std"], [779, "ivy.std"]], "sum() (in module ivy)": [[659, "ivy.sum"], [780, "ivy.sum"]], "var() (in module ivy)": [[659, "ivy.var"], [781, "ivy.var"]], "all() (in module ivy)": [[660, "ivy.all"], [782, "ivy.all"]], "any() (in module ivy)": [[660, "ivy.any"], [783, "ivy.any"]], "ivy.functional.ivy.utility": [[660, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[660, "ivy.load"], [784, "ivy.load"]], "save() (in module ivy)": [[660, "ivy.save"], [785, "ivy.save"]], "conv1d() (ivy.array method)": [[662, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[662, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[663, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[663, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[664, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[664, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[665, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[665, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[666, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[666, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[667, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[667, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[670, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[670, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[671, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[671, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[672, "ivy.Array.linear"]], "linear() (ivy.container method)": [[672, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[674, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[674, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[675, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[675, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[678, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[678, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[679, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[679, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[680, "ivy.Array.cross"]], "cross() (ivy.container method)": [[680, "ivy.Container.cross"]], "det() (ivy.array method)": [[681, "ivy.Array.det"]], "det() (ivy.container method)": [[681, "ivy.Container.det"]], "diag() (ivy.array method)": [[682, "ivy.Array.diag"]], "diag() (ivy.container method)": [[682, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[683, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[683, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[685, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[685, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[686, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[686, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[687, "ivy.Array.inner"]], "inner() (ivy.container method)": [[687, "ivy.Container.inner"]], "inv() (ivy.array method)": [[688, "ivy.Array.inv"]], "inv() (ivy.container method)": [[688, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[689, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[689, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[690, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[690, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[691, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[691, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[692, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[692, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[693, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[693, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[694, "ivy.Array.outer"]], "outer() (ivy.container method)": [[694, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[695, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[695, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[696, "ivy.Array.qr"]], "qr() (ivy.container method)": [[696, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[697, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[697, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[698, "ivy.Array.solve"]], "solve() (ivy.container method)": [[698, "ivy.Container.solve"]], "svd() (ivy.array method)": [[699, "ivy.Array.svd"]], "svd() (ivy.container method)": [[699, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[700, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[700, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[701, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[701, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[702, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[702, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[703, "ivy.Array.trace"]], "trace() (ivy.container method)": [[703, "ivy.Container.trace"]], "vander() (ivy.array method)": [[704, "ivy.Array.vander"]], "vander() (ivy.container method)": [[704, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[705, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[705, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[706, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[706, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[707, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[707, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[708, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[708, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[709, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[709, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[710, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[710, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[714, "ivy.Array.clip"]], "clip() (ivy.container method)": [[714, "ivy.Container.clip"]], "concat() (ivy.array method)": [[715, "ivy.Array.concat"]], "concat() (ivy.container method)": [[715, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[716, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[716, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[717, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[717, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[718, "ivy.Array.flip"]], "flip() (ivy.container method)": [[718, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[719, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[719, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[720, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[720, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[721, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[721, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[722, "ivy.Array.roll"]], "roll() (ivy.container method)": [[722, "ivy.Container.roll"]], "split() (ivy.array method)": [[723, "ivy.Array.split"]], "split() (ivy.container method)": [[723, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[724, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[724, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[725, "ivy.Array.stack"]], "stack() (ivy.container method)": [[725, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[726, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[726, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[727, "ivy.Array.tile"]], "tile() (ivy.container method)": [[727, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[728, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[728, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[729, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[729, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[752, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[752, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[753, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[753, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[754, "ivy.Array.randint"]], "randint() (ivy.container method)": [[754, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[755, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[755, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[756, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[756, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[758, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[758, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[759, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[759, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[760, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[760, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[761, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[761, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[762, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[762, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[763, "ivy.Array.where"]], "where() (ivy.container method)": [[763, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[764, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[764, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[765, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[765, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[766, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[766, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[767, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[767, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[768, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[768, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[769, "ivy.Array.msort"]], "msort() (ivy.container method)": [[769, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[770, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[770, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[771, "ivy.Array.sort"]], "sort() (ivy.container method)": [[771, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[772, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[772, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[773, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[773, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[774, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[774, "ivy.Container.einsum"]], "max() (ivy.array method)": [[775, "ivy.Array.max"]], "max() (ivy.container method)": [[775, "ivy.Container.max"]], "mean() (ivy.array method)": [[776, "ivy.Array.mean"]], "mean() (ivy.container method)": [[776, "ivy.Container.mean"]], "min() (ivy.array method)": [[777, "ivy.Array.min"]], "min() (ivy.container method)": [[777, "ivy.Container.min"]], "prod() (ivy.array method)": [[778, "ivy.Array.prod"]], "prod() (ivy.container method)": [[778, "ivy.Container.prod"]], "std() (ivy.array method)": [[779, "ivy.Array.std"]], "std() (ivy.container method)": [[779, "ivy.Container.std"]], "sum() (ivy.array method)": [[780, "ivy.Array.sum"]], "sum() (ivy.container method)": [[780, "ivy.Container.sum"]], "var() (ivy.array method)": [[781, "ivy.Array.var"]], "var() (ivy.container method)": [[781, "ivy.Container.var"]], "all() (ivy.array method)": [[782, "ivy.Array.all"]], "all() (ivy.container method)": [[782, "ivy.Container.all"]], "any() (ivy.array method)": [[783, "ivy.Array.any"]], "any() (ivy.container method)": [[783, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[786, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[786, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[787, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[788, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[788, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[789, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[789, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[789, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[789, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[789, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[789, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[789, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[789, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[789, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[790, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[791, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[792, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[795, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[795, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[795, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[796, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[796, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[797, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[797, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[797, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[797, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[797, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[797, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[797, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[798, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[798, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[799, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[799, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[803, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[803, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[803, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[803, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[803, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[803, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[803, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[803, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[803, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[803, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[803, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[803, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[803, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[803, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[803, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[803, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[803, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[803, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[803, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[803, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[804, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[804, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[804, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[804, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[804, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[804, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[804, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[804, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[804, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[805, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[805, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[806, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[806, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[806, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[806, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[806, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[806, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[806, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[806, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[806, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[806, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[806, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[806, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[806, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[806, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[806, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[806, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.FFT"]], "idct (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.IDct"]], "ifft (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[807, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[807, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[807, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[807, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[807, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[807, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[807, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[807, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[807, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[807, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[807, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[807, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[807, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[807, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[807, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[807, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[807, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.idct method)": [[807, "ivy.stateful.layers.IDct.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[807, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[807, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[807, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[807, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[807, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[807, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[807, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[807, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.idct method)": [[807, "ivy.stateful.layers.IDct.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[807, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[807, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[808, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[808, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[808, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[808, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[808, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[808, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[808, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[809, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[809, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[809, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[809, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[809, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[809, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[810, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[810, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[810, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[810, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[810, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[811, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[811, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[811, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[811, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[811, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[811, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[811, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[811, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[811, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[811, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[811, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[811, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[811, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[811, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[811, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[811, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[811, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[811, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[811, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[811, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[811, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[811, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[811, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[812, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[812, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[812, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[813, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[813, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[814, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[815, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[815, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[815, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[815, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[815, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[815, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[815, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[815, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[815, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[815, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[815, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[816, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[816, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[816, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[817, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[817, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[818, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[818, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[818, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[819, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[819, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[819, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[819, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[819, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.apply_transpose"]], "dummy_inplace_update() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.dummy_inplace_update"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "ivy.utils.decorator_utils": [[819, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[819, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[819, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[820, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[820, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[821, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[821, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[822, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[822, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[823, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[823, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[823, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[823, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[823, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[823, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[823, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[823, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[823, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[823, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[823, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[823, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[823, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[823, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[823, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[823, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[823, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[823, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[823, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[823, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[823, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[823, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[823, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[823, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[823, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[823, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[824, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[824, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[824, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[825, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[825, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[825, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[826, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[826, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[826, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[826, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[826, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[826, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[826, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[826, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[826, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[826, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[827, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[827, "module-ivy.utils.verbosity"]], "automatic code conversions": [[869, "term-Automatic-Code-Conversions"]], "backend handler": [[869, "term-Backend-Handler"]], "compositional functions": [[869, "term-Compositional-Functions"]], "convenience functions": [[869, "term-Convenience-Functions"]], "framework": [[869, "term-Framework"]], "framework handler": [[869, "term-Framework-Handler"]], "graph compiler": [[869, "term-Graph-Compiler"]], "ivy array": [[869, "term-Ivy-Array"]], "ivy backends": [[869, "term-Ivy-Backends"]], "ivy compiler": [[869, "term-Ivy-Compiler"]], "ivy container": [[869, "term-Ivy-Container"]], "ivy frontends": [[869, "term-Ivy-Frontends"]], "ivy functional api": [[869, "term-Ivy-Functional-API"]], "ivy tracer": [[869, "term-Ivy-Tracer"]], "ivy transpiler": [[869, "term-Ivy-Transpiler"]], "mixed functions": [[869, "term-Mixed-Functions"]], "native array": [[869, "term-Native-Array"]], "nestable functions": [[869, "term-Nestable-Functions"]], "pipeline": [[869, "term-Pipeline"]], "primary functions": [[869, "term-Primary-Functions"]], "standalone functions": [[869, "term-Standalone-Functions"]], "submodule helper functions": [[869, "term-Submodule-Helper-Functions"]], "built-in function": [[874, "ivy.trace_graph"], [875, "ivy.transpile"], [876, "ivy.unify"]], "ivy.trace_graph()": [[874, "ivy.trace_graph"]], "ivy.transpile()": [[875, "ivy.transpile"]], "ivy.unify()": [[876, "ivy.unify"]]}})